{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome!","text":"<p> Update June 2024:  These tutorials were initially developed for the Antibiotic Resistant Pathogens Initiative  Galaxy-based tutorials have now been merged into the Galaxy Training Network  Please check there for the most up-to-date material, as this page is no longer maintained </p>"},{"location":"#abrpi-training-materials","title":"ABRPI training materials","text":""},{"location":"#antibiotic-resistant-pathogens-initiative","title":"Antibiotic Resistant Pathogens Initiative","text":"<ul> <li> <p>This site contains tutorials for using the analysis components of the omics.data.edu.au platform to perform various bioinformatics tasks on bacterial \u201comics\u201d data.</p> </li> <li> <p>Tools covered by these tutorials include:</p> <ul> <li> <p>those within the Microbial Genomics Virtual Lab (the mGVL), which can be accessed either through the hosted ABPRI-Galaxy service, or by setting up your own mGVL instance (see below) and accessing via the Unix command line.</p> </li> <li> <p>those within the hosted ABPRI-PathwayTools service.</p> </li> </ul> </li> <li> <p>Tutorials are listed under the tabs in the top panel (Genomics, Transcriptomics, Proteomics, Metabolomics).</p> </li> </ul> <ul> <li> <p>If you wish to set up your own instance (version) of the mGVL, follow the instructions here.</p> <ul> <li>Note: at the stage where you select options in the GVL Launcher window, go to Show advanced startup options and under Flavor select Microbial GVL with Tutorial Indices. In this mGVL instance, you can use both Galaxy and command line tools. If you wish to use the command line tools on a different computer (e.g. your local computer), you would need to make sure the required tools are installed (e.g. Canu, Circlator, Pilon, SPAdes, etc.).</li> </ul> </li> <li> <p>For additional tutorials about how to use the Genomics Virtual Lab and Galaxy, see https://www.gvl.org.au/learn/</p> </li> </ul> <p></p>"},{"location":"genomics/","title":"Overview","text":"<p>This section contains tutorials for basic microbial genomics analyses in Galaxy.  These have been designed to be done sequentially.</p> <ol> <li> <p>Use the Galaxy Platform: a web-based interface for bioinformatic analyses.</p> </li> <li> <p>Import tutorial data to Galaxy:  a set of files to use in these introductory tutorials.</p> </li> <li> <p>Quality control of Illumina data: assess raw Illumina data for quality issues.</p> </li> <li> <p>Assemble a genome with Spades: assemble raw Illumina sequence reads into a draft bacterial genome sequence using the tool \u201cSpades\u201d.</p> </li> <li> <p>Annotate a genome with Prokka: describe the type and location of proteins and other features on the draft bacterial genome sequence using the tool \u201cProkka\u201d.</p> </li> <li> <p>Find variants with Snippy: identify differences (such as nucleotide mutations) between genomes using the tool \u201cSnippy\u201d.</p> </li> </ol>"},{"location":"index_gcc/","title":"Welcome!","text":""},{"location":"index_gcc/#galaxy-community-conference-2016","title":"Galaxy Community Conference 2016","text":"<p>This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial \u201comics\u201d data, either on the Unix command line or using the Galaxy system.</p> <p>Tutorials on Assembly and Annotation can be found under the Microbial Genomics tab in the top panel. </p> <p> </p>"},{"location":"index_mcgill/","title":"Welcome!","text":"<p>This site contains tutorials for using the Microbial Genomics Virtual Lab to perform bioinformatics tasks on bacterial \u201comics\u201d data, either on the Unix command line or using the Galaxy system.</p> <p> </p>"},{"location":"template/","title":"Phylogenomics","text":""},{"location":"template/#introduction","title":"Introduction","text":"<p>FIXME</p>"},{"location":"template/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>FIXME</li> <li>FIXME</li> <li>FIXME</li> </ol>"},{"location":"template/#main-tutorial","title":"Main Tutorial","text":"<p>FIXME</p> <p>Note</p> <p>Please take note of this because we care about you.</p> <p>Hint</p> <p>This is a useful tip for you because we like you.</p> <p>Warning</p> <p>Please be careful here, you could really mess things up.</p>"},{"location":"template/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"tools/","title":"Tools","text":"<p>This section includes short training modules about the various tools in the microbial GVL, either within the Galaxy interface or via the commandline. Additional relevant tools and software are also included, particularly for visualization.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#about","title":"About","text":"<p>The Food and Health Flagship is an RDS-funded project to provide cloud-based data services and tools for Australian Life Science Researchers to combine, analyse and interpret genomic, transcriptomic, proteomic and metabolomic data. The data platform will incorporate the Bioplatforms Australia Antibiotic Resistant Pathogens Initiative (ABRPI).</p>"},{"location":"about/#authors","title":"Authors","text":"<p> Anna Syme</p> <p> Torsten Seemann</p> <p> Simon Gladman</p> <p> Dieter Bulach</p> <p> Xin-Yi Chua</p> <p> Dominique Gorse</p> <p> Mike Thang</p>"},{"location":"about/#support","title":"Support","text":"<ul> <li>Research Data Services</li> <li>Bioplatforms Australia</li> <li>Nectar</li> </ul> <p>These training materials have been used for:</p> <p>McGill Summer Institute in Infectious Diseases and Global Health, June 2016, Montreal, Canada</p> <p> </p> <p>Galaxy Community Conference 2016, Indiana, USA</p> <p> </p> <p>CLIMB UK Launch: Cloud Infrastructure for Microbial Bioinformatics, 2016</p> <p> </p>"},{"location":"modules/abricate/","title":"Finding antibiotic-resistant genes","text":""},{"location":"modules/abricate/#finding-antibiotic-resistant-genes","title":"Finding antibiotic-resistant genes","text":""},{"location":"modules/abricate/#overview","title":"Overview","text":"<ul> <li>Import an assembled bacterial genome</li> <li>Find antibiotic-resistance (AMR) genes</li> </ul>"},{"location":"modules/abricate/#import-data","title":"Import data","text":"<ul> <li>Go to your Galaxy instance.</li> <li> <p>Set up a new History for this Activity.</p> <ul> <li>In the History panel, click on the cog icon, select Create New.</li> <li>A new empty history should appear; click on Unnamed history and re-name it (e.g. AMR genes).</li> </ul> <p></p> </li> <li> <p>Import an assembled genome (or use one from your history).</p> <ul> <li>Copy this URL for a previously-assembled genome:  https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/SPAdes_contigs.fasta</li> <li>From the Galaxy tool panel, click on Get Data \u2192 Upload File </li> <li>Click the Paste/Fetch data button  </li> <li>Paste the URL into the box.</li> <li>Click the Start button.  </li> <li>Once the progress bar reaches 100%, click the Close button  </li> <li>The file will now upload to your current history.</li> <li>Re-name it with the pencil icon to contigs.fasta.</li> </ul> </li> </ul>"},{"location":"modules/abricate/#find-antibiotic-resistance-genes","title":"Find antibiotic-resistance genes","text":"<ul> <li>We will use the tool called ABRicate to find antibiotic resistance genes in the (draft) genome.</li> <li>ABRicate uses a database of these genes called ResFinder.</li> </ul> <p>In the tools panel, go to NGS Analysis: NGS Annotation: ABRicate.</p> <ul> <li>For Select fasta file choose contigs.fasta (or the name of your own assembly file.)</li> <li>Click Execute.</li> </ul> <p>There is one output file. Click on the eye icon to view. It should look like this, although likely with a different number of rows.</p> <ul> <li>This shows a table with one line for each antibiotic resistance gene found, in which contig, at which position, and the % coverage.</li> </ul> <p></p>"},{"location":"modules/abricate/#next","title":"Next","text":"<p>In the output from Abricate, column 5 has the list of the antibiotic-resistant gene names. Some of these may be complete, exact matches, and some may have a gap/mutation in their sequence which can affect whether that protein is actually expressed.</p> <p>To find out more about what type of AMR genes these are, you can search Genbank with the gene name (e.g. aadD).</p>"},{"location":"modules/access_data/","title":"Public data &rarr; assembly, annotation","text":""},{"location":"modules/access_data/#public-data-assembly-annotation-mlst","title":"Public data \u2192 assembly, annotation, MLST","text":""},{"location":"modules/access_data/#overview","title":"Overview","text":"<ul> <li>Download a readset from a public database</li> <li>Check the quality of the data and filter</li> <li>Assemble the reads into a draft genome</li> <li>Find antibiotic resistance genes</li> <li>Annotate the genome</li> <li>Find the sequence type (the MLST)</li> </ul>"},{"location":"modules/access_data/#background","title":"Background","text":"<p>Sequencing reads (readsets) for more than 100,000 isolates are available on public molecular sequence databases (GenBank/ENA/DDJB):</p> <ul> <li>Most of these have been produced using the Illumina sequencing platform.</li> <li>Most of these have no corresponding draft assembly.</li> </ul> <p>Not all readsets are of high quality:</p> <ul> <li>There may be insufficient reads (usually ~x20 is the minimum read coverage needed).</li> <li>The reads could be from a mixed colony.</li> <li>The classification could be incorrect (both genus and species).</li> </ul> <p>It is VERY important to check that what you find in the readset makes sense!</p>"},{"location":"modules/access_data/#import-data","title":"Import data","text":"<ul> <li>Go to your Galaxy instance.</li> <li> <p>Set up a new History for this Activity.</p> <ul> <li>In the History panel, click on the cog icon, select Create New.</li> <li>A new empty history should appear; click on Unnamed history and re-name it (e.g. ENA Activity).</li> </ul> <p></p> </li> <li> <p>Choose an accession number.</p> <ul> <li>If you are working on this tutorial in a workshop: assign yourself a readset from the table of isolates provided. Put your name in Column B. The accession number for the readset that relates to each isolate is located in Column A. ERR019289 will be used in this demonstration. </li> <li>Alternatively, use accession number ERR019289. This is Vibrio cholerae.</li> </ul> </li> <li> <p>In Galaxy, go to the Tools panel on the left, select Get Data \u2192 EBI SRA.</p> <ul> <li>This causes the ENA website to open.</li> <li>Enter the accession number in the ENA search bar. </li> </ul> </li> <li> <p>(The search may find reads under Experiment and Run. If so, click on the Accession number under \u201cRun\u201d.)</p> </li> <li> <p>Find the column called Fastq files (galaxy). Click on File 1.</p> </li> </ul> <p></p> <p>This file will download to your Galaxy history, and will return you to the Galaxy page.</p> <ul> <li> <p>Repeat the above steps for Get Data \u2192 EBI SRA and download File 2.</p> </li> <li> <p>The files should now be in your Galaxy history.</p> </li> <li>Click on the pencil icon next to File 1.<ul> <li>Re-name it ERR019289_1.fastq.gz. Save</li> <li>Change the datatype to fastqsanger (note: not fastqCsanger).  Save</li> </ul> </li> <li>Repeat for File 2 (name it ERR019289_2.fastq.gz).</li> </ul>"},{"location":"modules/access_data/#evaluate-quality","title":"Evaluate quality","text":"<p>We will run FastQC on the pair of fastq files.</p> <ul> <li>In the Galaxy tools panel, go to NGS Analysis: NGS QC and manipulation: FastQC.</li> <li>Choose the Multiple datasets icon and then select both fastq files.</li> <li>Your Galaxy window should look like this:</li> </ul> <p></p> <ul> <li>Click Execute </li> <li>The output (4 files) will appear at the top of your Galaxy history.</li> <li>Click on the eye icon next to FastQC on data 1: Web page</li> <li>Scroll through the results. Take note of the maximum read length (e.g. 54 bp).</li> </ul>"},{"location":"modules/access_data/#trim","title":"Trim","text":"<p>In this step we will remove adapters and trim low-quality sequence from the reads.</p> <ul> <li>In the Galaxy tools panel, go to NGS Analysis: NGS QC and manipulation: Trimmomatic</li> <li>Leave settings as they are except for:<ul> <li>Input FASTQ file R1 - check this is File 1</li> <li>Input FASTQ file R2 - check this is File 2</li> </ul> </li> <li>Under Perform initial ILLUMINACLIP step choose Yes<ul> <li>Under Adapter sequences to use choose Nextera(paired-ended)</li> <li>This trims particular adapters from the sequences.</li> </ul> </li> <li>Under Trimmomatic Operation leave the settings as they are.<ul> <li>We will use the average quality across a 4-base sliding window to identify and delete bad sequence (and the flanking bases to the start or end of the sequences - whichever is nearest to the patch of poor quality sequence)</li> </ul> </li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute </li> </ul> <p>There are four output files.</p> <ul> <li>Because trimmomatic might have trimmed some reads to zero, there are now some reads reads with no pair. These are in the unpaired output files. These can be deleted (with the cross button).</li> <li>Re-name the other two output files, e.g. as ERRxxxxx_T1.fastq.gz &amp; ERRxxxxx_T2.fastq.gz. These properly paired fastq files will be the input for the Spades assembly.  </li> </ul>"},{"location":"modules/access_data/#assemble","title":"Assemble","text":"<p>We will assemble the trimmed reads.</p> <p>In the left hand tools panel, go to NGS Analysis: NGS Assembly: spades.</p> <p>Leave the parameters as their defaults except:</p> <ul> <li>Careful correction? No</li> <li>Kmers to use, separated by commas: 21,33,51<ul> <li>chosen kmers must be shorter than the maximum read length (see the FastQC output: sequence length)</li> </ul> </li> <li>Coverage Cutoff: Off<ul> <li>using a coverage cutoff might cause a problem if there are high-copy-number plasmids</li> </ul> </li> <li>Forward reads: ERR019289_T1.fastq.gz</li> <li>Reverse reads: ERR019289_T2.fastq.gz</li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute </li> </ul> <p>There are five output files.</p> <ul> <li>SPAdes contigs (fasta) &amp; SPAdes scaffolds (fasta): The draft genome assembly. (These should be identical with the conditions used here.)</li> <li>SPAdes contig stats &amp; SPAdes scaffold stats: A list of all the contigs and sizes in each of these files.</li> <li>SPAdes log: A summary of the assembly run.</li> </ul> <p>Rename SPAdes contigs (fasta) to something like ERR019289.fasta.</p> <p>Check the size of your draft genome sequence</p> <ul> <li>If you only have a few contigs, you can estimate the size from the SPAdes contig stats file by adding together the contig sizes.</li> <li>Alternatively, go to NGS Common Toolsets: Fasta Statistics and input the SPAdes contigs (fasta) file. Click Execute. The output will show the draft genome size next to  num_bp.</li> </ul> <p>Compare your assembly size to others of the same species</p> <ul> <li>Go to the NCBI website: Genome</li> <li>Next to  Genome , enter the name of your species; e.g. Vibrio cholerae.</li> <li>Click on Genome ASsembly and Annotation report</li> <li>View the table. Click on the Size column to sort by size. (Check for additional pages at the bottom right.)</li> <li>Is your assembly size similar?</li> </ul>"},{"location":"modules/access_data/#find-antibiotic-resistance-genes","title":"Find antibiotic resistance genes","text":"<p>Now that we have our draft genome sequence, we can search for particular genes.</p> <ul> <li>We will use the tool called ABRicate to find antibiotic resistance genes in the genome.</li> <li>ABRicate uses a database of these genes called ResFinder.</li> </ul> <p>In the tools panel, go to NGS Analysis: NGS Annotation: ABRicate.</p> <ul> <li>For Select fasta file choose SPAdes contigs (fasta) or whatever you renamed it (e.g. ERR019289.fasta).</li> <li>Click Execute.</li> </ul> <p>There is one output file. Click on the eye icon to view.</p> <ul> <li>This shows a table with one line for each antibiotic resistance gene found, in which contig, at which position, and the % coverage.</li> </ul> <p></p>"},{"location":"modules/access_data/#find-the-sequence-type-mlst","title":"Find the sequence type (MLST)","text":"<p>Bacterial samples (isolates) are often assigned a \u201csequence type\u201d. This is a number that defines the particular combination of alleles in that isolate, e.g. ST248.</p> <ul> <li>Because several genes (loci) are used, this is termed Multi-Locus Sequence Typing (MLST).</li> <li>There are different MLST schemes for different groups of bacteria.</li> </ul> <p>In the tools panel, go to NGS Analysis: NGS Annotation: MLST</p> <ul> <li>Under input_file choose choose SPAdes contigs (fasta) or whatever you renamed it (e.g. ERR019289.fasta).</li> <li>Note: a specific MLST scheme can be specified if you wish, but by default all schemes are searched</li> <li>Click Execute.</li> </ul> <p>There is one output file. Click on the eye icon to view.</p> <ul> <li>There is a one line output.</li> </ul> <p></p> <p>Some symbols are used to describe missing or inexact matches to alleles:</p> <ul> <li>n: Exact intact allele</li> <li>~n : Novel allele similar to n</li> <li>n,m : Multiple alleles</li> <li>- : Allele missing</li> </ul>"},{"location":"modules/access_data/#annotate","title":"Annotate","text":"<p>We have found a list of resistance genes in the draft sequence, but we can also annotate the whole genome to find all the genes present.</p> <p>In the tools panel, go to Tools \u2192 NGS Analysis \u2192 NGS: Annotation \u2192 Prokka </p> <p>Set the following parameters (leave everything else unchanged):</p> <ul> <li>Contigs to annotate: SPAdes contigs (fasta) (or equivalent)</li> <li>Locus tag prefix (\u2013locustag): P</li> <li>Force GenBank/ENA/DDJB compliance (\u2013compliant): No</li> <li>Sequencing Centre ID (\u2013centre): V</li> <li>Click Execute </li> </ul> <p>There are several output files:</p> <ul> <li> <p>gff: the master annotation in GFF format, containing both sequences and annotations</p> </li> <li> <p>gbk: a standard GenBank file derived from the master .gff. If the input to prokka was a multi-FASTA, then this will be a multi-GenBank, with one record for each sequence</p> </li> <li> <p>fna: nucleotide FASTA file of the input contig sequences</p> </li> <li> <p>faa: protein FASTA file of the translated CDS sequences</p> </li> <li> <p>ffn: nucleotide FASTA file of all the annotated sequences, not just CDS</p> </li> <li> <p>sqn: an ASN1 format \u201cSequin\u201d file for submission to GenBank. It needs to be edited to set the correct taxonomy, authors, related publication, etc.</p> </li> <li> <p>fsa: nucleotide FASTA file of the input contig sequences, used by \u201ctbl2asn\u201d to create the .sqn file. It is mostly the same as the .fna file, but with extra Sequin tags in the sequence description lines</p> </li> <li> <p>tbl: Feature Table file, used by \u201ctbl2asn\u201d to create the .sqn file</p> </li> <li> <p>err: unacceptable annotations - the NCBI discrepancy report</p> </li> <li> <p>log: contains all the output that Prokka produced during its run</p> </li> <li> <p>txt: statistics relating to the annotated features found</p> </li> </ul> <p>Tabulate</p> <p>If you are working on this tutorial as part of a class workshop:</p> <ul> <li>Go to the table of isolates and add information about genome size, GC content, and number of contigs.</li> </ul>"},{"location":"modules/access_data/#next","title":"Next","text":"<ul> <li>View the annotated genome in Artemis or JBrowse.</li> </ul>"},{"location":"modules/artemis/","title":"Introduction to Artemis","text":""},{"location":"modules/artemis/#background","title":"Background","text":"<p>Artemis is a genome browser and annotation tool. Artemis is written in Java and can be used on Mac, Linux or Windows. While it can be used to view any genomic data, it is specifically designed for viewing bacterial or viral genomes. A variety of file types can be loaded and viewed using Artemis; these include FASTA, EMBL, GenBank and GFF3 format files.</p>"},{"location":"modules/artemis/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial, you should be able to:</p> <ol> <li>install Artemis on your laptop</li> <li>download a bacterial genome sequence, and</li> <li>open the genome sequence in Artemis and look at the sequence features.</li> </ol>"},{"location":"modules/artemis/#install-artemis","title":"Install Artemis","text":"<ul> <li>Artemis is available at no cost from the Sanger Institute Website.</li> <li>Instructions for downloading and installing Artemis can be found at: http://www.sanger.ac.uk/science/tools/artemis</li> <li>Download and run.</li> <li>Not working? The most common problem: Java is either not installed or too old.</li> <li>Artemis needs a recent version of Java v1.6 or higher. Go to http://java.com and update.</li> <li>Still not working? Seek help!</li> </ul>"},{"location":"modules/artemis/#download-a-bacterial-genome","title":"Download a bacterial genome","text":"<p>We will download the sequence of Leptospira borgpetersenii serovar Hardjobovis Chromosome II from the NCBI website in GenBank format.  </p> <ul> <li>Go to http://www.ncbi.nlm.nih.gov</li> <li>Select the \u201cTaxonomy\u201d database from the list on the left hand side.</li> <li>Enter \u201cLeptospira borgpetersenii\u201d in the search box and click Search.</li> </ul> <p></p> <ul> <li>Click on the species name:</li> </ul> <p></p> <p> </p> <ul> <li>Click on the species name again (at the top of the list):</li> </ul> <p></p> <p> </p> <ul> <li>Next to Genome, click on the far right number 1.</li> </ul> <p></p> <p> </p> <ul> <li>Click on Genome Assembly and Annotation report:</li> </ul> <p> </p> <p></p> <p> </p> <ul> <li>Then, for the first species listed, scroll to the far right of the table, see chromosome 2, and click the link to the annotated assembly number NC_008509.1 (not CP0003):</li> </ul> <p></p> <p> </p> <ul> <li>Then, click Send</li> <li>choose Complete Record, Destination \u2192 File, Format \u2192 GenBank (full)</li> <li>click Create File.</li> <li>Note the download location (e.g. Downloads folder).</li> </ul> <p></p> <p> </p>"},{"location":"modules/artemis/#open-the-genbank-file-in-artemis","title":"Open the GenBank file in Artemis","text":"<ul> <li>Open Artemis</li> </ul> <ul> <li>Menu \u2192 File \u2192 Open</li> <li>Select file from dialog box, and OPEN</li> </ul>"},{"location":"modules/artemis/#the-artemis-interface","title":"The Artemis interface","text":"<p>There are three main panes:</p> <ol> <li>The overview</li> <li>The DNA view</li> <li>Text summary of features</li> </ol> <p></p> <p>Overview:  </p> <ul> <li>6-frame annotation</li> <li>annotated genome features are highlighted</li> <li>black lines are stop codons</li> </ul> <p>DNA view:</p> <ul> <li>6-frame translation</li> <li>DNA sequence in the middle</li> <li>amino acid translations above and below</li> </ul> <p>Text summary:</p> <ul> <li>text summary of features</li> </ul> <p>Navigation:</p> <ul> <li>Go to the overview pane</li> <li>click on one annotated feature (highlighted in blue)</li> <li>it will be summarized on the top line (\u201cselected feature\u201d)</li> <li>the corresponding sequence will be highlighted in the DNA view pane</li> <li>the corresponding feature will be higlighted in the text summary pane</li> <li>now double click on the same annotated feature</li> <li>all three panes will be centred for this feature</li> <li>to move left or right, use the horizontal scroll bars under each pane</li> <li>to zoom, use the vertical scroll bars on the right</li> </ul>"},{"location":"modules/artemis/#what-next","title":"What next","text":"<ul> <li> <p>Links to more information: the Artemis manual.</p> </li> <li> <p>Assemble a bacterial genome using Spades.</p> </li> </ul>"},{"location":"modules/breseq/","title":"Breseq","text":""},{"location":"modules/breseq/#overview","title":"Overview","text":"<p>Breseq is a tool to find variants, by comparing sequencing reads against a reference.</p> <p>http://barricklab.org/twiki/bin/view/Lab/ToolsBacterialGenomeResequencing https://www.ncbi.nlm.nih.gov/pubmed?Db=pubmed&amp;Cmd=ShowDetailView&amp;TermToSearch=24838886</p>"},{"location":"modules/breseq/#get-data","title":"Get data","text":"<p>ref sequence in .gbk R1.fq R2.fq</p>"},{"location":"modules/breseq/#run","title":"Run","text":"<pre><code>breseq -j 16 -r ref.gbk R1.fq R2.fq -o output\n</code></pre> <p>-j number of cores -o output dir</p>"},{"location":"modules/breseq/#results","title":"Results","text":"<p>Navigate to output directory.</p> <p>use readlink command</p> <p>go into own mac terminal</p> <p>rsync -av (output)</p> <p>then open in browser address bar</p>"},{"location":"modules/cmdline_assembly/","title":"PacBio assembly with command line tools","text":""},{"location":"modules/cmdline_assembly/#pacbio-reads-assembly-with-command-line-tools","title":"Pacbio reads: assembly with command line tools","text":"<p>Keywords: de novo assembly, PacBio, PacificBiosciences, Illumina, command line, Canu, Circlator, BWA, Spades, Pilon, Microbial Genomics Virtual Laboratory</p> <p>This tutorial demonstrates how to use long Pacbio sequence reads to assemble a bacterial genome, including correcting the assembly with short Illumina reads.</p> <p>Note: this tutorial uses canu v1.5. </p>"},{"location":"modules/cmdline_assembly/#resources","title":"Resources","text":"<p>Tools (and versions) used in this tutorial include:</p> <ul> <li>canu 1.5 </li> <li>infoseq and sizeseq (part of EMBOSS) 6.6.0.0</li> <li>circlator 1.5.1 [recently updated]</li> <li>bwa 0.7.15</li> <li>samtools 1.3.1</li> <li>spades 3.10.1</li> <li>makeblastdb and blastn (part of blast) 2.4.0+</li> <li>pilon 1.20</li> </ul>"},{"location":"modules/cmdline_assembly/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial, be able to:</p> <ol> <li>Assemble and circularise a bacterial genome from PacBio sequence data.</li> <li>Recover small plasmids missed by long read sequencing, using Illumina data</li> <li>Explore the effect of polishing assembled sequences with a different data set.</li> </ol>"},{"location":"modules/cmdline_assembly/#overview","title":"Overview","text":"<p>Simplified version of workflow:</p> <p></p>"},{"location":"modules/cmdline_assembly/#get-data","title":"Get data","text":"<p>The files we need are:</p> <ul> <li>pacbio.fastq.gz : the PacBio reads</li> <li>illumina_R1.fastq.gz: the Illumina forward reads</li> <li>illumina_R2.fastq.gz: the Illumina reverse reads</li> </ul> <p>If you already have the files, skip forward to next section, Assemble.</p> <p>Otherwise, this section has information about how to find and move the files:</p>"},{"location":"modules/cmdline_assembly/#pacbio-files","title":"PacBio files","text":"<ul> <li>Open the command line. </li> <li>Navigate to or create the directory in which you want to work.</li> <li>If the files are already on your server, you can symlink by using</li> </ul> <pre><code>ln -s real_file_path [e.g. data/sample_name/pacbio1.fastq.gz] chosen_symlink_name [e.g. pacbio1.fastq.gz]\n</code></pre> <ul> <li> <p>Alternatively, obtain the input files from elsewhere, e.g. from the BPA portal. (You will need a password.)</p> </li> <li> <p>Pacbio files are often stored in the format:</p> <ul> <li>Sample_name/Cell_name/Analysis_Results/long_file_name_1.fastq.gz</li> </ul> </li> <li> <p>We will use the longfilename.subreads.fastq.gz files.</p> </li> <li> <p>The reads are usually split into three separate files because they are so large.</p> </li> <li> <p>Right click on the first subreads.fastq.gz file and \u201ccopy link address\u201d.</p> </li> <li> <p>In the command line, type:</p> </li> </ul> <pre><code>wget --user username --password password [paste link URL for file]\n</code></pre> <ul> <li>Repeat for the other two subreads.fastq.gz files.</li> <li>Join the files:</li> </ul> <pre><code>cat pacbio*.fastq.gz &gt; pacbio.fastq.gz\n</code></pre> <ul> <li>If the files are not gzipped, type:</li> </ul> <pre><code>cat pacbio*.fastq | gzip &gt; pacbio.fastq.gz\n</code></pre>"},{"location":"modules/cmdline_assembly/#illumina-files","title":"Illumina files","text":"<ul> <li>We will also use 2 x Illumina (Miseq) fastq.gz files.</li> <li>These are the R1.fastq.gz and R2.fastq.gz files.</li> <li>Symlink or \u201cwget\u201d these files as described above for PacBio files.</li> <li>Shorten the name of each of these files:</li> </ul> <pre><code>mv longfilename_R1.fastq.gz illumina_R1.fastq.gz\nmv longfilename_R2.fastq.gz illumina_R2.fastq.gz\n</code></pre>"},{"location":"modules/cmdline_assembly/#sample-information","title":"Sample information","text":"<p>The sample used in this tutorial is a gram-positive bacteria called Staphylococcus aureus (sample number 25747). This particular sample is from a strain that is resistant to the antibiotic methicillin (a type of penicillin). It is also called MRSA: methicillin-resistant Staphylococcus aureus. It was isolated from (human) blood and caused bacteraemia, an infection of the bloodstream.</p>"},{"location":"modules/cmdline_assembly/#assemble","title":"Assemble","text":"<ul> <li>We will use the assembly software called Canu.</li> <li>Run Canu with these commands:</li> </ul> <pre><code>canu -p canu -d canu_outdir genomeSize=2.8m -pacbio-raw pacbio.fastq.gz\n</code></pre> <ul> <li>the first <code>canu</code> tells the program to run</li> <li><code>-p canu</code> names prefix for output files (\u201ccanu\u201d)</li> <li><code>-d canu_outdir</code> names output directory (\u201ccanu_outdir\u201d)</li> <li> <p><code>genomeSize</code> only has to be approximate.</p> <ul> <li>e.g. Staphylococcus aureus, 2.8m</li> <li>e.g. Streptococcus pyogenes, 1.8m</li> </ul> </li> <li> <p>Canu will correct, trim and assemble the reads.</p> </li> <li>Various output will be displayed on the screen.</li> </ul>"},{"location":"modules/cmdline_assembly/#check-the-output","title":"Check the output","text":"<p>Move into canu_outdir and <code>ls</code> to see the output files.</p> <ul> <li>The canu.contigs.fasta are the assembled sequences.</li> <li>The canu.unassembled.fasta are the reads that could not be assembled.</li> <li>The canu.correctedReads.fasta.gz are the corrected Pacbio reads that were used in the assembly.</li> <li>The canu.file.gfa is the graph of the assembly.</li> <li>Display summary information about the contigs: (<code>infoseq</code> is a tool from EMBOSS)</li> </ul> <pre><code>infoseq canu.contigs.fasta\n</code></pre> <ul> <li>This will show the contigs found by Canu. e.g.,</li> </ul> <pre><code>    - tig00000001   2851805\n</code></pre> <p>This looks like a chromosome of approximately 2.8 million bases.</p> <p>This matches what we would expect for this sample. For other data, Canu may not be able to join all the reads into one contig, so there may be several contigs in the output. Also, the sample may contain some plasmids and these may be found full or partially by Canu as additional contigs.  </p>"},{"location":"modules/cmdline_assembly/#change-canu-parameters-if-required","title":"Change Canu parameters if required","text":"<p>If the assembly is poor with many contigs, re-run Canu with extra sensitivity parameters; e.g.</p> <pre><code>canu -p prefix -d outdir corMhapSensitivity=high corMinCoverage=0 genomeSize=2.8m -pacbio-raw pacbio.fastq.gz\n</code></pre>"},{"location":"modules/cmdline_assembly/#questions","title":"Questions","text":"<p>Question</p> <p>How do long- and short-read assembly methods differ?</p> Answer <p>short reads: De Bruijn graphs; long reads: a move back towards simpler overlap-layout-consensus methods.</p> <p>Question</p> <p>Where can we find out the what the approximate genome size should be for the species being assembled?</p> Answer <p>NCBI Genomes - enter species name - click on Genome Assembly and Annotation report - sort table by clicking on the column header Size (Mb) - look at range of sizes in this column.</p> <p>Question</p> <p>In the assembly output, what are the unassembled reads? Why are they there?</p> Answer <p>Question</p> <p>What are the corrected reads? How did canu correct the reads?</p> Answer <p>Question</p> <p>Where could you view the output .gfa and what would it show?</p> Answer"},{"location":"modules/cmdline_assembly/#trim-and-circularise","title":"Trim and circularise","text":""},{"location":"modules/cmdline_assembly/#run-circlator","title":"Run Circlator","text":"<p>Circlator identifies and trims overhangs (on chromosomes and plasmids) and orients the start position at an appropriate gene (e.g. dnaA). It takes in the assembled contigs from Canu, as well as the corrected reads prepared by Canu.</p> <p>Overhangs are shown in blue:</p> <p> Adapted from Figure 1. Hunt et al. Genome Biology 2015</p> <p>Move back into your main analysis folder.</p> <p>Run Circlator:</p> <pre><code>circlator all --threads 8 --verbose canu_outdir/canu.contigs.fasta canu_outdir/canu.correctedReads.fasta.gz circlator_outdir\n</code></pre> <ul> <li><code>--threads</code> is the number of cores: change this to an appropriate number</li> <li><code>--verbose</code> prints progress information to the screen</li> <li><code>canu_outdir/canu.contigs.fasta</code> is the file path to the input Canu assembly</li> <li><code>canu_outdir/canu.correctedReads.fasta.gz</code> is the file path to the corrected Pacbio reads - note, fastA not fastQ</li> <li><code>circlator_outdir</code> is the name of the output directory.</li> </ul> <p>Some output will print to screen. When finished, it should say \u201cCircularized x of x contig(s)\u201d.</p>"},{"location":"modules/cmdline_assembly/#check-the-output_1","title":"Check the output","text":"<p>Move into the circlator_outdir directory and <code>ls</code> to list files.</p> <p>Were the contigs circularised? :</p> <pre><code>less 04.merge.circularise.log\n</code></pre> <ul> <li>Yes, the contig was circularised (last column).</li> <li>Type \u201cq\u201d to exit.</li> </ul> <p>Where were the contigs oriented (which gene)? :</p> <pre><code>less 06.fixstart.log\n</code></pre> <ul> <li>Look in the \u201cgene_name\u201d column.</li> <li>The contig has been oriented at tr|A0A090N2A8|A0A090N2A8_STAAU, which is another name for dnaA.  This is typically used as the start of bacterial chromosome sequences.</li> </ul> <p>What are the trimmed contig sizes? :</p> <pre><code>infoseq 06.fixstart.fasta\n</code></pre> <ul> <li>tig00000001 2823331 (28564 bases trimmed)</li> </ul> <p>This trimmed part is the overlap.</p> <p>Re-name the contigs file:</p> <ul> <li>The trimmed contigs are in the file called 06.fixstart.fasta.</li> <li>Re-name it contig1.fasta:</li> </ul> <pre><code>mv 06.fixstart.fasta contig1.fasta\n</code></pre> <p>Open this file in a text editor (e.g. nano: <code>nano contig1.fasta</code>) and change the header to \u201c&gt;chromosome\u201d.</p> <p>Move the file back into the main folder (<code>mv contig1.fasta ../</code>).</p>"},{"location":"modules/cmdline_assembly/#options","title":"Options","text":"<p>If all the contigs have not circularised with Circlator, an option is to change the <code>--b2r_length_cutoff</code> setting to approximately 2X the average read depth.</p>"},{"location":"modules/cmdline_assembly/#questions_1","title":"Questions","text":"<p>Question</p> <p>Were all the contigs circularised? Why/why not?</p> Answer <p>Question</p> <p>Circlator can set the start of the sequence at a particular gene. Which gene does it use? Is this appropriate for all contigs?</p> Answer <p>Uses dnaA for the chromosomal contig. For other contigs, uses a centrally-located gene. However, ideally, plasmids would be oriented on a gene such as repA. It is possible to provide a file to Circlator to do this.</p>"},{"location":"modules/cmdline_assembly/#find-smaller-plasmids","title":"Find smaller plasmids","text":"<p>Pacbio reads are long, and may have been longer than small plasmids. We will look for any small plasmids using the Illumina reads.</p> <p>This section involves several steps:</p> <ol> <li>Use the Canu+Circlator output of a trimmed assembly contig.</li> <li>Map all the Illumina reads against this Pacbio-assembled contig.</li> <li>Extract any reads that didn\u2019t map and assemble them together: this could be a plasmid, or part of a plasmid.</li> <li>Look for overhang: if found, trim.</li> </ol>"},{"location":"modules/cmdline_assembly/#align-illumina-reads-to-the-pacbio-contig","title":"Align Illumina reads to the PacBio contig","text":"<ul> <li>Index the contigs file:</li> </ul> <pre><code>bwa index contig1.fasta\n</code></pre> <ul> <li>Align Illumina reads using using bwa mem:</li> </ul> <pre><code>bwa mem -t 8 contig1.fasta illumina_R1.fastq.gz illumina_R2.fastq.gz | samtools sort &gt; aln.bam\n</code></pre> <ul> <li><code>bwa mem</code> is the alignment tool</li> <li><code>-t 8</code> is the number of cores: choose an appropriate number</li> <li><code>contig1.fasta</code> is the input assembly file</li> <li><code>illumina_R1.fastq.gz illumina_R2.fastq.gz</code> are the Illumina reads</li> <li><code>| samtools sort</code> pipes the output to samtools to sort</li> <li><code>&gt; aln.bam</code> sends the alignment to the file aln.bam</li> </ul>"},{"location":"modules/cmdline_assembly/#extract-unmapped-illumina-reads","title":"Extract unmapped Illumina reads","text":"<ul> <li>Index the alignment file:</li> </ul> <pre><code>samtools index aln.bam\n</code></pre> <ul> <li>Extract the fastq files from the bam alignment - those reads that were unmapped to the Pacbio alignment - and save them in various \u201cunmapped\u201d files:</li> </ul> <pre><code>samtools fastq -f 4 -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq aln.bam\n</code></pre> <ul> <li><code>fastq</code> is a command that coverts a .bam file into fastq format</li> <li><code>-f 4</code> : only output unmapped reads</li> <li><code>-1</code> : put R1 reads into a file called unmapped.R1.fastq</li> <li><code>-2</code> : put R2 reads into a file called unmapped.R2.fastq</li> <li><code>-s</code> : put singleton reads into a file called unmapped.RS.fastq</li> <li><code>aln.bam</code> : input alignment file</li> </ul> <p>We now have three files of the unampped reads:  unmapped.R1.fastq,  unmapped.R2.fastq,  unmapped.RS.fastq.</p>"},{"location":"modules/cmdline_assembly/#assemble-the-unmapped-reads","title":"Assemble the unmapped reads","text":"<ul> <li>Assemble with Spades:</li> </ul> <pre><code>spades.py -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq --careful --cov-cutoff auto -o spades_assembly\n</code></pre> <ul> <li><code>-1</code> is input file forward</li> <li><code>-2</code> is input file reverse</li> <li><code>-s</code> is unpaired</li> <li><code>--careful</code> minimizes mismatches and short indels</li> <li><code>--cov-cutoff auto</code> computes the coverage threshold (rather than the default setting, \u201coff\u201d)</li> <li><code>-o</code> is the output directory</li> </ul> <p>Move into the output directory (spades_assembly) and look at the contigs:</p> <pre><code>infoseq contigs.fasta\n</code></pre> <ul> <li>78 contigs were assembled, with the max length of 2250 (the first contig).  </li> <li>All other nodes are &lt; 650kb so we will disregard as they are unlikely to be plasmids.</li> <li>Type \u201cq\u201d to exit.</li> <li>We will extract the first sequence (NODE_1):</li> </ul> <pre><code>samtools faidx contigs.fasta\n</code></pre> <pre><code>samtools faidx contigs.fasta NODE_1_length_2550_cov_496.613 &gt; contig2.fasta\n</code></pre> <ul> <li>This is now saved as contig2.fasta</li> <li>Open in nano and change header to \u201c&gt;plasmid\u201d.</li> </ul>"},{"location":"modules/cmdline_assembly/#trim-the-plasmid","title":"Trim the plasmid","text":"<p>To trim any overhang on this plasmid, we will blast the start of contig2 against itself.</p> <ul> <li>Take the start of the contig:</li> </ul> <pre><code>head -n 10 contig2.fasta &gt; contig2.fa.head\n</code></pre> <ul> <li>We want to see if it matches the end (overhang).</li> <li>Format the assembly file for blast:</li> </ul> <pre><code>makeblastdb -in contig2.fasta -dbtype nucl\n</code></pre> <ul> <li>Blast the start of the assembly (.head file) against all of the assembly:</li> </ul> <pre><code>blastn -query contig2.fa.head -db contig2.fasta -evalue 1e-3 -dust no -out contig2.bls\n</code></pre> <ul> <li>Look at contig2.bls to see hits:</li> </ul> <pre><code>less contig2.bls\n</code></pre> <ul> <li>The first hit is at start, as expected.</li> <li>The second hit is at 2474 all the way to the end - 2550.</li> <li>This is the overhang.</li> <li>Trim to position 2473.</li> <li>Index the plasmid.fa file:</li> </ul> <pre><code>samtools faidx contig2.fasta\n</code></pre> <ul> <li>Trim:</li> </ul> <pre><code>samtools faidx contig2.fasta plasmid:1-2473 &gt; plasmid.fa.trimmed\n</code></pre> <ul> <li> <p><code>plasmid</code> is the name of the contig, and we want the sequence from 1-2473.</p> </li> <li> <p>Open this file in nano (<code>nano plasmid.fa.trimmed</code>) and change the header to \u201c&gt;plasmid\u201d, save.</p> </li> <li>We now have a trimmed plasmid.</li> <li>Move file back into main folder:</li> </ul> <pre><code>cp plasmid.fa.trimmed ../\n</code></pre> <ul> <li>Move into the main folder.</li> </ul>"},{"location":"modules/cmdline_assembly/#plasmid-contig-orientation","title":"Plasmid contig orientation","text":"<p>The bacterial chromosome was oriented at the gene dnaA. Plasmids are often oriented at the replication gene, but this is highly variable and there is no established convention. Here we will orient the plasmid at a gene found by Prodigal, in Circlator:</p> <pre><code>circlator fixstart plasmid.fa.trimmed plasmid_fixstart\n</code></pre> <ul> <li><code>fixstart</code> is an option in Circlator just to orient a sequence.</li> <li><code>plasmid.fa.trimmed</code> is our small plasmid.</li> <li><code>plasmid_fixstart</code> is the prefix for the output files.</li> </ul> <p>View the output:</p> <pre><code>less plasmid_fixstart.log\n</code></pre> <ul> <li>The plasmid has been oriented at a gene predicted by Prodigal, and the break-point is at position 1200.</li> <li>Change the file name:</li> </ul> <pre><code>cp plasmid_fixstart.fasta contig2.fasta\n</code></pre>"},{"location":"modules/cmdline_assembly/#collect-contigs","title":"Collect contigs","text":"<pre><code>cat contig1.fasta contig2.fasta &gt; genome.fasta\n</code></pre> <ul> <li>See the contigs and sizes:</li> </ul> <pre><code>infoseq genome.fasta\n</code></pre> <ul> <li>chromosome: 2823331</li> <li>plasmid: 2473</li> </ul>"},{"location":"modules/cmdline_assembly/#questions_2","title":"Questions","text":"<p>Question</p> <p>Why is this section so complicated?</p> Answer <p>Finding small plasmids is difficult for many reasons! This paper has a nice summary: On the (im)possibility to reconstruct plasmids from whole genome short-read sequencing data. doi: https://doi.org/10.1101/086744</p> <p>Question</p> <p>Why can PacBio sequencing miss small plasmids?</p> Answer <p>Library prep size selection</p> <p>Question</p> <p>We extract unmapped Illumina reads and assemble these to find small plasmids. What could they be missing?</p> Answer <p>Repeats that have mapped to the PacBio assembly.</p> <p>Question</p> <p>How do you find a plasmid in a Bandage graph?</p> Answer <p>It is probably circular, matches the size of a known plasmid, and has a rep gene.</p> <p>Question</p> <p>Are there easier ways to find plasmids?</p> Answer <p>Possibly. One option is the program called Unicycler which may automate many of these steps. https://github.com/rrwick/Unicycler</p>"},{"location":"modules/cmdline_assembly/#correct","title":"Correct","text":"<p>We will correct the Pacbio assembly with Illumina reads.</p>"},{"location":"modules/cmdline_assembly/#make-an-alignment-file","title":"Make an alignment file","text":"<ul> <li>Align the Illumina reads (R1 and R2) to the draft PacBio assembly, e.g. genome.fasta:</li> </ul> <pre><code>bwa index genome.fasta\nbwa mem -t 32 genome.fasta illumina_R1.fastq.gz illumina_R2.fastq.gz | samtools sort &gt; aln.bam\n</code></pre> <ul> <li> <p><code>-t</code> is the number of cores: set this to an appropriate number. (To find out how many you have, <code>grep -c processor /proc/cpuinfo</code>).</p> </li> <li> <p>Index the files:</p> </li> </ul> <pre><code>samtools index aln.bam\nsamtools faidx genome.fasta\n</code></pre> <ul> <li>Now we have an alignment file to use in Pilon: aln.bam</li> </ul>"},{"location":"modules/cmdline_assembly/#run-pilon","title":"Run Pilon","text":"<ul> <li>Run:</li> </ul> <pre><code>pilon --genome genome.fasta --frags aln.bam --output pilon1 --fix all --mindepth 0.5 --changes --verbose --threads 32\n</code></pre> <ul> <li><code>--genome</code> is the name of the input assembly to be corrected</li> <li><code>--frags</code> is the alignment of the reads against the assembly</li> <li><code>--output</code> is the name of the output prefix</li> <li><code>--fix</code> is an option for types of corrections</li> <li><code>--mindepth</code> gives a minimum read depth to use</li> <li><code>--changes</code> produces an output file of the changes made</li> <li><code>--verbose</code> prints information to the screen during the run</li> <li><code>--threads</code> : set this to an appropriate number</li> </ul> <p>Look at the changes file:</p> <pre><code>less pilon1.changes\n</code></pre> <p>Example:</p> <p></p> <p>Look at the details of the fasta file:</p> <pre><code>infoseq pilon1.fasta\n</code></pre> <ul> <li>chromosome - 2823340 (net +9 bases)</li> <li>plasmid - 2473 (no change)</li> </ul> <p>Option:</p> <p>If there are many changes, run Pilon again, using the pilon1.fasta file as the input assembly, and the Illumina reads to correct.</p>"},{"location":"modules/cmdline_assembly/#genome-output","title":"Genome output","text":"<ul> <li>Change the file name:</li> </ul> <pre><code>cp pilon1.fasta assembly.fasta\n</code></pre> <ul> <li>We now have the corrected genome assembly of Staphylococcus aureus in .fasta format, containing a chromosome and a small plasmid.  </li> </ul>"},{"location":"modules/cmdline_assembly/#questions_3","title":"Questions","text":"<p>Q:</p> <p>Question</p> <p>Why don\u2019t we correct earlier in the assembly process?</p> Answer <p>We need to circularise the contigs and trim overhangs first.</p> <p>Question</p> <p>Why can we use some reads (Illumina) to correct other reads (PacBio) ?</p> Answer <p>Illumina reads have higher accuracy.</p> <p>Question</p> <p>Could we just use PacBio reads to assemble the genome?</p> Answer <p>Yes, if accuracy adequate.</p>"},{"location":"modules/cmdline_assembly/#advanced-analysis","title":"Advanced analysis","text":"<p>This example shows a more complex analysis where many more steps are involved in the finding the small plasmid. The sample used is Staphylococcus aureus (sample number 25745).</p>"},{"location":"modules/cmdline_assembly/#assemble_1","title":"Assemble","text":"<pre><code>canu -p canu -d canu_outdir genomeSize=2.8m -pacbio-raw pacbio.fastq.gz\n</code></pre> <ul> <li>Output: 2 contigs, likely to be the chromosome (2748030) and a large plasmid (49397).</li> </ul>"},{"location":"modules/cmdline_assembly/#trim-and-circularise_1","title":"Trim and circularise","text":"<pre><code>circlator all --threads 16 --verbose canu_outdir/canu.contigs.fasta canu_outdir/canu.correctedReads.fasta.gz circlator_outdir\n</code></pre> <ul> <li>Look at the information about circularisation, orientation, and trimmed sizes.</li> <li>Re-name the file contigs_1_2.fasta and move it into the main folder.</li> </ul>"},{"location":"modules/cmdline_assembly/#find-smaller-plasmids_1","title":"Find smaller plasmids","text":"<ul> <li>Align Illumina reads to the PacBio assembly:</li> </ul> <pre><code>bwa index contigs_1_2.fasta\nbwa mem -t 8 contigs_1_2.fasta illumina_R1.fastq.gz illumina_R2.fastq.gz | samtools sort &gt; aln.bam\n</code></pre> <pre><code>samtools index aln.bam\nsamtools fastq -f 4 -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq aln.bam\nspades.py -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq --careful --cov-cutoff auto -o spades_assembly\n</code></pre> <ul> <li>Look at the output:</li> </ul> <pre><code>cd spades_assembly\ninfoseq contigs.fasta\n</code></pre> <ul> <li>Extract the first node:</li> </ul> <pre><code>samtools faidx contigs.fasta\nsamtools faidx contigs.fasta NODE_1_length_2229_cov_610.298 &gt; contig3.fasta\n</code></pre> <ul> <li>Open in Nano and change header to \u201cplasmid\u201d.</li> <li>Look for overhang by blasting start of plamsid against itself:</li> </ul> <pre><code>head -n 10 contig3.fasta &gt; contig3.fa.head\nmakeblastdb -in contig3.fasta -dbtype nucl\nblastn -query contig3.fa.head -db contig3.fasta -evalue 1e-3 -dust no -out contig3.bls\nless contig3.bls\n</code></pre> <ul> <li>There is only one hit, to the start of the plasmid. No overhang is found.</li> <li>Search Genbank for any matching proteins: Copy the sequence</li> <li>Go to NCBI: https://blast.ncbi.nlm.nih.gov/Blast.cgi; choose blastx</li> <li>Paste the sequence from contig3.fasta</li> <li>Choose genetic code = 11</li> <li>Blast</li> <li>This hits a replication (plasmid) protein. Hypothesise that   this is a small plasmid; search for the entire sequence within the assembly of all the Illumina reads (next step).</li> <li>Copy contig3.fasta into the main folder.</li> <li>Assemble all the Illumina reads and produce an assembly graph.</li> </ul> <pre><code>spades.py -1 illumina_R1.fastq.gz -2 illumina_R2.fastq.gz --careful --cov-cutoff auto -o spades_assembly_all_illumina\n</code></pre> <ul> <li>Navigate to the output and find the assembly_graph.fastg.</li> <li>Transfer this file to your local computer (e.g. using the file transfer program Cyberduck).</li> <li>Examine the assembly in the program Bandage.<ul> <li>File: Load graph: assembly_graph.fastg</li> <li>In the left hand panel, click \u201cDraw graph\u201d</li> <li>Your assembly graph may look like this: </li> </ul> </li> <li> <p>Blast the small plasmid sequence in this assembly</p> <ul> <li>In the left hand panel: Blast: create/view BLAST search</li> <li>Build blast database</li> <li>Paste in the sequence of contig3.fasta</li> <li>Run Blast search</li> <li>There are two hits around a node (in this case, node 249).</li> </ul> </li> <li> <p>Go to the main Bandage window</p> <ul> <li>In the right hand panel, enter the node number.</li> <li>Click \u201cFind nodes\u201d</li> <li>This node is a circular contig in the graph, and is slightly longer (2329) than our contig3 (2229): this could be the plasmid.</li> <li>Extract this node in fasta format: In the top panel, go to Output: Save selected node sequences; save as contig3b.fasta</li> </ul> </li> <li> <p>Move this file back to the analysis folder.</p> </li> <li>Open this file in nano and change the header to \u201c&gt;contig3b\u201d, save.</li> <li>Take the start of the sequence and see if it matches the end:</li> </ul> <pre><code>head -n 10 contig3b.fasta &gt; contig3b.fa.head\nmakeblastdb -in contig3b.fasta -dbtype nucl\nblastn -query contig3b.fa.head -db contig3b.fasta -evalue 1e-3 -dust no -out contig3b.bls\nless contig3b.bls\n</code></pre> <ul> <li>The first hit is against the start of the chromosome, as expected.</li> <li>The last hit starts at position 2253; we will trim the plasmid to position 2252</li> <li>Index and trim the contig3b.fa file:</li> </ul> <pre><code>samtools faidx contig3b.fasta\nsamtools faidx contig3b.fasta contig3b:1-2252 &gt; contig3b.fa.trimmed\n</code></pre> <ul> <li>Open this file in nano and change the header to \u201c&gt;contig3b\u201d, save.</li> <li>We now have a trimmed contig3b.</li> <li>Join all contigs:</li> </ul> <pre><code>cat contigs_1_2.fasta contig3b.fa.trimmed &gt; genome.fasta\n</code></pre>"},{"location":"modules/cmdline_assembly/#correct_1","title":"Correct","text":"<pre><code>bwa index genome.fasta\nbwa mem -t 32 genome.fasta illumina_R1.fastq.gz illumina_R2.fastq.gz | samtools sort &gt; aln.bam\nsamtools index aln.bam\nsamtools faidx genome.fasta\n</code></pre> <pre><code>pilon --genome genome.fasta --frags aln.bam --output pilon1 --fix all --mindepth 0.5 --changes --verbose --threads 32\n</code></pre> <ul> <li>Look at the pilon1.changes file.</li> <li>Change the file name.</li> </ul> <pre><code>cp pilon1.fasta assembly.fasta\n</code></pre> <ul> <li>Look at the final assembly:</li> </ul> <pre><code>infoseq assembly.fasta\n</code></pre> <ul> <li> <p>Assembly details:</p> <ul> <li>Chromosome: 2725222</li> <li>Large plasmid: 25012</li> <li>Small plasmid: 2252</li> </ul> </li> </ul>"},{"location":"modules/cmdline_assembly/#next","title":"Next","text":"<p>Further analyses:</p> <ul> <li>Annotate with Prokka.</li> <li>Comparative genomics, e.g. with Roary.</li> </ul> <p>Links:</p> <ul> <li>Details of bas.h5 files</li> <li>Canu manual and gitub repository</li> <li>Circlator article and github repository</li> <li>Pilon article and github repository</li> <li>Notes on finishing and evaluating assemblies.</li> </ul>"},{"location":"modules/cmdline_assembly_v2/","title":"Long read assembly workshop","text":"<p>This is a tutorial for a workshop on long-read (PacBio) genome assembly. </p> <p>It demonstrates how to use long PacBio sequencing reads to assemble a bacterial genome, and includes additional steps for circularising, trimming, finding plasmids, and correcting the assembly with short-read Illumina data. </p>"},{"location":"modules/cmdline_assembly_v2/#overview","title":"Overview","text":"<p>Simplified version of workflow:</p> <p></p>"},{"location":"modules/cmdline_assembly_v2/#1-get-started","title":"1. Get started","text":"<p>Your workshop trainers will provide you with the address of a virtual machine. </p>"},{"location":"modules/cmdline_assembly_v2/#mac-users","title":"Mac users","text":"<p>Open the Terminal. </p> <ul> <li>Type in </li> </ul> <pre><code>ssh researcher@[your virtual machine address]\n</code></pre> <ul> <li>Type in the password provided. </li> </ul>"},{"location":"modules/cmdline_assembly_v2/#windows-users","title":"Windows users","text":"<p>If you are using Windows 10, you might be able to use the Ubuntu Subsystem. Otherwise, install and open Putty. </p> <ul> <li>Download putty here.</li> <li>Open. A configuration window will appear. </li> <li>Under \u201cHost Name (or IP address)\u201d enter in the address of your virtual machine. </li> <li>Under \u201cPort\u201d type in 22</li> <li>Under \u201cConnection Type\u201d select \u201cSSH\u201d</li> <li>Click \u201cOpen\u201d</li> <li>Under \u201cLogin as:\u201d enter \u201cresearcher\u201d</li> <li>Type in the password provided. </li> </ul>"},{"location":"modules/cmdline_assembly_v2/#create-a-new-working-directory-on-your-remote-computer","title":"Create a new working directory on your remote computer.","text":"<p>Because we are starting a new analysis it is always good practice to start in a new empty directory. Therefore, we will create a new directory and change to it for the rest of the workshop.</p> <p>In your terminal:</p> <ul> <li>Create a new directory called \u201cWorkshop\u201d</li> </ul> <pre><code>mkdir Workshop\n</code></pre> <ul> <li>Change to that directory</li> </ul> <pre><code>cd Workshop\n</code></pre> <p>NOTE: Everytime you open a new terminal or Putty session, you will need to make sure you are in this directory again.</p> <p>The current directory can be obtained with the linux command:</p> <pre><code>pwd\n</code></pre>"},{"location":"modules/cmdline_assembly_v2/#2-get-data","title":"2. Get data","text":"<p>The sample used in this tutorial is from a bacteria called Staphylococcus aureus. We have used a small section of its real genome so that the programs can run in the workshop time. </p> <p>The files we need are:</p> <ul> <li>pacbio.fq: the PacBio reads</li> <li>R1.fq: the Illumina forward reads</li> <li>R2.fq: the Illumina reverse reads</li> </ul> <p>In a new tab, go to https://doi.org/10.5281/zenodo.1009308. </p> <ul> <li>Next to the first file, right-click (or control-click) the \u201cDownload\u201d button, and select \u201cCopy link address\u201d.</li> <li>Back in your terminal, enter </li> </ul> <pre><code>wget [paste file link here]\n</code></pre> <ul> <li>The file should download. </li> <li>Note: paste the link to the file, not to the webpage.</li> <li>Repeat this for the other two files. </li> </ul>"},{"location":"modules/cmdline_assembly_v2/#3-assemble","title":"3. Assemble","text":"<p>We will use the assembly software called Canu, version 1.6.</p> <p>Run Canu with these commands:</p> <pre><code>canu -p canu -d canu_outdir genomeSize=0.03m -pacbio-raw pacbio.fq\n</code></pre> <ul> <li>the first <code>canu</code> tells the program to run</li> <li><code>-p canu</code> names prefix for output files (\u201ccanu\u201d)</li> <li><code>-d canu_outdir</code> names output directory (\u201ccanu_outdir\u201d)</li> <li><code>genomeSize</code> only has to be approximate. (In this case we are using a partial genome of expected size 30,000 base pairs). </li> <li>Canu will correct, trim and assemble the reads.</li> <li>Various output will be displayed on the screen.</li> <li>Note: Canu could say \u201cFinished\u201d but may still be running. In this case, type <code>squeue</code> to see if jobs are still running. </li> </ul> <p>If you run <code>squeue</code> you will see something like this:</p> <pre><code>             JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)\n                 6      main canu_can research PD       0:00      1 (Dependency)\n               5_1      main cormhap_ research  R       0:29      1 master\n</code></pre> <p>You will know if Canu has completely finished when <code>squeue</code> shows no jobs listed under the header row. </p>"},{"location":"modules/cmdline_assembly_v2/#4-check-assembly-output","title":"4. Check assembly output","text":"<p>Move into the canu output folder: </p> <pre><code>cd canu_outdir\n</code></pre> <p>View the list of files: </p> <pre><code>ls\n</code></pre> <ul> <li>The canu.contigs.fasta are the assembled sequences.</li> <li>The canu.unassembled.fasta are the reads that could not be assembled.</li> <li>The canu.correctedReads.fasta.gz are the corrected Pacbio reads that were used in the assembly.</li> <li>The canu.contigs.gfa is the graph of the assembly.</li> <li>The canu.report file is a summary of all of the steps Canu performed with information about the reads used, how they were handled and a whole lot of summary information about the assembly.</li> </ul> <p>Display summary information about the contigs: (<code>infoseq</code> is a tool from EMBOSS)</p> <pre><code>infoseq canu.contigs.fasta\n</code></pre> <ul> <li>This will show the contigs found by Canu. e.g.,  tig00000001  39136</li> <li>\u201ctig00000001\u201d is the name given to the contig</li> <li>\u201c39136\u201d is the number of base pairs in that contig.</li> </ul> <p>This matches what we were expecting for this sample (approximately 30,000 base pairs). For other data, Canu may not be able to join all the reads into one contig, so there may be several contigs in the output.</p> <p>We should also look at the canu.report. To do this:</p> <pre><code>less canu.report\n</code></pre> <ul> <li>\u201cless\u201d is a command to display the file on the screen.</li> <li>Use the up and down arrows to scroll up and down. </li> <li>You will see lots of histograms of read lengths before and after processing, final contig construction, etc. </li> <li>For a description of the outputs that Canu produces, see: http://canu.readthedocs.io/en/latest/tutorial.html#outputs</li> <li>Type <code>q</code> to exit viewing the report. </li> </ul>"},{"location":"modules/cmdline_assembly_v2/#questions","title":"Questions","text":"<p>Question</p> <p>How do long- and short-read assembly methods differ?</p> Answer <p>Short reads are usually assembled with De Bruijn graphs. For long reads, there is a move back towards simpler overlap-layout-consensus methods.</p> <p>Question</p> <p>Where can we find out the what the approximate genome size should be for the species being assembled?</p> Answer <p>Go to NCBI Genomes, enter species name, click on Genome Assembly and Annotation report, sort table by clicking on the column header Size (Mb), look at range of sizes in this column.</p> <p>Question</p> <p>In the assembly output, what are the unassembled reads? Why are they there?</p> Answer <p>Reads and low-coverage contigs that were not used in the assembly. </p> <p>Question</p> <p>What are the corrected reads? How did canu correct the reads?</p> Answer <p>Canu builds overlaps between reads. The consensus is used to correct the reads. </p> <p>Question</p> <p>Where could you view the output .gfa and what would it show?</p> Answer <p>A useful program is Bandage. If the assembly has multiple contigs, the assembly graph shows how these are connected. </p>"},{"location":"modules/cmdline_assembly_v2/#5-trim-and-circularise","title":"5. Trim and circularise","text":"<p>Bacteria have circular chromosomes. </p> <ul> <li>Because of sequencing errors, there may be some \u201coverhang\u201d in the assembled linear sequence. </li> <li>Our assembly may have some overhang because it is 9000 bases longer than expected. </li> </ul> <p> Adapted from Figure 1. Hunt et al. Genome Biology 2015</p> <p>A tool called Circlator identifies and trims overhangs (on chromosomes and plasmids). It takes in the assembled contigs from Canu, as well as the corrected reads prepared by Canu.</p> <p>Move back into your main analysis folder: </p> <pre><code>cd ..\n</code></pre>"},{"location":"modules/cmdline_assembly_v2/#run-circlator","title":"Run Circlator","text":"<pre><code>circlator all --threads 4 --verbose canu_outdir/canu.contigs.fasta canu_outdir/canu.correctedReads.fasta.gz circlator_outdir\n</code></pre> <ul> <li> <p>(Click on the dark grey slider bar above and move it to the right, to see all the way to the end of the line.)</p> </li> <li> <p><code>--threads</code> is the number of cores</p> </li> <li><code>--verbose</code> prints progress information to the screen</li> <li><code>canu_outdir/canu.contigs.fasta</code> is the file path to the input Canu assembly</li> <li><code>canu_outdir/canu.correctedReads.fasta.gz</code> is the file path to the corrected Pacbio reads - note, fastA not fastQ</li> <li><code>circlator_outdir</code> is the name of the output directory.</li> </ul> <p>Some output will print to screen. When finished, it should say \u201cCircularized x of x contig(s)\u201d.</p>"},{"location":"modules/cmdline_assembly_v2/#check-the-output","title":"Check the output","text":"<p>Move into the Circlator output directory: </p> <pre><code>cd circlator_outdir\n</code></pre> <p>List the files: </p> <pre><code>ls\n</code></pre> <p>Circlator has named the output files with numbers as prefixes. </p> <p>Were the contigs circularised?</p> <pre><code>less 04.merge.circularise.log\n</code></pre> <ul> <li>\u201cless\u201d is a command to display the file on the screen.</li> <li>04.merge.circularise.log is the name of the file. </li> <li>Yes, the contig was circularised (last column).</li> <li>Type <code>q</code> to exit.</li> </ul> <p>What are the trimmed contig sizes? </p> <pre><code>infoseq 06.fixstart.fasta\n</code></pre> <ul> <li>The contig \u201ctig00000001\u201d has a length of 30019.</li> <li>This is about 9000 bases shorter than before circularisation. This was the \u201coverhang\u201d and has now been trimmed. </li> </ul> <p>Copy the circularised contigs file to the main analysis directory with a new name:</p> <pre><code>cp 06.fixstart.fasta ../contig1.fasta\n</code></pre> <p>Move back into the main folder: </p> <pre><code>cd ..\n</code></pre>"},{"location":"modules/cmdline_assembly_v2/#questions_1","title":"Questions","text":"<p>Question</p> <p>Were all the contigs circularised? </p> Answer <p>In this example, yes, the contig was circularised. </p> <p>Question</p> <p>Circlator can set the start of the sequence at a particular gene. Which gene does it use? Is this appropriate for all contigs?</p> Answer <p>Circlator uses dnaA (if present) for the chromosomal contig. For other contigs, it uses a centrally-located gene. However, ideally, plasmids would be oriented on a gene such as repA. It is possible to provide a file to Circlator to do this.</p>"},{"location":"modules/cmdline_assembly_v2/#6-find-smaller-plasmids","title":"6. Find smaller plasmids","text":"<p>Pacbio reads are long, and may have been longer than small plasmids. We will look for any small plasmids using the Illumina reads.</p> <p>This section involves several steps:</p> <ol> <li>Use the Canu+Circlator output of a trimmed assembly contig.</li> <li>Map all the Illumina reads against this Pacbio-assembled contig.</li> <li>Extract any reads that didn\u2019t map and assemble them together: this could be a plasmid, or part of a plasmid.</li> <li>Look for overhang: if found, trim.</li> </ol>"},{"location":"modules/cmdline_assembly_v2/#align-illumina-reads-to-the-pacbio-contig","title":"Align Illumina reads to the PacBio contig","text":"<p>Index the contigs file:</p> <pre><code>bwa index contig1.fasta\n</code></pre> <p>Align Illumina reads using using bwa mem:</p> <pre><code>bwa mem -t 4 contig1.fasta R1.fq R2.fq | samtools sort &gt; aln.bam\n</code></pre> <ul> <li><code>bwa mem</code> is the alignment tool</li> <li><code>-t 4</code> is the number of cores</li> <li><code>contig1.fasta</code> is the input assembly file</li> <li><code>R1.fq R2.fq</code> are the Illumina reads</li> <li><code>| samtools sort</code> pipes the output to samtools to sort</li> <li><code>&gt; aln.bam</code> sends the alignment to the file aln.bam</li> </ul>"},{"location":"modules/cmdline_assembly_v2/#extract-unmapped-illumina-reads","title":"Extract unmapped Illumina reads","text":"<p>Index the alignment file:</p> <pre><code>samtools index aln.bam\n</code></pre> <p>Extract the fastq files from the bam alignment - those reads that were unmapped to the Pacbio alignment - and save them in various \u201cunmapped\u201d files:</p> <pre><code>samtools fastq -f 4 -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq aln.bam\n</code></pre> <ul> <li><code>fastq</code> is a command that coverts a .bam file into fastq format</li> <li><code>-f 4</code> : only output unmapped reads</li> <li><code>-1</code> : put R1 reads into a file called unmapped.R1.fastq</li> <li><code>-2</code> : put R2 reads into a file called unmapped.R2.fastq</li> <li><code>-s</code> : put singleton reads into a file called unmapped.RS.fastq</li> <li><code>aln.bam</code> : input alignment file</li> </ul> <p>We now have three files of the unampped reads:  unmapped.R1.fastq,  unmapped.R2.fastq,  unmapped.RS.fastq.</p>"},{"location":"modules/cmdline_assembly_v2/#assemble-the-unmapped-reads","title":"Assemble the unmapped reads","text":"<p>Assemble with Spades:</p> <pre><code>spades.py -1 unmapped.R1.fastq -2 unmapped.R2.fastq -s unmapped.RS.fastq --careful --cov-cutoff auto -o spades_assembly\n</code></pre> <ul> <li> <p>(Click on the dark grey slider bar above and move it to the right, to see all the way to the end of the line.)</p> </li> <li> <p><code>-1</code> is input file forward</p> </li> <li><code>-2</code> is input file reverse</li> <li><code>-s</code> is unpaired</li> <li><code>--careful</code> minimizes mismatches and short indels</li> <li><code>--cov-cutoff auto</code> computes the coverage threshold (rather than the default setting, \u201coff\u201d)</li> <li><code>-o</code> is the output directory</li> </ul> <p>Move into the output directory: </p> <pre><code>cd spades_assembly\n</code></pre> <p>Look at the contigs: </p> <pre><code>infoseq contigs.fasta\n</code></pre> <ul> <li>1 contig has been assembled with a length of 2359 bases. </li> </ul> <p>Copy it to a new file: </p> <pre><code>cp contigs.fasta contig2.fasta\n</code></pre>"},{"location":"modules/cmdline_assembly_v2/#trim-the-plasmid","title":"Trim the plasmid","text":"<p>To trim any overhang on this plasmid, we will blast the start of contig2 against itself.</p> <p>Take the start of the contig: </p> <pre><code>head -n 10 contig2.fasta &gt; contig2.fa.head\n</code></pre> <ul> <li><code>head -n 10</code> takes the first ten lines of contig2.fasta</li> <li> <p><code>&gt;</code> sends that output to a new file called contig2.fa.head</p> </li> <li> <p>We want to see if the start of the contig matches the end (overhang).</p> </li> </ul> <p>Format the assembly file for blast: </p> <pre><code>makeblastdb -in contig2.fasta -dbtype nucl\n</code></pre> <ul> <li><code>makeblastdb</code> makes a database for the tool Blast</li> <li>This will generate three new files in the directory with suffixes .nhr, .nin and .nsq</li> <li><code>-in</code> sets the input file as  contig2.fasta</li> <li><code>-dbtype nucl</code> sets the type to nucleotide (rather than protein)</li> </ul> <p>Blast the start of the assembly (.head file) against all of the assembly: </p> <pre><code>blastn -query contig2.fa.head -db contig2.fasta -evalue 1e-3 -dust no -out contig2.bls\n</code></pre> <ul> <li><code>blastn</code> is the tool Blast, set as blastn to compare sequences of nucleotides to each other</li> <li><code>-query</code> sets the input sequence as contig2.fa.head</li> <li><code>-db</code> sets the database as that of the original sequence contig2.fasta. We don\u2019t have to specify the other files that were created when we formatted this file, but they need to present in our current directory. </li> <li><code>-evalue</code> is the number of hits expected by chance, here set as 1e-3</li> <li><code>-dust no</code> turns off the masking of low-complexity regions</li> <li><code>-out</code> sets the output file as contig2.bls</li> </ul> <p>Look at the hits (the matches): </p> <pre><code>less contig2.bls\n</code></pre> <ul> <li>The first hit is at the start, as expected. We can see that \u201cQuery 1\u201d (the start of the contig) is aligned to \u201cSbject 1\u201d (the whole contig), for the first 540 bases.</li> <li>Scroll down with the down arrow. </li> <li>The second hit shows \u201cQuery 1\u201d (the start of the contig) also matches to \u201cSbject 1\u201d (the whole contig) at position 2253, all the way to the end, position 2359. </li> </ul> <p></p> <ul> <li>This is the overhang.</li> <li>Therefore, in the next step, we need to trim the contig to position 2252.</li> <li>Type <code>q</code> to exit. </li> </ul> <p>First, change the name of the contig within the file:</p> <pre><code>nano contig2.fasta\n</code></pre> <ul> <li><code>nano</code> opens up a text editor. </li> <li>Use the arrow keys to navigate. (The mouse won\u2019t work.)</li> <li>At the first line, delete the text, which will be something like \u201c&gt;NODE_1_length_2359_cov_3.320333\u201d</li> <li>Type in \u201c&gt;contig2\u201d </li> <li>Don\u2019t forget the <code>&gt;</code> symbol</li> <li>Press Control-X</li> <li>\u201cSave modified buffer ?\u201d - type <code>Y</code></li> <li>Press the Enter key</li> </ul> <p>Index the file (this will allow samtools to edit the file as it will have an index): </p> <pre><code>samtools faidx contig2.fasta\n</code></pre> <ul> <li><code>faidx</code> means index the fasta file</li> </ul> <p>Trim the contig:</p> <pre><code>samtools faidx contig2.fasta contig2:1-2252 &gt; plasmid.fasta\n</code></pre> <ul> <li>this extracts contig2 from position 1-2252</li> <li> <p><code>&gt; plasmid.fasta</code> sends the extracted section to a new file</p> </li> <li> <p>We now have a trimmed plasmid.</p> </li> </ul> <p>Copy the plasmid file into the main folder: </p> <pre><code>cp plasmid.fasta ../\n</code></pre> <p>Move file back into main folder: </p> <pre><code>cd ..\n</code></pre>"},{"location":"modules/cmdline_assembly_v2/#collect-contigs","title":"Collect contigs","text":"<p>Collect the chromosome and the plasmid in one fasta file (they will be 2 records in the file): </p> <pre><code>cat contig1.fasta plasmid.fasta &gt; genome.fasta\n</code></pre> <p>See the contigs and sizes:</p> <pre><code>infoseq genome.fasta\n</code></pre> <ul> <li>chromosome: 30019</li> <li>plasmid: 2252</li> </ul>"},{"location":"modules/cmdline_assembly_v2/#questions_2","title":"Questions","text":"<p>Question</p> <p>Why is this section so complicated?</p> Answer <p>Finding small plasmids is difficult for many reasons! This paper has a nice summary: On the (im)possibility to reconstruct plasmids from whole genome short-read sequencing data. doi: https://doi.org/10.1101/086744</p> <p>Question</p> <p>Why can PacBio sequencing miss small plasmids?</p> Answer <p>Library prep size selection.</p> <p>Question</p> <p>We extract unmapped Illumina reads and assemble these to find small plasmids. What could they be missing?</p> Answer <p>Repeats that have mapped to the PacBio assembly.</p> <p>Question</p> <p>How do you find a plasmid in a Bandage graph?</p> Answer <p>It is probably circular, matches the size of a known plasmid, and has a rep gene.</p> <p>Question</p> <p>Are there easier ways to find plasmids?</p> Answer <p>Possibly. One option is the program called Unicycler which may automate many of these steps. https://github.com/rrwick/Unicycler</p>"},{"location":"modules/cmdline_assembly_v2/#7-correct-the-assembly","title":"7. Correct the assembly","text":"<p>Sequences from PacBio can have more errors than those from Illumina. Therefore, although it is useful to use the long PacBio reads to assemble the genome, we can also use the shorter and more accurate Illumina reads to correct errors in the PacBio assembly. </p>"},{"location":"modules/cmdline_assembly_v2/#make-an-alignment-file","title":"Make an alignment file","text":"<p>Index the fasta file:</p> <pre><code>bwa index genome.fasta\n</code></pre> <p>Align the Illumina reads:</p> <pre><code>bwa mem -t 4 genome.fasta R1.fq R2.fq | samtools sort &gt; pilon_aln.bam\n</code></pre> <ul> <li>Aligns Illumina R1.fq and R2.fq to the PacBio assembly genome.fasta. </li> <li>This produces a .bam file</li> <li><code>|</code> pipes the output to samtools to sort (required for downstream processing)</li> <li><code>&gt; pilon_aln.bam</code> redirects the sorted bam to this file</li> </ul> <p>Index the files:</p> <pre><code>samtools index pilon_aln.bam\n</code></pre> <pre><code>samtools faidx genome.fasta\n</code></pre> <ul> <li>Now we have an alignment file to use  with the tool Pilon: pilon_aln.bam</li> </ul>"},{"location":"modules/cmdline_assembly_v2/#run-pilon","title":"Run Pilon","text":"<p>Run:</p> <pre><code>pilon --genome genome.fasta --frags pilon_aln.bam --output pilon1 --fix all --mindepth 0.5 --changes --verbose --threads 4\n</code></pre> <ul> <li><code>--genome</code> is the name of the input assembly to be corrected</li> <li><code>--frags</code> is the alignment of the reads against the assembly</li> <li><code>--output</code> is the name of the output prefix</li> <li><code>--fix</code> is an option for types of corrections</li> <li><code>--mindepth</code> gives a minimum read depth to use</li> <li><code>--changes</code> produces an output file of the changes made</li> <li><code>--verbose</code> prints information to the screen during the run</li> <li><code>--threads</code>: number of cores</li> </ul> <p>Look at the changes file: </p> <pre><code>less pilon1.changes\n</code></pre> <p>Example:</p> <p></p> <ul> <li>We can see lots of cases where a deletion (represented by a dot) has been corrected to a base.  </li> <li>Type <code>q</code> to exit. </li> </ul> <p>Look at the details of the fasta file: </p> <pre><code>infoseq pilon1.fasta\n</code></pre> <ul> <li>chromosome - 30060 (net +41 bases)</li> <li>plasmid - 2252 (no change)</li> </ul> <p>Change the file name: </p> <pre><code>cp pilon1.fasta assembly.fasta\n</code></pre> <p>We now have the corrected genome assembly of Staphylococcus aureus in .fasta format, containing a chromosome and a small plasmid.  </p>"},{"location":"modules/cmdline_assembly_v2/#questions_3","title":"Questions","text":"<p>Question</p> <p>Why don\u2019t we correct earlier in the assembly process?</p> Answer <p>We need to circularise the contigs and trim overhangs first.</p> <p>Question</p> <p>Why can we use some reads (Illumina) to correct other reads (PacBio) ?</p> Answer <p>Illumina reads have higher accuracy.</p> <p>Question</p> <p>Could we just use PacBio reads to assemble the genome?</p> Answer <p>Yes, if accuracy adequate.</p>"},{"location":"modules/cmdline_assembly_v2/#8-comparative-genomics","title":"8. Comparative Genomics","text":"<p>In the workshop so far, we used a partial bacterial genome so that the exercises could run in the time available. As a demonstration, to better see the effect of long and short reads on the assembly, we will examine complete bacterial genome. </p>"},{"location":"modules/cmdline_assembly_v2/#assemblies","title":"Assemblies","text":"<p>This bacterial genome has been assembled from either long PacBio reads (using Canu) or shorter Illumina reads (using Spades). </p> <p>Assembly graphs:</p> <p>Look at the assembly graph (usually has a suffix .gfa), in the program Bandage. This shows how contigs are related, albeit with ambiguity in some places.</p> <p>The assembly graph from Illumina reads (Spades assembly):</p> <p></p> <p>The assembly graph from PacBio reads (Canu assembly) - this is missing the small plasmid:</p> <p></p> <p>Here we can see that the long read data results in a more contiguous assembly - one complete chromosome versus many smaller contigs with ambiguous placement. </p> <p>Question</p> <p>Does it matter that an assembly is in many contigs?</p> Answer <p>Yes and No. Yes: broken genes can lead to missing/incorrect annotations; fragmented assemblies provide less information about the genomic structure (e.g. the number of plasmids) and the location of genes of interest (e.g. gene A is located on plasmid X). No: many or all genes may still be annotated correctly. Gene location is useful (e.g. chromosome, plasmid1) but not always essential (e.g. presence/absence of particular resistance genes may be enough information).</p>"},{"location":"modules/cmdline_assembly_v2/#annotations","title":"Annotations","text":"<p>Genomic features such as genes can be identified with annotation tools. We have used a tool called Prokka to annotate the two genomes described above. </p> <p>Some of the output data is displayed here:</p> <p> assembly: PacBio Illumina size 2,825,804 2,792,905 contigs 2 123 CDS 2614 2575 tRNA 61 65 rRNA 19 4 <p></p> <p>Question</p> <p>Why are there more CDS identified in the PacBio assembly? </p> Answer <p>The PacBio assembly may have errors (usually a one base indel) which will cause a frame shift, which can result in three things: a longer CDS, a shorter CDS, or a shorter CDS plus an additional CDS. In addition, the Illumina assembly is about 33 kb smaller than the PacBio assembly. In bacteria, a rule of thumb is that 1 kb is roughly equal to one gene. Thus, we would probably expect about 33 fewer identified genes, which fits with these results.  </p> <p>Question</p> <p>Why are there more rRNA identified in the PacBio assembly? </p> Answer <p>There may be multiple copies of the rRNAs and these could have been collapsed as repeats in the Illumina assembly. </p>"},{"location":"modules/cmdline_assembly_v2/#9-summary","title":"9. Summary","text":"<p>In this workshop, we used bacterial sequencing data from long and short reads to produce a polished genome. </p> <p>Procedure and tools: </p> <ul> <li>Canu to assemble long-read PacBio data</li> <li>Circlator to trim and circularise contigs</li> <li>BWA-MEM to map shorter Illumina reads to the PacBio assembly</li> <li>Spades to assemble any unmapped, leftover Illumina reads (the plasmid)</li> <li>Pilon to correct the PacBio assembly with the more accurate Illumina reads</li> </ul> <p>We also looked at comparative genomics:</p> <ul> <li>Bandage to examine assembly graphs</li> <li>Prokka to annotate genomes with features such as genes</li> </ul> <p>Further research:</p> <ul> <li>Align genomes with Mauve: tutorial link</li> <li>Find core and pan genomes with Roary and Phandango: tutorial link</li> </ul> <p>Melbourne Bioinformatics tutorials:</p> <ul> <li>https://www.melbournebioinformatics.org.au/tutorials/</li> </ul> <p>Additional microbial genomics tutorials:</p> <ul> <li>http://sepsis-omics.github.io/tutorials/</li> </ul>"},{"location":"modules/cmdline_prokka/","title":"Prokka - commandline","text":""},{"location":"modules/cmdline_prokka/#background","title":"Background","text":"<p>In this section we will use a software tool called Prokka to annotate a bacterial genome assembly.</p> <p>Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.</p> <p>Prokka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using Prodigal; second, the function of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found here.</p>"},{"location":"modules/cmdline_prokka/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>load a genome assembly into Prokka</li> <li>annotate the assembly using Prokka</li> <li>examine the annotated genome using Artemis</li> </ol>"},{"location":"modules/cmdline_prokka/#input-data","title":"Input data","text":"<p>Prokka requires assembled contigs.</p> <ul> <li>Download the assembled contigs from [tba]</li> </ul>"},{"location":"modules/cmdline_prokka/#open-the-gvl-command-line","title":"Open the GVL command line","text":"<ul> <li>go to GVL dashboard - go to SSH - find name of virtual machine</li> <li>on local machine, open terminal (or equivalent)</li> <li>ssh to your GVL</li> </ul> <pre><code>prokka --outdir mydir --prefix staph contigs.fa\n</code></pre> <p>note: add \u2013fast</p> <p>output: - 10 files</p> <p>prokka will save the output in \u201cmydir\u201d</p> <p>move there:</p> <pre><code>cd mydir\n</code></pre> <p>look at the text file:</p> <pre><code>cat file.txt   [check name]\n</code></pre> <p>look at [screenshot]</p> <p>look at the annotations in artemis:</p> <pre><code>art mydir/staph.gff\n</code></pre> <p>look at [screenshot]</p>"},{"location":"modules/data-dna/","title":"Training dataset","text":""},{"location":"modules/data-dna/#dataset","title":"Dataset","text":""},{"location":"modules/data-dna/#import-a-galaxy-history","title":"Import a Galaxy history","text":"<p>Copy this link:</p> <p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy_history_input_files.tar.gz</p> <ul> <li>Go to your Galaxy instance. Make sure you are registered and logged in. Refresh the page.</li> <li>Click on the History cog </li> <li>Select Import from File</li> </ul> <p></p> <ul> <li>In the box called Archived History URL, paste in the link address to the Galaxy history (that you copied above).</li> <li>Click Submit</li> <li>Wait a few seconds.</li> <li>Click on the view all histories button </li> <li>See if the Galaxy history has been imported: it will be called imported from archive: Data</li> <li>Above that pane, click on the Switch to button.</li> <li>Then click Done (in the top left corner).</li> <li>You should now have a list of five files in your current history. We will use these for the Genomics Workshop; or see below for additional files.</li> </ul> <p></p>"},{"location":"modules/data-dna/#additional-galaxy-histories","title":"Additional Galaxy histories","text":"<p>If you are using only part of the Genomics Workshop, you can upload any required histories listed here. Follow the instructions above.</p>"},{"location":"modules/data-dna/#galaxy-history-fastqc","title":"Galaxy history: FastQC","text":"<p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/FastQChistory.tar.gz</p>"},{"location":"modules/data-dna/#galaxy-history-spades","title":"Galaxy history: Spades","text":"<p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Spadeshistory.tar.gz</p>"},{"location":"modules/data-dna/#galaxy-history-prokka","title":"Galaxy history: Prokka","text":"<p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Prokkahistory.tar.gz</p>"},{"location":"modules/data-dna/#galaxy-history-snippy","title":"Galaxy history: Snippy","text":"<p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Snippyhistory.tar.gz</p>"},{"location":"modules/data-dna/#galaxy-history-workflows","title":"Galaxy history: Workflows","text":"<p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-Workflows-history.tar.gz</p>"},{"location":"modules/data-dna/#additional-files","title":"Additional files","text":"<p>If you need individual files, you can upload any of the files listed here. The instructions are listed below.</p>"},{"location":"modules/data-dna/#wildtype-reference","title":"Wildtype reference","text":"<ul> <li>wildtype.fna</li> </ul> <p> https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.fna</p> <ul> <li>wildtype.gbk</li> </ul> <p> https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.gbk</p> <ul> <li>wildtype.gff</li> </ul> <p> https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/wildtype.gff</p>"},{"location":"modules/data-dna/#mutant-illumina-sequence","title":"Mutant Illumina sequence","text":"<ul> <li>mutant_R1.fastq.gz</li> </ul> <p> https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/mutant_R1.fastq.gz</p> <ul> <li>mutant_R2.fastq.gz</li> </ul> <p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/mutant_R2.fastq.gz</p>"},{"location":"modules/data-dna/#assembled-contigs","title":"Assembled contigs","text":"<ul> <li>SPAdes_contigs.fasta</li> </ul> <p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/SPAdes_contigs.fasta</p>"},{"location":"modules/data-dna/#upload-to-galaxy","title":"Upload to Galaxy","text":"<p>There are two ways to upload these files to Galaxy. You can either download to your local computer and upload to Galaxy, or you can tell Galaxy to directly upload the file from an external source.</p> <p>Download and upload:</p> <ul> <li>Download required file(s) to your computer.</li> <li>From the Galaxy tool panel, click on Get Data \u2192 Upload File </li> <li>Click the Choose local file button  </li> <li>Find and select the file you downloaded and click Open </li> <li>Set the Type correctly.  </li> <li>Click the Start button.  </li> <li>Once the progress bar reaches 100%, click the Close button  </li> <li>The file will now upload to your current history.</li> </ul> <p>Or, tell Galaxy to find the file from an external source:</p> <ul> <li>From the Galaxy tool panel, click on Get Data \u2192 Upload File </li> <li>Click the Paste/Fetch data button  </li> <li>Paste the URL into the box.</li> <li>Click the Start button.  </li> <li>Once the progress bar reaches 100%, click the Close button  </li> <li>The file will now upload to your current history.</li> </ul>"},{"location":"modules/dge/","title":"Differential gene expression using Galaxy and Degust","text":""},{"location":"modules/dge/#differential-gene-expression","title":"Differential Gene Expression","text":"<p>Keywords: differential gene expression, DGE, RNA, RNA-Seq, transcriptomics, Degust, voom, limma, Galaxy, Microbial Genomics Virtual Laboratory.</p> <p>This tutorial is about differential gene expression in bacteria, using Galaxy tools and Degust (web).</p>"},{"location":"modules/dge/#background","title":"Background","text":"<p>Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.</p>"},{"location":"modules/dge/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>Align RNA-Seq data to a reference genome  </li> <li>Count transcripts for each sample</li> <li>Perform statistical analysis to obtain a list of differentially expressed genes</li> <li>Visualize and interpret the results</li> </ol>"},{"location":"modules/dge/#input-data-reads-and-reference","title":"Input data: reads and reference","text":"<p>RNA-Seq reads</p> <p>A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples.</p> <ul> <li>Our RNA-seq reads are from 6 samples in FASTQ format.<ul> <li>We have single-end reads; so one file per sample.</li> <li>Data could also be paired-end reads, and there would be two files per sample.</li> </ul> </li> <li>These have been reduced to 1% of their original size for this tutorial.</li> <li>The experiment used the bacteria E. coli grown in two conditions.<ul> <li>Files labelled \u201cLB\u201d are the wildtype</li> <li>Files labelled \u201cMG\u201d have been exposed to 0.5% \u03b1MG - alpha methyglucoside (a sugar solution).</li> </ul> </li> </ul> <p>Reference genome</p> <p>The reference genomes is in FASTA format and the gene annotations are in GTF format.</p> <ul> <li>The FASTA file contains the DNA sequence(s) that make up the genome; e.g. the chromosome and any plasmids.</li> <li>The GTF file lists the coordinates (position) of each feature. Commonly-annotated features are genes, transcripts and protein-coding sequences.</li> </ul> <p>Upload files to Galaxy</p> <ul> <li>Log in to your Galaxy server.</li> <li>In the History pane, click on the cogicon, and select Import from File (at the bottom of the list).</li> <li>Under Archived History URL paste: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-BacterialDGE.tar.gz</li> <li>In the History pane, click on the viewicon and find the uploaded history.<ul> <li>(This may take a minute. Refresh the page.)</li> </ul> </li> <li>Click Switch to that history, then Done.</li> <li>The files should now be ready to use in your current History pane.</li> </ul> <p></p>"},{"location":"modules/dge/#align-reads-to-reference","title":"Align reads to reference","text":"<p>The RNA-Seq reads are fragmented and are not complete transcripts. To determine the transcripts from which the reads originated (and therefore, to which gene they correspond) we can map them to a reference genome.</p> <p>In Galaxy:</p> <ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: Mapping \u2192 Map with BWA-MEM</li> <li>Under Will you select a reference genome from your history or use a built-in index?: Use a genome from history and build index</li> <li>Use the following dataset as the reference sequence: Ecoli_k12.fasta</li> <li>Single or Paired-end reads: single</li> <li>Select fastq dataset:<ul> <li>Click on the Multiple Datasets icon in centre</li> <li>Select all 6 FASTQ files (they turn blue; use side-scroll bar to check all have been selected)</li> <li>This will map each set of reads to the reference genome</li> </ul> </li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute</li> <li>Click Refresh in the history pane to see if the analysis has finished.</li> <li> <p>Output: 6 bam files of reads mapped to the reference genome.</p> </li> <li> <p>Re-name the output files:</p> <ul> <li>These are called Map with BWA-MEM on data x and data x.</li> <li>Click on the pencil icon next to each of these and re-name them as their sample name (e.g. LB1, LB2 etc.).</li> <li>Click Save.</li> </ul> </li> </ul>"},{"location":"modules/dge/#count-reads-per-gene","title":"Count reads per gene","text":"<p>We now need to count how many reads overlap with particular genes. The information about gene names is from the annotations in the GTF file.</p> <p>In Galaxy:</p> <ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: RNA Analysis \u2192 SAM/BAM to count matrix.<ul> <li>Note: Don\u2019t select the tool called htseq-count. The SAM/BAM to count matrix also uses that tool but allows an input of multiple bam files, which is what we want.</li> </ul> </li> <li>For Gene model (GFF) file to count reads over from your current history, select the GTF file.</li> <li>For Reads are stranded select Yes (box turns dark grey)</li> <li>For GTF feature type for counting reads\u2026 select transcript.</li> <li>For bam/sam file from your history choose the 6 bam files.</li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute</li> <li>Click Refresh in the history pane to see if the analysis has finished.</li> </ul> <p>Output:</p> <ul> <li>There is one output file: bams to DGE count matrix.</li> <li>Click on the file name to expand the information in the History pane.</li> <li>Click on the file icon underneath to download it to your computer for use later on in this tutorial.</li> <li>Click on the eye icon to see this file.</li> </ul> <p></p> <ul> <li>Each row is a gene (or feature) and each column is a sample, with counts against each gene.</li> <li>Have a look at how the counts vary between samples, per gene.</li> <li>We can\u2019t just compare the counts directly; they need to be normalized before comparison, and this will be done as part of the DGE analysis in the next step.</li> </ul>"},{"location":"modules/dge/#dge-in-degust","title":"DGE in Degust","text":"<p>Degust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression.</p> <p>(Degust can also display the results from DGE analyses performed elsewhere.)</p>"},{"location":"modules/dge/#upload-counts-file","title":"Upload counts file","text":"<p>Go to the Degust web page. Click Get Started.</p> <p></p> <ul> <li>Click on Choose File.</li> <li>Select the htseq output file. tabular (that you previously downloaded to your computer from Galaxy) and click Open.</li> <li>Click Upload.</li> </ul> <p>A Configuation page will appear.</p> <ul> <li>For Name type DGE in E coli</li> <li>For Info columns select Contig</li> <li>For Analyze server side leave box checked.</li> <li>For Min read count put 10.</li> <li>Click Add condition<ul> <li>Add a condition called \u201cControl\u201d and select the LB columns.</li> <li>Add a condition called \u201cTreament\u201d and select the MG columns.</li> </ul> </li> </ul> <p>Your Configuration page should look like this:</p> <p></p> <ul> <li>Save changes</li> <li>View - this brings up the Degust viewing window.</li> </ul>"},{"location":"modules/dge/#overview-of-degust-sections","title":"Overview of Degust sections","text":"<ul> <li>Top black panel with Configure settings at right.</li> <li>Left: Conditions: Control and Treatment.</li> <li>Left: Method selection for DGE.</li> <li>Top centre: Plots, with options at right.</li> <li>When either of the expression plots are selected, a heatmap appears below.</li> <li>A table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column).  </li> </ul>"},{"location":"modules/dge/#analyze-gene-expression","title":"Analyze gene expression","text":"<ul> <li>Under Method, make sure that Voom/Limma is selected.</li> <li>Click Apply. This runs Voom/Limma on the uploaded counts.</li> </ul>"},{"location":"modules/dge/#mds-plot","title":"MDS plot","text":"<p>First, look at the MDS plot.</p> <p></p> <ul> <li>This is a multidimensional scaling plot which represents the variation between samples.</li> <li>Ideally:<ul> <li>All the LB samples would be close to each other</li> <li>All the MG samples would be close to each other</li> <li>The LB and MG groups would be far apart</li> </ul> </li> <li>The x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis.</li> <li>Our LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct.</li> </ul>"},{"location":"modules/dge/#expression-ma-plot","title":"Expression - MA plot","text":"<p>Each dot shows the change in expression in one gene.</p> <ul> <li>The average expression (over both condition and treatment samples) is represented on the x-axis.<ul> <li>Plot points should be symmetrical around the x-axis.</li> <li>We can see that many genes are expressed at a low level, and some are highly expressed.</li> </ul> </li> <li>The fold change is represented on the y axis.<ul> <li>If expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR &lt;0.05).</li> <li>At low levels of gene expression (low values of the x axis), fold changes are less likely to be significant.</li> </ul> </li> </ul> <p>Click on the dot to see the gene name.     </p> <p></p>"},{"location":"modules/dge/#expression-parallel-coordinates-and-heatmap","title":"Expression - Parallel Coordinates and heatmap","text":"<p>Each line shows the change in expression in one gene, between control and treatment.</p> <ul> <li>Go to Options at the right.<ul> <li>For FDR cut-off set at 0.001.</li> <li>This is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences.</li> </ul> </li> <li> <p>Look at the Parallel Coordinates plot. There are two axes:</p> <ul> <li>Left: Control: Gene expression in the control samples. All values are set at zero.</li> <li>Right: Treatment Gene expression in the treatment samples, relative to expression in the control.</li> </ul> </li> <li> <p>The blocks of blue and red underneath the plot are called a heatmap.</p> <ul> <li>Each block is a gene. Click on a block to see its line in the plot above.</li> <li>Look at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue.</li> </ul> </li> </ul> <p></p> <p>Note:</p> <ul> <li>for an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series).</li> </ul>"},{"location":"modules/dge/#table-of-genes","title":"Table of genes","text":"<ul> <li>Contig: names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation).</li> <li>FDR: False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR.</li> <li>Control and Treatment: log2(Fold Change) of gene expression. The default display is of fold change in the treatment relative to the control. Therefore, values in the \u201cControl\u201d column are zero. This can be changed in the Options panel at the top right.</li> <li>In some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically.</li> </ul> <p>Table of genes and expression:</p> <p></p>"},{"location":"modules/dge/#dge-in-galaxy","title":"DGE in Galaxy","text":"<p>Differential gene expression can also be analyzed in Galaxy. The input is the count matrix produced by a tool such as HTSeq-Count (see section above: \u201cCount reads per gene\u201d).</p> <ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: RNA Analysis \u2192 Differential Count models<ul> <li>This has options to use edgeR, DESeq, or Voom. Here we will use Voom.</li> </ul> </li> <li>For Select an input matrix choose the count matrix file generated in the previous step.</li> <li>For Title for job outputs enter DGE using voom.</li> <li>For Select columns containing treatment tick boxes for the MG samples.</li> <li>For Select columns containing control tick boxes for the LB samples.</li> <li>Under Run this model using edgeR choose Do not run edgeR.</li> <li>Under Run the same model with DESeq2 and compare findings choose Do not run DESeq2.</li> <li>Under Run the same model with Voom/limma and compare findings choose Run VOOM.</li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute.</li> </ul> <p>There are two output files.</p> <p>View the file called DGEusingvoom.html.</p> <ul> <li>Scroll down to \u201cVOOM log output\u201d and \u201c#VOOM top 50\u201d.</li> <li>The \u201cContig\u201d column has the gene names.</li> <li>Look at the \u201cadj.P.Val\u201d column. This is an adjusted p value to show the significance of the gene expression difference, accounting for the effect of multiple testing. Also known as False Discovery Rate. The table is ordered by the values in this column.</li> <li>Look at the \u201clogFC\u201d column. This is log2(Fold Change) of relative gene expression between the treatment samples and the control samples.</li> </ul> <p>View the file called DEGusingvoom_topTable_VOOM.xls.</p> <ul> <li>This is a list of all the genes that had transcripts mapped, and associated statistics.</li> </ul>"},{"location":"modules/dge/#what-next","title":"What next?","text":"<p>To learn more about the differentially-expressed genes:</p> <ul> <li>Go to the NCBI website.</li> <li>Under All Databases, click on Gene</li> <li>Enter the gene name in the search bar; e.g. ptsG</li> <li>Click on the first result that matches the species (e.g. in this case, E. coli).<ul> <li>This provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource).</li> </ul> </li> </ul> <p>Some of the most (statistically) significant differentially-expressed genes in this experiment are:</p> <ul> <li>ptsG: a glucose-specific transporter.</li> <li>setA: a sugar efflux transporter; is induced by glucose-phosphate stress.</li> <li>sucD: the alpha subunit of the the gene for succinyl-CoA synthetase; involved in ATP production.</li> <li>sucB: a component of the 2-oxoglutarate dehydrogenase complex; catalyzes a step in the Krebs cycle.</li> <li>deoC: 2-deoxyribose-5-phosphate aldolase; binds selenium; may be involved in selenium transport.</li> </ul> <p>Next steps: Investigate the biochemical pathways involving the genes of interest.</p>"},{"location":"modules/dge/#more-information","title":"More information","text":"<ul> <li>Link to Degust.</li> <li>Link to Voom paper.</li> </ul>"},{"location":"modules/fastqc/","title":"Quality control","text":""},{"location":"modules/fastqc/#fastqc-in-galaxy","title":"FastQC in Galaxy","text":"<p>After sequencing, the reads should be checked for their quality. This tutorial demonstrates how to use the tool called FastQC to examine bacterial paired-end Illumina sequence reads. The FastQC website is here.</p>"},{"location":"modules/fastqc/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>run FastQC on input sequence reads, and</li> <li>examine the FastQC output.</li> </ol>"},{"location":"modules/fastqc/#input-files","title":"Input files","text":"<p>See here for information about how to start with Galaxy, and here for the link to import the \u201cGalaxy history of input files\u201d for this tutorial, if you don\u2019t already have them in your history.</p> <ul> <li>We will use the paired-end read set from our Galaxy history.</li> <li>These are the files mutant_R1.fastq and mutant_R2.fastq.</li> <li>FASTQ is a file format for sequence reads that displays quality scores for each of the sequenced nucleotides. For more information about FASTQ format see this link.</li> <li>We will evaluate the mutant_R1.fastq reads using the FastQC tool.</li> </ul>"},{"location":"modules/fastqc/#run-fastqc","title":"Run FastQC","text":"<ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: QC and Manipulation \u2192 FastQC</li> </ul> <ul> <li>for Short read data from your current history: mutant_R1.fastq</li> <li>Click Execute</li> <li>In the History pane, click on the \u201crefresh\u201d icon to see if the analysis has finished.</li> </ul>"},{"location":"modules/fastqc/#examine-output-files","title":"Examine output files","text":"<p>Once finished, examine the output called FastQC on data1:webpage (Hint: click the eye icon). It has a summary at the top of the page and a number of graphs.</p> <p>Look at:</p> <ul> <li> <p>Basic Statistics</p> <ul> <li>Sequence length: will be important in setting maximum k-mer size value for assembly.</li> <li>Encoding: The quality encoding type is important for quality trimming software.</li> <li>% GC: high GC organisms don\u2019t tend to assemble well and may have an uneven read coverage distribution.</li> <li>Total sequences: Total number of reads: gives you an idea of coverage.</li> </ul> </li> <li> <p>Per base sequence quality: Dips in quality near the beginning, middle or end of the reads: determines possible trimming/cleanup methods and parameters and may indicate technical problems with the sequencing process/machine run. In this case, all the reads are of relatively high quality across their length (150 bp).</p> </li> </ul> <p></p> <ul> <li> <p>Per base N content: Presence of large numbers of Ns in reads may point to a poor quality sequencing run. You would need to trim these reads to remove Ns.</p> </li> <li> <p>Kmer content: Presence of highly recurring k-mers: may point to contamination of reads with barcodes, adapter sequences etc. In this case, we have spikes in two types of kmers. </p> </li> </ul> <p></p> <p>We have warnings for two outputs (per base sequence content; Kmer content). This would warrant more investigation.</p> <p>General questions you might ask about your input reads include:</p> <ul> <li>How good is my read set?</li> <li>Do I need to ask for a new sequencing run?  </li> <li>Is it suitable for the analysis I need to do?</li> </ul> <p>For a fuller discussion of FastQC outputs and warnings, see the FastQC website link, including the section on each of the output reports, and examples of \u201cgood\u201d and \u201cbad\u201d Illumina data.</p>"},{"location":"modules/fastqc/#what-next","title":"What Next?","text":"<p>Assemble the reads into a draft genome sequence.</p>"},{"location":"modules/freebayes/","title":"Comparative Genomics","text":""},{"location":"modules/freebayes/#background","title":"Background","text":"<p>In this activity we will identify \u2018micro\u2019 differences between genome sequences using the BWA short read mapper and Freebayes variant caller. After investigating the \u2018micro\u2019 differences (SNPs/INDELS), we will attempt to detect larger \u2018macro\u2019 differences using Mauve.</p>"},{"location":"modules/freebayes/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>map sequence reads to a reference genome</li> <li>view the mapped reads</li> <li>identify variants using Freebayes, and</li> <li>identify larger structural variants using Mauve.</li> </ol>"},{"location":"modules/freebayes/#input-data","title":"Input data","text":"<p>The genome sequences being compared are those of the \u2018wildtype\u2019 and \u2018mutant\u2019 strains.</p> <p>The relevant files should already be available on Galaxy (from the previous \u201cAssembly with Spades\u201d tutorial).</p> <p>Just for a recap:</p> <p>We have a closed, annotated genome sequence for the wildtype strain. This file has two formats (one with the sequence, and one with the features).</p> <ul> <li>Files: wildtype.fna and wildtype.gff</li> </ul> <p>For the mutant strain we have whole genome shotgun short sequence reads from an Illumina DNA sequencing instrument.</p> <ul> <li> <p>Files: mutant_R1.fastq and mutant_R2.fastq (fastq format)</p> </li> <li> <p>The reads are paired-end</p> </li> <li>Each read is 150 bases  </li> <li>The reads coverage depth is estimated at 19x.</li> </ul>"},{"location":"modules/freebayes/#map-reads-to-reference","title":"Map reads to reference","text":""},{"location":"modules/freebayes/#map-the-reads-on-to-the-reference-sequence","title":"Map the reads on to the reference sequence","text":"<p>Several programs could be used for this but we will use BWA-MEM.</p> <ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: Mapping \u2192 Map with BWA-MEM.</li> <li>Set the following parameters:</li> <li>Will you select a reference genome from your history or use a built-in index?: Use a genome from history and build index</li> <li>Use the following dataset as the reference sequence: wildtype.fna</li> <li>Select first set of reads:mutant_R1.fastq</li> <li>Select second set of reads:mutant_R2.fastq</li> <li>Click Execute.</li> </ul>"},{"location":"modules/freebayes/#examine-the-mapped-reads","title":"Examine the mapped reads","text":"<p>To do this, we will look at the contents of the BAM file.</p> <p>Hint</p> <p>The BAM file is a Binary Compressed Datafile and cannot be viewed directly. If you attempt to view it using the \u201cview data\u201d button (the eye icon) it will be downloaded to your local computer. Instead, we must convert it to a non-compressed text format (SAM) first.</p> <ul> <li>Go to Tools \u2192 NGS Common Toolsets \u2192 NGS: SAM tools \u2192 BAM-to-SAM.</li> <li>BAM File to Convert: your BAM file</li> <li>Execute.</li> <li>View the resultant SAM file by clicking on the eye icon.</li> <li>Have a look at the fields in the file (the column headings).</li> <li>The demonstrator will now point out what all the fields are. (FIXME: or add some info here?)</li> </ul>"},{"location":"modules/freebayes/#view-the-bam-file-using-artemis","title":"View the BAM file using Artemis","text":"<p>In this section we will use Artemis to view the BAM file we produced above.</p>"},{"location":"modules/freebayes/#download-the-bam-file-to-your-local-computer","title":"Download the BAM file to your local computer.","text":"<ul> <li>Click on the name of the BAM file that you created in Section 1.  </li> <li>Click on the download button ; you need to download both the BAM file and the bam_index. (FIXME: why?)</li> </ul> <ul> <li>Also, download the annotated reference sequence; wildtype.gff.</li> </ul>"},{"location":"modules/freebayes/#start-artemis-and-load-the-wildtypegff","title":"Start Artemis and load the wildtype.gff","text":"<ul> <li>From the Artemis menu, Click File \u2192 Open \u2026 </li> <li>Load wildtype.gff.</li> </ul> <p>You should now have the wildtype\u2019s annotated sequence loaded into the Artemis genome browser.</p>"},{"location":"modules/freebayes/#load-the-bam-file-into-artemis","title":"Load the BAM file into Artemis","text":"<ul> <li>Click File \u2192 Read BAM/VCF </li> <li>Select: Galaxy \u2026 .bam </li> <li>Click Ok </li> </ul> <p>FIXME: but don\u2019t load index? bai file?</p> <p>You should see something like this:</p> <p></p> <p>Can you find a SNP?</p> <p>Demonstration of the ways that the view of the BAM file can be enhanced!</p> <p>Imagine finding each SNP manually - luckily this can be automated using a tool available on Galaxy.</p>"},{"location":"modules/freebayes/#variant-calling","title":"Variant Calling","text":"<p>We will now search through our alignment file (BAM) for statistically-valid SNPs using the Freebayes variant calling tool.</p>"},{"location":"modules/freebayes/#run-freebayes","title":"Run Freebayes","text":"<ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: Variant Analysis \u2192 FreeBayes</li> <li>Set the following parameters:</li> <li>Load reference genome from: History </li> <li>Sample BAM file: Map with BWA-MEM on data \u2026 BAM format</li> <li>Use the following dataset as the reference sequence: wildtype.fna </li> <li>Click Execute</li> </ul>"},{"location":"modules/freebayes/#examine-the-freebayes-output","title":"Examine the Freebayes output","text":"<ul> <li>Freebayes will create a VCF file. This stands for Variant Calling Format.</li> <li>Click on its View Data button (eye icon) and have a look at the file. There is a lot of header information; the variants appear lower down.</li> <li>Can you spot a SNP?</li> <li>What about an insertion? A deletion?</li> </ul>"},{"location":"modules/freebayes/#investigation-of-variants","title":"Investigation of Variants","text":"<p>What is the impact of the differences we have observed?</p> <p>In this section we will use some simple strategies to predict the impact of the variant on the function of the gene and perhaps even the strain itself.</p> <p>Artemis - the annotated draft genome sequence of the mutant strain - what is the impact the protein coding region? what is the predicted function?</p> <p>blastp - http://blast.ncbi.nlm.nih.gov/Blast.cgi the protein domain display - are any major protein domains truncated by the difference?</p> <p>LipoP/SignalP/TmHMM - http://www.cbs.dtu.dk/services/ membrane location prediction - has the change had an impact on the membrane location of the protein?</p> <p>Literature?</p> <p>Can you suggest a type of nucleotide sequence that might have no impact on the function of the encoded protein?</p> <p>In this section we will investigate a few variants together as a demonstration</p> <p>perhaps a few individually too??</p>"},{"location":"modules/freebayes/#detection-of-macro-indels-and-rearrangement-using-mauve","title":"Detection of \u2018macro\u2019 INDELS and rearrangement using Mauve","text":"<p>We will now examine our earlier assembly and compare it with the reference on a genome wide basis using Mauve.</p> <p>Download and install Mauve. More information on Mauve and its use can be found here.</p> <p>You will then need to load both the reference wildtype.gff file and the mutant.gff file that you downloaded earlier.</p> <p></p> <p>FIXME: add more</p>"},{"location":"modules/frogs/","title":"Metagenomics with FROGS","text":""},{"location":"modules/frogs/#metagenomics","title":"Metagenomics","text":"<p>Metagenomics aims to compare microbial communities from different environments by using information from the metagenome. Typically, 16S rRNA is used when classifying taxa, and whole-genome sequencing when aiming to identify gene functions and pathways.</p> <p>This tutorial covers the tool called FROGS (in Galaxy): \u201cFind Rapidly OTU with Galaxy Solution\u201d.</p>"},{"location":"modules/frogs/#get-data","title":"Get data","text":"<ul> <li> <p>The data: paired-end Illumina reads from two environmental samples. </p> </li> <li> <p>In Galaxy, in the history panel, click on the cog item, and select \u201cimport from file\u201d.</p> <ul> <li>In the \u201cArchived History URL:\u201d box paste:</li> <li> <p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy-History-16S_metagenomics_dataset.tar.gz</p> </li> <li> <p>You should now have four files in your Galaxy history.</p> </li> </ul> </li> </ul> <ul> <li>In the Galaxy tools panel, in the top search bar, type FROGS.<ul> <li>This will bring up the various tools available.</li> <li>We will be using 6 of these tools.</li> </ul> </li> </ul> <p></p>"},{"location":"modules/frogs/#1-pre-process","title":"1. Pre-process","text":"<p>This is the first step in the Frogs analysis. It takes in the forward and reverse sequencing reads (R1 and R2) from multiple samples (e.g. microbiome A and microbiome B) and performs the following steps:</p> <ul> <li>If the data is not in contigs, read1 and read2 will be overlapped (allowing some mismatch in overlapping region).</li> <li>Contigs that are too big or too small will be filtered out. </li> <li>If using the Illumina standard protocol: will look for those primers, filter out contigs without primers, and cut the primer sequences.</li> <li>Sequences that are too small or of poor quality will be filtered out.</li> <li>Sequences will be de-replicated: duplicates will be removed but the number of duplicates will be recorded.</li> </ul>"},{"location":"modules/frogs/#run","title":"Run","text":"<p>Go to FROGS Pre-process and select the following:</p> <ul> <li>Sequencer: Illumina</li> <li>Input type: Files by samples</li> <li>Reads alread contiged?: No</li> <li>Samples:<ul> <li>Name: microbiomeA &lt;note: no spaces&gt;</li> <li>Reads1: microbiomeA_R1.fq</li> <li>Reads2: microbiomeA_R2.fq</li> <li>Insert Samples- click plus sign</li> <li>Name: microbiomeB</li> <li>Reads1: microbiomeB_R1.fq</li> <li>Reads2: microbiomeB_R2.fq</li> </ul> </li> <li>Reads 1 size: 250</li> <li>Reads 2 size: 250</li> <li>Expected amplicon size: 420</li> <li>Minimum amplicon size: 380</li> <li>Maximum amplicon size: 460</li> <li>Sequencing protocol: Illumina standard</li> <li>5\u2019 primer: GGCGVACGGGTGAGTAA</li> <li>3\u2019 primer: GTGCCAGCNGCNGCGG &lt;note: needs to be in 5\u2019 to 3\u2019 orientation&gt;</li> <li>Execute</li> </ul> <p></p>"},{"location":"modules/frogs/#output","title":"Output","text":"<p>There are three output files. Click on the eye icon for each to see their contents.</p> <p>Report:</p> <ul> <li>The report.html shows how samples were filtered. For example, in the bar chart called \u201cFiltering summary\u201d, the number of reads kept at each filtering stage is displayed. We would expect some decrease in some of these categories, but if many reads have been filtered at a particular stage it could indicate poor quality data.</li> </ul> <p></p> <ul> <li>Below this chart, a table shows the statistics for each sample. Check the boxes next to \u201cmicrobiomeA\u201d and \u201cmicrobiomeB\u201d and then click Display amplicon lengths - shows amplicon distribution before filtering. Click Display preprocessed amplicon lengths - shows the distribution has been narrowed after filtering. Check if both samples are similar.</li> </ul> <p>Counts:</p> <ul> <li>The counts.tsv file is a list of sequences and their counts in the two samples.</li> </ul> <p>Fasta file:</p> <ul> <li>The dereplicated.fasta contains the sequences, without any duplicates.</li> </ul>"},{"location":"modules/frogs/#2-clustering-swarm","title":"2. Clustering swarm","text":"<p>In this step, sequences are clustered into groups using Swarm (more information about Swarm). This takes the pre-processed fasta and counts files and does the following:</p> <ul> <li>Sorts reads by abundance.</li> <li>Clusters the reads into pre-clusters using Swarm and distance parameter of 1.</li> <li>Sorts these pre-clusters by abundance.</li> <li>Cluster the pre-clusters using Swarm and a user-specified distance.</li> </ul> <p>Go to FROGS Clustering swarm and select the following:</p> <ul> <li>Sequences files: dereplicated.fasta</li> <li>Counts file: count.tsv</li> <li>Aggregation distance: 3</li> <li>Perform deionising clustering step?: Yes</li> <li>Execute</li> </ul> <p>Note: Galaxy may say that the job submission has failed. Click Close, then click refresh in the top of the history panel. The job should be running.</p> <p></p>"},{"location":"modules/frogs/#output_1","title":"Output","text":"<p>There are three output files.</p> <ul> <li>The abundance.biom shows the abundance of each cluster.</li> <li>The seed_sequences.fasta contains the the cluster (OTU) representative sequences. </li> <li>The swarms.composition.tsv shows what is in each cluster.</li> </ul>"},{"location":"modules/frogs/#3-remove-chimera","title":"3. Remove chimera","text":"<p>Closely-related sequences may form chimeras (mixed sequences) during PCR (libray prep). This step removes these sequences by the following method:</p> <ul> <li>Splits input data into samples</li> <li>Uses vsearch to find chimeras in each sample</li> <li>Removes chimeras</li> </ul> <p>Go to FROGS Remove chimera and select the following:</p> <ul> <li>Sequences file: seed_sequences.fasta</li> <li>Abundance type: BIOM file</li> <li>Abundance file: abundance.biom</li> <li>Execute</li> </ul> <p>Note: Galaxy may say that the job submission has failed. Click Close, then click refresh in the top of the history panel. The job should be running.</p> <p></p>"},{"location":"modules/frogs/#output_2","title":"Output","text":"<p>There are three output files.</p> <ul> <li>The non_chimera.fasta is a filtered file containing no chimeras.</li> <li>The non_chimera_abundance.biom is a filtered abundance file containing no chimeras.</li> <li>The summary report.html. In this case, although almost 70% of the clusters were removed, more than 70% of the actual reads were kept.</li> </ul> <p></p>"},{"location":"modules/frogs/#4-filters","title":"4. Filters","text":"<p>The OTUs (Operational Taxonomic Units) have now been clustered. In this step, we will filter out some of the OTUs that are either not in both samples, and/or contain at least 0.005% of all the sequences.</p> <p>Go to FROGS Filters and select the following:</p> <ul> <li>Sequences file: non_chimera.fasta</li> <li>Abundance file:  non_chimera_abundance.biom</li> <li>*** THE FILTERS ON OTUS IN SAMPLES, OTUS SIZE and SEQUENCE PERCENTAGE: Apply filters</li> <li>Minimum number of samples: 2</li> <li>Minimum proportion/number of sequences to keep OTU: 0.00005</li> <li>N biggest OTU: leave blank</li> <li>*** THE FILTERS ON RDP: No filters</li> <li>*** THE FILTERS ON BLAST: No filters</li> <li>*** THE FILTERS ON CONTAMINATIONS: No filters</li> <li>Execute</li> </ul> <p>]</p> <p>Note: Galaxy may say that the job submission has failed. Click Close, then click refresh in the top of the history panel. The job should be running.</p>"},{"location":"modules/frogs/#output_3","title":"Output","text":"<p>There are four output files.</p> <ul> <li>sequences.fasta: the retained sequences.</li> <li>abudance.biom: the abundance file.</li> <li>excluded.tsv: discarded OTUs</li> <li>report.html: this shows the proportion of OTUs and the proportion of sequences kept. In this example, although most OTUs have been filtered out, most sequences have been retained.</li> </ul> <p></p>"},{"location":"modules/frogs/#5-affiliation-otu","title":"5. Affiliation OTU","text":"<p>An OTU is a cluster of sequences. This step adds the taxonomy to the abundance file. It uses the SILVA database for rRNA.</p> <p>Go to FROGS Affiliation OTU and select:</p> <ul> <li>Using reference database: silva123</li> <li>Also perform RDP assignation: No</li> <li>OTU seed sequence: sequences.fasta from step 4</li> <li>Abundance file: abundance.biom from step 4</li> <li>Execute</li> </ul> <p></p> <p>Note: Galaxy may say that the job submission has failed. Click Close, then click refresh in the top of the history panel. The job should be running.</p>"},{"location":"modules/frogs/#output_4","title":"Output","text":"<p>There are two output files.</p> <ul> <li> <p>affiliation.biom: the abundance file with affiliation. Note: this .biom file is not human-readable. If you wish, you can convert it with the FROGS biom to tsv tool.</p> </li> <li> <p>report.html: the report shows the proportion of OTUs and sequences affiliated to sequences in the database. Here we can see that almost all OTUs and sequences have been taxonomically assigned, but almost 10% of OTUs could be assigned to multiple species. </p> </li> </ul> <p></p>"},{"location":"modules/frogs/#6-affiliations-stat","title":"6. Affiliations stat","text":"<p>This step computes some statistics from the analysis and generates a report of the OTUs/taxonomy found.</p> <p>Go to FROGS Affiliations stat and select:</p> <ul> <li>Abundance file: affiliation.biom from step 5</li> <li>Rarefaction ranks: Class Order Family Genus Species</li> <li>Affiliation processed: FROGS blast</li> <li>Execute</li> </ul> <p></p>"},{"location":"modules/frogs/#output_5","title":"Output","text":"<p>There is one output file. Click on the eye icon next to summary.html:</p> <ul> <li>click on Display global distribution: this shows the taxonomy of the sample. Start at the centre; major groups each have a segment by colour; as you go outwards, taxonomic identification becomes more specific.  Click on a segment to display a table of statisics below. Click on the cross in the top right corner to exit.</li> </ul> <p></p> <ul> <li>Next, we will look at the rarefaction curve, which is a measure of samples vs diversity.  Click on the boxes next to each of the samples (both, or one at a time) in the table (microbiomeA and microbiomeB). Click Display rarefaction.</li> </ul> <p></p>"},{"location":"modules/frogs/#links","title":"Links","text":"<ul> <li>FROGS slides by Yvan Le Bras https://f1000research.com/slides/5-1832</li> <li>The SILVA database: https://www.arb-silva.de/</li> <li>Other metagenomics software:<ul> <li>QIIME: http://qiime.org/ </li> <li>UPARSE: http://www.drive5.com/uparse/</li> <li>MOTHUR: https://www.mothur.org/</li> <li>MG-RAST: http://metagenomics.anl.gov/</li> </ul> </li> </ul>"},{"location":"modules/galaxy/","title":"Starting with Galaxy","text":""},{"location":"modules/galaxy/#starting-with-galaxy","title":"Starting with Galaxy","text":"<p>Keywords: Galaxy, Microbial Genomics Virtual Lab</p>"},{"location":"modules/galaxy/#background","title":"Background","text":"<p>Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets.</p> <p>Galaxy is an open, web-based platform. Details about the project can be found here.</p> <p>The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right.</p> <p></p>"},{"location":"modules/galaxy/#register","title":"Register","text":"<ul> <li>Use Firefox, Chrome or Safari as your browser (not Internet Explorer).</li> <li>Open a new tab. </li> <li>In the address bar, type in the address of your galaxy server.<ul> <li>e.g. http://galaxy-mel.genome.edu.au/galaxy or https://galaxy-qld.genome.edu.au/galaxy</li> </ul> </li> </ul> <p>Click on User button on the right.</p> <p></p> <ul> <li>Select: User \u2192 Register</li> <li>Enter your email, choose a password, and choose a user name.</li> <li> <p>Click Submit</p> </li> <li> <p>Login, and refresh the page.</p> </li> </ul>"},{"location":"modules/galaxy/#import-a-shared-history","title":"Import a shared history","text":"<p>For Galaxy-mel/Galaxy-qld users, import the following history: </p> <ul> <li>In Galaxy, go to the top menu bar</li> <li> <p>Click on Shared Data </p> </li> <li> <p>From the drop down menu, click on Histories</p> </li> </ul> <p></p> <ul> <li>From the list of Published Histories, click Genomics-workshop <p></p> <ul> <li>In the top right, click on Import history</li> </ul> <p></p> <ul> <li>This history will now be in your \u201cCurrent history\u201d - the right hand pane in Galaxy. </li> <li>There should be six files. (The number in front of the file name is not important.)</li> </ul> <p></p> <ul> <li>We will use these files for the Genomics Workshop. For additional ways to import histories, see below. </li> </ul>"},{"location":"modules/galaxy/#how-to-use-galaxy","title":"How to use Galaxy","text":"<ul> <li> <p>Available tools are in the left hand panel. Find the tool you want or use the search bar at the top of the tools. </p> </li> <li> <p>Click on the tool you want to use. </p> </li> <li> <p>The tool interface will appear in the centre Galaxy panel. Check the settings. </p> </li> <li> <p>Click Execute.</p> </li> <li> <p>When the tool has finished, output file(s) will appear at the top of your \u201cCurrent History\u201d in the right hand panel. </p> </li> <li> <p>Click on the eye icon next to a file to view it. </p> </li> <li> <p>To access older histories, use the button at the top right of the History panel. </p> </li> </ul>"},{"location":"modules/galaxy/#alternative-file-import-information","title":"Alternative file import information","text":"<p>Copy this link:</p> <p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy_history_input_files.tar.gz</p> <ul> <li>Click on the History cog </li> <li>Select Import from File</li> </ul> <p></p> <ul> <li>In the box called Archived History URL, paste in the link address to the Galaxy history (that you copied above).</li> <li>Click Submit</li> <li>Wait a few seconds.</li> <li>Click on the view all histories button </li> <li>See if the Galaxy history has been imported: it will be called imported from archive: Data</li> <li>Above that pane, click on the Switch to button.</li> <li>Then click Done (in the top left corner).</li> <li>You should now have a list of five files in your current history. We will use these for the Genomics Workshop; or see below for additional files.</li> </ul> <p></p>"},{"location":"modules/galaxy/#other-ways-to-import-data-into-galaxy","title":"Other ways to import data into Galaxy","text":"<ul> <li>Upload a file from your computer</li> <li>Import a shared history</li> <li>See the next section for more detailed information.</li> </ul>"},{"location":"modules/galaxy-long/","title":"Using Galaxy","text":""},{"location":"modules/galaxy-long/#background","title":"Background","text":"<p>Galaxy is a web-based analysis and workflow platform designed for biologists to analyse their own data. It can be used to run a variety of bioinformatics tools. The selection of bioinformatics tools installed on the Galaxy instance we are using today caters for the analysis of bacterial genomics data sets.</p> <p>Bioinformatics tools can be added from the Galaxy \u2018tool shed\u2019 or removed as necessary from your Galaxy instance.</p> <p>Galaxy is an open, web-based platform. Details about the project can be found here.</p> <p>The Galaxy interface is separated into three parts. The Tools list on the left, the Viewing panel in the middle and the analysis and data History on the right. We will be looking at all three parts in this tutorial.</p> <p></p> <p>This activity will familiarise you with the Galaxy interface. It will cover the following operations:</p> <ul> <li>Logging in to the server</li> <li>Putting data onto Galaxy</li> <li>Using some common tools</li> </ul>"},{"location":"modules/galaxy-long/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>Register and login to a Galaxy server.</li> <li>Upload data to a Galaxy server from:<ul> <li>A file on your local computer.</li> <li>A file on a remote datastore with an accessible URL.  </li> </ul> </li> <li>Use tools in Galaxy by:<ul> <li>Accessing the tool via the tool menu.</li> <li>Using the tool interface to run the particular tool.</li> <li>Viewing/accessing the tool output.</li> </ul> </li> </ol>"},{"location":"modules/galaxy-long/#login-to-galaxy","title":"Login to Galaxy","text":"<p>Open a new tab or window on your web browser. Use Firefox or Chrome - please don\u2019t use Internet Explorer or Safari.</p> <p>In the address bar, type in the address of your galaxy server. Alternatively, you can access galaxy via the dashboard of your mGVL.</p> <p></p> <p>Click on User button on the right and either register or login.</p> <p></p> <p>If you haven\u2019t yet registered yet:</p> <ul> <li>Select: User \u2192 Register</li> <li>Enter your email, choose a password, and choose a user name.</li> <li>Click Submit</li> </ul> <p>If you have already registered:</p> <ul> <li>Select: User \u2192 Login</li> <li>Enter your username &amp; password.</li> <li>Click Submit</li> </ul>"},{"location":"modules/galaxy-long/#put-data-onto-galaxy","title":"Put data onto Galaxy","text":"<p>There are two main ways to put your data onto Galaxy; this section will run through both ways. First, we need to make a new history.</p>"},{"location":"modules/galaxy-long/#make-a-new-history","title":"Make a new history","text":"<p>First, make a new folder to store the work we are about to perform.</p> <ul> <li>Click on the history options button  at the top of the History panel.</li> <li>Select Create New</li> <li>Click on Unnamed history to rename. Type in a new name.</li> </ul>"},{"location":"modules/galaxy-long/#datatypes","title":"Datatypes","text":"<p>What sort of file is being uploaded?</p> <p>We need to tell Galaxy what sort of file is being uploaded. Some common datatypes (file formats) are: text, FASTA, FASTQ, VCF, GFF, GBK, and tabular.</p>"},{"location":"modules/galaxy-long/#upload-a-file-from-your-own-computer","title":"Upload a file from your own computer","text":"<p>With this method you can get most of the files on your own computer into Galaxy.</p>"},{"location":"modules/galaxy-long/#first-download-the-following-file-to-your-computer","title":"First, download the following file to your computer:","text":"<ul> <li>Copy this URL and paste it into the address bar in your web browser: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/galaxy101/Contig_stats.txt.gz This is a file stored on the cloud. Press Enter, and the file will download. Note the download location.</li> </ul>"},{"location":"modules/galaxy-long/#next-upload-that-file-to-galaxy","title":"Next, upload that file to Galaxy","text":"<ul> <li>From the Galaxy tool panel, click on Get Data \u2192 Upload File </li> <li>Click the Choose local file button  </li> <li>Find and select the Contig_stats.txt.gz file you downloaded and click Open </li> <li>Set the Type to tabular </li> <li>Click the Start button  </li> <li>Once the progress bar reaches 100%, click the Close button  </li> <li>The file will now upload to your current history.</li> </ul>"},{"location":"modules/galaxy-long/#upload-a-file-from-a-url","title":"Upload a file from a URL","text":"<p>If a file exists on a web resource somewhere and you know its URL (Unique Resource Location - a web address) you can directly load it into Galaxy.</p> <ul> <li>From the tool panel, click on Get Data \u2192 Upload File</li> <li>Click on the Paste/Fetch Data button</li> <li>Copy and paste the following web address into the URL/Text box: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/COMP90014/Assignment1/bacterial_std_err_1.fastq.gz</li> <li>Set the Type to fastqsanger (CAREFUL: not fastqCsanger)</li> <li>Click Start</li> <li>Once the progress bar has reached 100%, click Close.</li> <li>Note that Galaxy is smart enough to recognize that this is a compressed file and so it will uncompress it as it loads it.</li> </ul>"},{"location":"modules/galaxy-long/#upload-another-file-from-a-url","title":"Upload another file from a URL","text":"<p>Now we are going to upload another file from the remote data source.</p> <ul> <li>Repeat the above for: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/MRSA0252.fna</li> <li>Note: this file Type is FASTA.</li> <li>The DNA sequence of Staphylococcus aureus MRSA252 will be loaded into your history as a FASTA file.</li> <li>Your History should now look like this:</li> </ul> <p></p>"},{"location":"modules/galaxy-long/#the-data","title":"The data","text":"<p>A brief description of each of the three files uploaded to Galaxy:  </p> <p>Contigs_stats.txt </p> <ul> <li>this file contains a table of summary data from a de novo genome assembly (the process of attempting to recover the full genome of an organism from the short read sequences produced by most DNA sequencing machines).</li> <li>The columns contain a lot of information but the ones we will be using indicate the amount of data (or coverage) that went into making up each piece of the final assembly.</li> </ul> <p>bacterial_std_err_1.fastq.gz </p> <ul> <li>This file contains sequence reads, in the format produced by Illumina sequencing machines. Read more about the FASTQ format at Wikipedia.</li> </ul> <p>MRSA0252.fna</p> <ul> <li>This file contains the genome sequence of Staphylococcus aureus MRSA252. Read more about the FASTA format at Wikipedia.</li> </ul>"},{"location":"modules/galaxy-long/#galaxy-tools","title":"Galaxy tools","text":"<p>The purpose of this section is to help you become familiar with the way tools are run on Galaxy.</p> <p>We will see how to:</p> <ul> <li>rename files</li> <li>summarize assembly statistics</li> <li>convert file formats, and</li> <li>find features in a DNA sequence.</li> </ul>"},{"location":"modules/galaxy-long/#rename-files","title":"Rename files","text":"<p>Two of the files in the History have very long and confusing names. File names can be changed by taking the following steps:</p> <ul> <li>Click on the edit icon  next to the file in the History called: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/COMP90014/Assignment1/bacterial_std_err_1.fastq</li> <li>In the Name text box, give it a new name. Rename it to: typical.fastq</li> <li>Click the Save button.</li> </ul> <p>Repeat the process with another file:</p> <ul> <li>Find the file called: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/MRSA0252.fna </li> <li>Rename it to MRSA252.fna</li> </ul> <p>Much better. There is other functionality hidden behind that edit icon </p> <p>You can change a file\u2019s datatype, convert its format and many other things. Feel free to play around with them at a later date.</p>"},{"location":"modules/galaxy-long/#summarize-assembly-statistics","title":"Summarize assembly statistics","text":"<p>We are going to produce a histogram of contig read-coverage depths and calculate the summary statistics from the Contig_stats.txt file.</p> <p>To do this we need to make some changes to the Contig_stats.txt file:</p> <ul> <li>cut out a couple of columns from the file</li> <li>remove a line from the file</li> <li>produce a histogram</li> </ul>"},{"location":"modules/galaxy-long/#cut-out-and-keep-two-columns","title":"Cut out and keep two columns","text":"<ul> <li>Click on the eye icon  of the Contig_stats.txt file to have a look at it.  </li> <li>Note that there are 18 columns in this file. We want column 1 and column 6.</li> <li>Go to Tools \u2192 Text Manipulation \u2192 Cut and set the following:</li> <li>Set Cut Columns to: c1,c6</li> <li>Delimited by: Tab</li> <li>From: Contig_stats.txt</li> <li>Click Execute</li> <li>Examine the new file by clicking on its eye icon . We now have 2 columns instead of the 18 in the original file.</li> </ul>"},{"location":"modules/galaxy-long/#remove-the-header-lines-of-the-new-file","title":"Remove the Header lines of the new file","text":"<ul> <li>Go to Tools \u2192 Text Manipulation \u2192 Remove beginning and set the following:</li> <li>Remove First: 1</li> <li>from: Cut on data1</li> <li>click Execute</li> <li>Note the the new file is the same as the previous one without the header line.</li> </ul>"},{"location":"modules/galaxy-long/#make-a-histogram","title":"Make a histogram","text":"<ul> <li>Go to Tools \u2192 Graph/Display Data \u2192 Histogram and set the following:</li> <li>Dataset: Remove beginning on Data 4</li> <li>Numerical column for X axis Column: 2</li> <li>Number of breaks: 25</li> <li>Plot title: Histogram of Contig Coverage</li> <li>Label for X axis: Coverage depth</li> <li>Click Execute</li> <li>Click on the eye icon  of the histogram to have a look at it. Note there are a few peaks. Maybe these correspond to single, double and triple copy number of these contigs.</li> </ul>"},{"location":"modules/galaxy-long/#calculate-summary-statistics-for-contig-coverage-depth","title":"Calculate summary statistics for contig coverage depth","text":"<ul> <li>Go to Tools \u2192 Statistics and Visualisation \u2192 Statistics \u2192 Summary Statisitics and set the following:  </li> <li>Summary statistics on: Remove beginning on Data 4</li> <li>Column or expression: c2</li> <li>Click Execute</li> <li>You\u2019ll note that the summary statistics tool failed (red background in the History). There was an error!</li> <li>If you click on the filename, and then the bug symbol , it will tell you what went wrong. (There is a missing python library).</li> <li>At this point, you would normally contact your Galaxy server administrator.</li> </ul>"},{"location":"modules/galaxy-long/#convert-file-formats","title":"Convert file formats","text":"<p>This shows how to convert a FASTQ file to a FASTA file. The tool creates a new file with the converted data.</p> <ul> <li>Go to Tools \u2192 Basic Tools \u2192 Convert Formats \u2192 FASTQ to FASTA and set the following:</li> <li>FASTQ file to convert: typical.fastq</li> <li>Click Execute</li> <li>The output is a new Fasta file called FASTQ to FASTA on data 2.</li> </ul>"},{"location":"modules/galaxy-long/#find-features","title":"Find features","text":"<p>This example shows how to use a tool called \u201cbarrnap\u201d to search for rRNAs in a DNA sequence.</p>"},{"location":"modules/galaxy-long/#find-all-of-the-ribosomal-rnas-in-a-sequence","title":"Find all of the ribosomal RNAs in a sequence","text":"<ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: Annotation \u2192 barrnap and set the following:</li> <li>Fasta file: MRSA252.fna</li> <li>Click Execute</li> <li>The output is barrnap on data 3 It is a gff3 format file (general feature format version 3). Each line in the file describes a feature in the DNA sequence.</li> </ul>"},{"location":"modules/galaxy-long/#filter-the-annotations-to-get-the-23s-rnas","title":"Filter the annotations to get the 23S RNAs","text":"<ul> <li>Make a file with only the 23S rRNA features</li> <li>Go to Tools \u2192 Basic Tools \u2192 Filter and Sort \u2192 Select and set the following:</li> <li>Select lines from: (whatever you called the barrnap gff3 output)</li> <li>the pattern: 23S (this will look for all the lines in the file that contain \u201c23S\u201d)</li> <li>Click Execute</li> <li>Now you have a gff3 file with just the 23S annotations!</li> </ul>"},{"location":"modules/galaxy-long/#what-next","title":"What next?","text":"<ul> <li> <p>Remember how we started a new History at the beginning? If you want to see any of your old histories, click on the History options button  at the top of the History panel and then select \u201cSaved Histories.\u201d This will give you a list of all the histories you have worked on in this Galaxy server.</p> </li> <li> <p>Upload a saved Galaxy history (a set of files) to use in these tutorials.</p> </li> </ul>"},{"location":"modules/gubbins/","title":"Gubbins","text":"<p>Gubbins takes a set of bacterial genomes, removes recombinant blocks, and infers a phylogeny.</p> <p>https://github.com/sanger-pathogens/gubbins</p> <p>In Galaxy:</p>"},{"location":"modules/gubbins/#input","title":"Input","text":"<p>An alignment of whole genome sequences of bacteria</p>"},{"location":"modules/gubbins/#run-gubbins","title":"Run Gubbins","text":"<p>run gubbins.</p> <p>change output file type of .txt tree file to .nhx</p> <p>under the file click Viz, phyloviz</p>"},{"location":"modules/jbrowse/","title":"JBrowse","text":""},{"location":"modules/jbrowse/#background","title":"Background","text":"<p>JBrowse is a genome browser available through the Galaxy interface or as a stand-alone tool.</p> <p>http://jbrowse.org/</p> <p>http://genome.cshlp.org/content/19/9/1630.full</p> <p>Today we will use JBrowse within Galaxy.</p> <p>A variety of file types can be viewed using JBrowse, including GFF3, BED, FASTA, BAM, VCF.</p> <p>structure: - top: a reference bar showing chromosome position - feature tracks based on genome annotations:    - particular annotations: e.g. tRNA, non coding RNA ?    - all annotations in a row?</p> <p>other things in jbrowse: - highlight with the highlight button - drop down arrow next to ref seq - can just show some aas, one strand etc - lots of options with bam drop down menu</p> <p>navigation: - dragging - use navigation buttons (left, right, zoom) - type in coordinates or feature name</p> <p>makefile: - transform datatypes</p> <ul> <li>go to Graph/Display Data \u2192 JBrowse</li> <li>choose the ref sequence? only allows the fasta file? will track options then appear?</li> <li>chose wildtype.fna but:    python: can\u2019t open file \u2018jbrowse.py\u2019: [Errno 2] No such file or directory</li> </ul>"},{"location":"modules/jbrowse/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial, you should be able to:</p> <ol> <li>download a bacterial genome sequence, and</li> <li>open the genome sequence in JBrowse</li> <li>and look at the sequence features.</li> </ol>"},{"location":"modules/jbrowse/#download-a-bacterial-genome","title":"Download a bacterial genome","text":"<p>We will download the sequence of Leptospira borgpetersenii serovar Hardjobovis Chromosome II from the NCBI website in GenBank format.  </p> <ul> <li>Go to http://www.ncbi.nlm.nih.gov</li> <li>Select the \u201cTaxonomy\u201d database from the list on the left hand side.</li> <li>Enter \u201cLeptospira borgpetersenii\u201d in the search box and click Search.</li> </ul> <p></p> <ul> <li>Click on the species name:</li> </ul> <p></p> <p> </p> <ul> <li>Click on the species name again (at the top of the list):</li> </ul> <p></p> <p> </p> <ul> <li>Next to Genome, click on the far right number 1.</li> </ul> <p></p> <p> </p> <ul> <li>Click on Genome Assembly and Annotation report:</li> </ul> <p> </p> <p></p> <p> </p> <ul> <li>Then, for the first species listed, scroll to the far right of the table, see chromosome 2, and click the link to the annotated assembly number NC_008509.1 (not CP0003):</li> </ul> <p></p> <p> </p> <ul> <li>Then, click Send</li> <li>choose Complete Record, Destination \u2192 File, Format \u2192 GenBank (full)</li> <li>click Create File.</li> <li>Note the download location (e.g. Downloads folder).</li> </ul> <p></p> <p> </p>"},{"location":"modules/jbrowse/#open-the-genbank-file-in-jbrowse","title":"Open the GenBank file in JBrowse","text":"<p>Overview:  </p> <ul> <li>6-frame annotation</li> <li>annotated genome features are highlighted</li> <li>black lines are stop codons</li> </ul> <p>DNA view:</p> <ul> <li>6-frame translation</li> <li>DNA sequence in the middle</li> <li>amino acid translations above and below</li> </ul> <p>Text summary:</p> <ul> <li>text summary of features</li> </ul> <p>Navigation:</p> <ul> <li>Go to the overview pane</li> <li>click on one annotated feature (highlighted in blue)</li> <li>it will be summarized on the top line (\u201cselected feature\u201d)</li> <li>the corresponding sequence will be highlighted in the DNA view pane</li> <li>the corresponding feature will be higlighted in the text summary pane</li> <li>now double click on the same annotated feature</li> <li>all three panes will be centred for this feature</li> <li>to move left or right, use the horizontal scroll bars under each pane</li> <li>to zoom, use the vertical scroll bars on the right</li> </ul>"},{"location":"modules/jbrowse/#what-next","title":"What next","text":"<ul> <li>Assemble a bacterial genome using Spades.</li> </ul>"},{"location":"modules/kallisto/","title":"Differential gene expression using Kallisto and Degust","text":""},{"location":"modules/kallisto/#dge-using-kallisto","title":"DGE using kallisto","text":"<p>This tutorial is about differential gene expression in bacteria, using tools on the command-line tools (kallisto) and the web (Degust).</p>"},{"location":"modules/kallisto/#background","title":"Background","text":"<p>Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or the same sample from two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.</p> <p>There are several ways to test for DGE. All involve these steps:</p> <ul> <li>map/align reads to transcripts</li> <li>count number of reads per transcript</li> <li>see if counts differ between conditions</li> </ul> <p>Some tools will combine two of these steps. For example, options include:</p> <ul> <li> <p>Map reads to reference genome with BWA-MEM, count reads per transcript with HTSeq-count, examine DGE using voom/limma (within Galaxy or Degust).</p> </li> <li> <p>Pseudo-align reads to a reference transcriptome and count, using kallisto, then examine DGE using voom/limma (within Galaxy or Degust).</p> </li> </ul>"},{"location":"modules/kallisto/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>(Pseudo-)align RNA-Seq data to a reference transcriptome and count: kallisto  </li> <li>Perform statistical analysis to obtain a list of differentially expressed genes: Degust</li> <li>Visualize and interpret the results</li> </ol>"},{"location":"modules/kallisto/#rna-seq-reads","title":"RNA-Seq reads","text":"<p>A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples.</p> <ul> <li>Our RNA-seq reads are from 6 samples in FASTQ format.<ul> <li>We have single-end reads; so one file per sample.</li> <li>Data could also be paired-end reads, and there would be two files per sample.</li> </ul> </li> <li>These have been reduced to 1% of their original size for this tutorial.</li> <li>The experiment used the bacteria E. coli grown in two conditions.<ul> <li>Files labelled \u201cLB\u201d are the wildtype</li> <li>Files labelled \u201cMG\u201d have been exposed to 0.5% \u03b1MG - alpha methyglucoside (a sugar solution).</li> </ul> </li> </ul> <p>The files are from Study PRJNA194149 from EBI ENA. We are using 3 FASTQ files from the control set (SRR794833-835) and 3 FASTQ files from the experimental condition set (SRR794848-850).</p>"},{"location":"modules/kallisto/#get-data","title":"Get data","text":"<p>Login to your GVL. e.g.:</p> <pre><code>ssh your_username@gvl.genome.edu.au\n&lt;enter your password&gt;\n</code></pre> <p>Get the files:</p> <pre><code>wget https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Ecoli_kallisto_files.tar.gz\n</code></pre> <p>Uncompress and extract the files:</p> <pre><code>tar -zxvf Ecoli_kallisto_files.tar.gz\n</code></pre> <p>Move into the new directory:</p> <pre><code>cd Ecoli_kallisto_files\n</code></pre> <p>You should have the following files:</p> <ul> <li>6 x RNA-seq reads in fastq.gz</li> <li>1 x reference transcriptome in .fasta</li> <li>1 x table of features in .tsv</li> </ul> <p>The reference transcriptome and features table have been produced from a genbank file, using a custom python script.</p> <p>We need to count the number of RNA-seq reads (that exist as fragments) that match different transcripts in the genome, including those for protein-coding sequences (such as genes) and RNA sequences (such as tRNA and mRNA). Therefore, we need a subset of the whole genome - the reference transcriptome.  </p>"},{"location":"modules/kallisto/#generate-counts","title":"Generate counts","text":"<p>Kallisto will count the reads per transcript.</p>"},{"location":"modules/kallisto/#index-the-transcripts-file","title":"Index the transcripts file","text":"<pre><code>kallisto index -i transcripts.idx Ecoli_transcripts.fasta\n</code></pre> <ul> <li>transcripts.idx: the name of the output index file</li> <li>transcripts.ffn: the name of the input fasta file file</li> </ul>"},{"location":"modules/kallisto/#run-kallisto-for-every-read-set","title":"Run kallisto for every read set","text":"<p>First, run kallisto for the LB1.fastq.gz reads:</p> <pre><code>kallisto quant -i transcripts.idx -o LB1 --single -l 500 -s 50 LB1.fastq.gz\n</code></pre> <ul> <li>-o LB1: LB1 will be name of the output folder produced from this analysis</li> <li>\u2013single : single-end reads</li> <li>-l : estimated length of library fragments </li> <li>-s : estimated standard deviation of library fragments</li> <li>LB1.fastq.gz : input FASTQ file</li> </ul> <p>Repeat for every FASTQ file (LB2, LB3, MG1, MG2, MG3).</p> <ul> <li>Run as above, but change the name of the output folder, and the file name at the end.</li> <li>We then need to combine all the counts into one table.</li> </ul>"},{"location":"modules/kallisto/#extract-required-columns","title":"Extract required columns","text":"<p>Each output folder includes an abundance.tsv file. For each of these files, extract the column of counts (column 4) and remove the table heading.</p> <pre><code>cut -f4 -d$'\\t' abundance.tsv | tail -n +2 &gt; LB1_headless.tsv\n</code></pre> <p>This cuts column 4, then removes the header, and saves as LB1_headless.tsv.</p> <p>Then add column heading \u201cLB1\u201d and saves as LB1.tsv:</p> <pre><code>echo -e \"LB1\" | cat - LB1_headless.tsv &gt; LB1.tsv\n</code></pre> <p>Move LB1.tsv into the main analysis folder.</p> <p>Repeat with all the other abundance.tsv files from the kallisto analyses, giving the tables the correct LBx or MGx header.</p>"},{"location":"modules/kallisto/#paste-together-with-features-table","title":"Paste together with features table","text":"<pre><code>paste LB1.tsv LB2.tsv LB3.tsv MG1.tsv MG2.tsv MG3.tsv Ecoli_features.tsv &gt; counts.tsv\n</code></pre> <p>Examine the file:</p> <pre><code>less counts.tsv\n</code></pre> <p>There should be a column for every set of RNA-Seq reads, and then several columns of information including feature, name and description.</p> <p>Download the counts.tsv file to your local computer.</p>"},{"location":"modules/kallisto/#test-for-dge","title":"Test for DGE","text":"<p>Degust is a tool on the web that can analyse the counts files produced in the step above, to test for differential gene expression.</p> <p>(Degust can also display the results from DGE analyses performed elsewhere.)</p>"},{"location":"modules/kallisto/#upload-counts-file","title":"Upload counts file","text":"<p>Go to the Degust web page. Click Get Started.</p> <p></p> <ul> <li>Click on Choose File.</li> <li>Select the counts.tsv and click Open.</li> <li>Click Upload.</li> </ul> <p>A Configuation page will appear.</p> <ul> <li>For Name type DGE in E coli</li> <li>For Info columns select name </li> <li>For EC Number column select EC</li> <li>For Analyze server side leave box checked.</li> <li>For Min read count put 10</li> <li>Click Add condition<ul> <li>Under  Replicates, select LB1, LB2, LB3.</li> </ul> </li> <li>Click Add condition again<ul> <li>Under  Replicates, select MG1, MG2, MG3.</li> </ul> </li> <li>Save changes </li> <li>View - this brings up the Degust viewing window.</li> </ul>"},{"location":"modules/kallisto/#overview-of-degust-sections","title":"Overview of Degust sections","text":"<ul> <li>Top black panel with Configure settings at right.</li> <li>Left: Conditions: LB (control) and MG (treatment).</li> <li>Left: Method selection for DGE.</li> <li>Top centre: Plots, with options at right.</li> <li>When either of the expression plots are selected, a heatmap appears below.</li> <li>A table of genes (or features); expression in treatment relative to control (Treatment column); and significance (FDR column).  </li> </ul>"},{"location":"modules/kallisto/#analyze-gene-expression","title":"Analyze gene expression","text":"<ul> <li>Under Method, make sure that Voom/Limma is selected.</li> <li>Click Apply. This runs Voom/Limma on the uploaded counts.</li> </ul>"},{"location":"modules/kallisto/#mds-plot","title":"MDS plot","text":"<p>First, look at the MDS plot.</p> <p></p> <ul> <li>This is a multidimensional scaling plot which represents the variation between samples.</li> <li>Ideally:<ul> <li>All the LB samples would be close to each other</li> <li>All the MG samples would be close to each other</li> <li>The LB and MG groups would be far apart</li> </ul> </li> <li>The x-axis is the dimension with the highest magnitude. The control/treatment samples should be split along this axis.</li> <li>Our LB samples are on the left and the MG samples are on the right, which means they are well separated on their major MDS dimension, which looks correct.</li> </ul>"},{"location":"modules/kallisto/#expression-ma-plot","title":"Expression - MA plot","text":"<p>Each dot shows the change in expression in one gene.</p> <ul> <li>The average expression (over both condition and treatment samples) is represented on the x-axis.<ul> <li>Plot points should be symmetrical around the x-axis.</li> <li>We can see that many genes are expressed at a low level, and some are highly expressed.</li> </ul> </li> <li>The fold change is represented on the y axis.<ul> <li>If expression is significantly different between treatment and control, the dots are red. If not, they are blue. (In Degust, significant means FDR &lt;0.05).</li> <li>At low levels of gene expression (low values of the x axis), fold changes are less likely to be significant.</li> </ul> </li> </ul> <p>Click on the dot to see the gene name.     </p> <p></p>"},{"location":"modules/kallisto/#expression-parallel-coordinates-and-heatmap","title":"Expression - Parallel Coordinates and heatmap","text":"<p>Each line shows the change in expression in one gene, between control and treatment.</p> <ul> <li>Go to Options at the right.<ul> <li>For FDR cut-off set at 0.001.</li> <li>This is a significance level (an adjusted p value). We will set it quite low in this example, to ensure we only examine key differences.</li> </ul> </li> <li> <p>Look at the Parallel Coordinates plot. There are two axes:</p> <ul> <li>Left: LB: Gene expression in the control samples. All values are set at zero.</li> <li>Right: MG Gene expression in the treatment samples, relative to expression in the control.</li> </ul> </li> <li> <p>The blocks of blue and red underneath the plot are called a heatmap.</p> <ul> <li>Each block is a gene. Click on a block to see its line in the plot above.</li> <li>Look at the row for the Treatment. Relative to the control, genes expressed more are red; genes expressed less are blue.</li> </ul> </li> </ul> <p></p> <p>Note:</p> <ul> <li>for an experiment with multiple treatments, the various treatment axes can be dragged to rearrange. There is no natural order (such as a time series).</li> </ul>"},{"location":"modules/kallisto/#table-of-genes","title":"Table of genes","text":"<ul> <li>name: names of genes. Note that gene names are sometimes specific to a species, or they may be only named as a locus ID (a chromosomal location specified in the genome annotation).</li> <li>FDR: False Discovery Rate. This is an adjusted p value to show the significance of the difference in gene expression between two conditions. Click on column headings to sort. By default, this table is sorted by FDR.</li> <li>LB and MG: log2(Fold Change) of gene expression. The default display is of fold change in the treatment (MG) relative to the control (LB). Therefore, values in the \u201cLB\u201d column are zero. This can be changed in the Options panel at the top right.</li> <li>In some cases, a large fold change will be meaningful but in others, even a small fold change can be important biologically.</li> </ul>"},{"location":"modules/kallisto/#kegg-pathway","title":"Kegg Pathway","text":"<p>A pathway is a drawn network to show the interaction between molecules, including some or all of genes, proteins, RNAs, chemical reactions.</p> <ul> <li>Click on Kegg Pathway, and select \u201cGlycolysis\u201d.</li> </ul> <p></p> <ul> <li>Genes in this pathway will be highlighted as you hover over them elsewhere in Degust (e.g., in the table).</li> </ul>"},{"location":"modules/kallisto/#what-next","title":"What next?","text":"<p>To learn more about the differentially-expressed genes:</p> <ul> <li>Go to the NCBI website.</li> <li>Under All Databases, click on Gene</li> <li>Enter the gene name in the search bar; e.g. ptsG</li> <li>Click on the first result that matches the species (e.g. in this case, E. coli).<ul> <li>This provides information about the gene, and may also show further references (e.g. in this case, a link to the EcoGene resource).</li> </ul> </li> </ul> <p>Next steps: Investigate the biochemical pathways involving the genes of interest.</p>"},{"location":"modules/kallisto/#links","title":"Links","text":"<ul> <li> <p>Kallisto paper</p> </li> <li> <p>Kallisto + sleuth paper. Sleuth can test for differential gene expression.</p> </li> <li> <p>Link to Voom paper</p> </li> </ul>"},{"location":"modules/kraken/","title":"Sample identification with Kraken","text":"<p>To identify a sample from sequencing reads, we can use the tool \u201cKraken\u201d. This tool can also be used to identify members in a mixed set of reads, for metagenomics.</p> <ul> <li> <p>e.g. reads from one sample \u2192 Kraken \u2192 95% Staphylococcus aureus.</p> </li> <li> <p>e.g. mixed reads \u2192 Kraken \u2192 50% Staphylococcus aureus, 40%  Campylobacter concisus, 10% unclassified.</p> </li> </ul> <p>In this tutorial we will use Kraken to confirm the identify of reads from a bacterial isolate.</p>"},{"location":"modules/kraken/#get-data","title":"Get data","text":"<p>In Galaxy, go to Shared Data in the top panel, and click on the history named Kraken data. In the top right, click Switch to this history.</p> <p>Your current history should now contain four files. If you are using the tutorial independently of a workshop, at this stage you can upload your FASTQ files into the current history.</p> <p></p>"},{"location":"modules/kraken/#run-kraken","title":"Run Kraken","text":"<p>We have a sample that should be Staphylococcus aureus. The paired-end FASTQ read files are:</p> <ul> <li>staph_R1.fq and staph_R2.fq.</li> </ul> <p>(We will look at the other set of files later on in the tutorial).</p> <ul> <li> <p>Go to Tools \u2192 NGS Analysis \u2192 Metagenomic analyses \u2192 Kraken, assign taxonomic labels to sequencing reads</p> </li> <li> <p>Set the following parameters:</p> <ul> <li>Single or paired reads: Paired</li> <li>Forward strand: staph_R1.fq</li> <li>Reverse strand: staph_R2.fq</li> <li>leave other settings as they are</li> </ul> </li> <li> <p>Your tool interface should look like this:</p> </li> </ul> <p></p> <ul> <li>Click Execute</li> </ul>"},{"location":"modules/kraken/#examine-the-output","title":"Examine the output","text":"<p>The output is a file called Kraken on data x and x: Classification. This will be at the top of your history pane.</p> <p>Click Refresh if the file hasn\u2019t yet turned green.</p> <p></p> <p>When the file is green, click on the eye icon to view.</p> <ul> <li>We will turn this output into something easier to read in the next step.</li> <li>Column 2 is the sequence ID.</li> <li>Column 3 is the taxon ID (from NCBI).</li> <li>Column 5 is a summary of all the taxon IDs that each k-mer in the sequence matched to (taxon ID:number of k-mers).  </li> </ul> <p></p>"},{"location":"modules/kraken/#kraken-report","title":"Kraken report","text":"<p>Go to Tools \u2192 NGS Analysis \u2192 Metagenomic analyses \u2192 Kraken-report</p> <ul> <li> <p>Set the following parameters:</p> <ul> <li>Kraken output: Kraken on data x and x: Classification</li> <li>Select a Kraken database: krakendb</li> <li>Click Execute</li> </ul> </li> </ul> <p>The output file is called Kraken-report on data x.</p> <ul> <li>Click on the eye icon to view.</li> <li>Column 1: percentage of reads in the clade/taxon in Column 6</li> <li>Column 2: number of reads in the clade.</li> <li>Column 3: number of reads in the clade but not further classified.</li> <li>Column 4: code indicating the rank of the classification: (U)nclassified, (D)omain, (K)ingdom, (P)hylum, (C)lass, (O)rder, (F)amily, (G)enus, (S)pecies).</li> <li>Column 5: NCBI taxonomy ID.</li> </ul> <p></p> <p>Approximately 95% of reads were classified as Staphylococcus aureus, confirming the correct identity of our bacterial sample.</p> <ul> <li>Of these reads, roughly half were uniquely present in S. aureus subsp. aureus, and most of those were uniquely present in strain HO 5096 0412.</li> <li>The sample strain is therefore most related to the HO 5096 0412 strain.</li> </ul> <p>The remaining reads within the S. aureus clade were classified into various taxa.</p> <ul> <li>Scroll down column 3 to see the number of reads assigned directly to the taxon in column 6.</li> <li>These are all very low and can be disregarded.</li> </ul>"},{"location":"modules/kraken/#next","title":"Next","text":"<p>Re-run Kraken with another sample. This sample should be Enterococcus faecalis.</p> <ul> <li>Use the files ent_R1.fq and ent_R2.fq.</li> <li>Run Kraken with these files. These are paired-end reads.</li> <li>With the Classification file from Kraken, run Kraken-report.</li> <li>Cick on the eye icon to view the Kraken-report file.</li> </ul> <p></p> <ul> <li> <p>63% are classified to the genus Enterococcus, and most of these to E. faecalis.</p> </li> <li> <p>However, if we scroll down the table of results, we see that 31% are classified to the genus Mycobacterium, mostly M. abscessus. These are not in the same phylum as Enterococcus.</p> </li> </ul> <p></p> <ul> <li>This sample is probably contaminated.</li> </ul>"},{"location":"modules/kraken/#links","title":"Links","text":"<p>Kraken paper</p> <p>Kraken software</p>"},{"location":"modules/mauve/","title":"Mauve","text":"<p>Mauve is a program to align multiple genomes.</p> <p>Documentation: http://darlinglab.org/mauve/mauve.html</p> <p>What it does:</p> <ul> <li>aligns genomes and identifies homologous blocks</li> <li>these are likely from a common ancestor or gained via horizontal transfer</li> <li>blocks may have moved or been inverted in the genome</li> </ul>"},{"location":"modules/mauve/#mauve-align-three-strains","title":"Mauve - align three strains","text":"<p>We will align three genomes of Streptococcus pneumoniae.</p> <p>Open Mauve.</p> <ul> <li>Go to File: Align with Progressive Mauve</li> </ul> <p></p> <ul> <li> <p>Add Sequence</p> </li> <li> <p>select the sequence(s). Use .fasta or .gbk files.</p> </li> <li> <p>if using a reference sequence, add that first.</p> </li> <li> <p>Align</p> </li> </ul> <p></p> <ul> <li> <p>Specify a name for the alignment.  </p> </li> <li> <p>Save</p> </li> </ul> <p>A console window will open and show the progress of the run.</p> <p></p> <p>When finished, the alignment will open:</p> <p></p> <ul> <li>Each row is a genome. Each coloured block is genetically similar.</li> <li>If you are using annotated genomes, zoom in (with the magnifying glass) to see annotations. </li> </ul> <p>For a different view, go to View: Style: Solid LCB colouring</p> <p></p> <ul> <li>Click on a block to align all genomes around that block.</li> <li>The blue block is inverted in genome 3 (i.e., the reverse complement).</li> </ul>"},{"location":"modules/mauve/#mauve-align-two-assemblies-from-the-same-sample","title":"Mauve - align two assemblies from the same sample","text":"<p>In this example, we will align two genomes from the same sample that have been assembled with different tools.</p> <ul> <li>Genome 1: Assembled from long reads; corrected with short reads.</li> <li>Genome 2: Assembled from short reads.</li> </ul> <p>Align the genomes:</p> <ul> <li>Go to File: Align with Progressive Mauve</li> <li>Add sequences. Add the long-read assembly sequence first.</li> <li>Align</li> <li>Name</li> <li>Save</li> </ul> <p>View the alignment:</p> <p></p> <p>Genome 2 has many contigs as it has been assembled using short reads.</p> <ul> <li>These have been laid out in the order in which they appear in the file.</li> <li>We need to re-arrange these contigs to align with the reference genome (Genome 1).</li> </ul> <p>Re-order the contigs in Genome 2:</p> <ul> <li>Go to Tools: Move Contigs</li> <li>Specify output folder</li> <li>Add sequences (add the long-read assembly first)</li> <li>Start</li> </ul> <p>The Mauve Console window will show the progress.</p> <p>The re-ordered contigs will then be displayed:</p> <p></p> <p>Most of the contigs in Genome 2 can be aligned to one (red) section of Genome 1.</p>"},{"location":"modules/nanopore/","title":"Nanopore data - bacterial genome assembly","text":"<p>Base calling the reads, then canu, then Polish, or use racon</p>"},{"location":"modules/nanopore/#get-data","title":"Get data","text":"<p>MinION data =&gt; Metrichor server =&gt; calls bases =&gt; fast5 files</p> <ul> <li>check the output from Metrichor</li> <li>we could assume we have fastq files, but we need original (fast5?) files to use in Nanopolish</li> </ul> <p>Enterobacter kobei</p> <ul> <li>from DOI: 10.1099/mgen.0.000085</li> <li>ERR1341575 (MinION pass reads) - fastq</li> </ul> <p>Alternative data: E coli K-12 MG1655 from Loman http://www.nature.com.ezp.lib.unimelb.edu.au/nmeth/journal/v12/n8/full/nmeth.3444.html</p>"},{"location":"modules/nanopore/#assess-data-poretools","title":"Assess data: poretools","text":"<p>https://poretools.readthedocs.io/en/latest/</p>"},{"location":"modules/nanopore/#convert-fast5-to-fastq","title":"Convert fast5 to fastq","text":"<pre><code>poretools fastq fast5/\n</code></pre> <p>(is fast5 a dir?)</p>"},{"location":"modules/nanopore/#plot-histogram-of-read-sizes","title":"plot histogram of read sizes","text":"<pre><code>poretools hist fast5/\n</code></pre> <ul> <li>how to viz?</li> </ul>"},{"location":"modules/nanopore/#assemble","title":"Assemble","text":"<ul> <li>canu</li> </ul> <pre><code>canu -p Ekobei -d Ekobei -genomeSize =?m -nanopore-raw fastq\n</code></pre> <p>=&gt; 14 contigs, max 1.5m need fewer contigs.</p>"},{"location":"modules/nanopore/#polish","title":"Polish","text":"<ul> <li>nanopolish</li> <li> </li> </ul> <p>http://simpsonlab.github.io/2015/03/30/optimizing-hmm/</p> <p>https://github.com/jts/nanopolish</p> <ul> <li>this can polish the assembly</li> </ul>"},{"location":"modules/nanopore/#uses-info-from-raw-signal-data-before-they-have-been-called-as-bases","title":"uses info from raw signal data (before they have been called as bases)","text":""},{"location":"modules/nanopore/#evaluate","title":"Evaluate","text":""},{"location":"modules/pacbio/","title":"PacBio assembly with SMRT portal","text":""},{"location":"modules/pacbio/#assembly-with-pacbio-data-and-smrt-portal","title":"Assembly with PacBio data and SMRT Portal","text":"<p>Keywords: de novo assembly, PacBio, PacificBiosciences, HGAP, SMRT Portal, Microbial Genomics Virtual Laboratory</p> <p>This tutorial will show you how to assemble a bacterial genome de novo, using the PacBio SMRT Portal on the mGVL. We will use an analysis pipeline called HGAP, the Hierarchical Genome Assembly Process.</p>"},{"location":"modules/pacbio/#start","title":"Start","text":"<ul> <li>Open your mGVL dashboard.</li> <li>You should see SMRT Portal as one of the instance services on your GVL dashboard.</li> <li>Open up the SMRT portal web link (to the right) and register/log on.</li> </ul>"},{"location":"modules/pacbio/#input","title":"Input","text":"<p>We will use a dataset from a Streptococcus pyogenes bacteria.</p> <p>If this has already been loaded onto SMRT portal (e.g. for use during a workshop), proceed to the next step (\u201cAssembly\u201d).</p> <p>Otherwise:</p> <ul> <li>Load the PacBio data (your own, or the training dataset) onto your GVL.</li> <li>In the SMRT Portal, go to Design Job, the top left tab.</li> <li>Go to Import and Manage. </li> <li>Click Import SMRT cells. </li> <li> <p>Work out where you put the data on your GVL, and make sure the file path is showing.</p> <ul> <li>If not, click Add and enter the file path to the data.</li> <li>A SMRT cell is the collection of data from a particular cell in the machine. It includes .bax.h5 files.</li> </ul> </li> <li> <p>Click on the file path and then Scan to check for new data.</p> </li> </ul>"},{"location":"modules/pacbio/#assembly","title":"Assembly","text":""},{"location":"modules/pacbio/#hgap-process-overview","title":"HGAP process overview","text":"<p>We will use the Hierarchical Genome Assembly Process (HGAP). This flowchart shows the steps in the process:</p> <p></p>"},{"location":"modules/pacbio/#set-up-job","title":"Set up job","text":"<ul> <li>In the SMRT Portal, go to the top left tab, Design Job.</li> <li>Go to Create New.</li> <li>An Analysis window should appear. Tick all the boxes, then Next.</li> <li>Under Job Name enter a name.</li> <li>To the right, under Groups choose all.</li> <li>Under Protocols choose RS_HGAP_Assembly.3.</li> <li>There is an ellipsis underneath Protocols - click on the ellipsis.</li> </ul> <p>This brings up the settings. Click on Assembly.</p> <ul> <li>For Compute Minimum Seed Read Length: ensure box is ticked</li> </ul> <ul> <li>For Number of Seed Read Chunks: enter 12</li> <li>Change the Genome Size to an approximately correct size for the species. For S. pyogenes, enter 1800000.</li> <li>For Target Coverage: enter 10</li> <li>For Overlapper Error Rate: enter 0.04</li> <li>Leave all other settings as they are.</li> <li>Click Apply</li> </ul> <p>Your protocol window should look like this:</p> <p></p> <ul> <li> <p>Click Ok.  </p> </li> <li> <p>In the SMRT Cells Available window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window.</p> </li> <li>You can drag the column widths of the \u201cUrl\u201d column so that you can see the URLs of the file paths better.</li> </ul> <p></p> <ul> <li>Click Save (bottom right hand side).</li> <li>Next to Save, click Start.</li> <li>The Monitor Jobs window should open.<ul> <li>As each step proceeds, new items will appear under the Reports and Data tabs on the left.</li> </ul> </li> </ul> <p></p>"},{"location":"modules/pacbio/#inputs-and-outputs","title":"Inputs and Outputs","text":"<p>The connections between the names of assembly stages and outputs is not always clear. This flowchart shows how each stage of the HGAP process corresponds to protocol window names and outputs:</p> <p></p>"},{"location":"modules/pacbio/#results","title":"Results","text":"<p>If the job is still running, click on the centre tab Monitor Jobs. Otherwise, click on the top right tab, View Data.</p> <ul> <li>Double click on the job name to open its reports.</li> <li>Click on different Reports in the left hand panel.</li> </ul> <p>Things to look at:</p> <p>General: Filtering (polymerase reads)</p> <ul> <li>number of reads post-filter</li> <li>read length (=average)</li> </ul> <p></p> <p>General: Subread Filtering (subreads)</p> <ul> <li>number of reads post-filter</li> <li>read length (average)</li> </ul> <p></p> <p>Assembly: Pre-Assembly (pre-assembled reads)</p> <ul> <li>length cutoff (the computed minimum seed read length)</li> <li>read length (average)</li> </ul> <p></p> <p>Assembly: Corrections</p> <p>Consensus calling results:</p> <ul> <li>Consensus concordance should be &gt; 99%.</li> </ul> <p>Graph: corrections across reference:</p> <ul> <li>With the first run of polishing, we expect a lot of corrections but they should be randomly distributed.</li> </ul> <p></p> <p>Note: only unitigs 0 and 1 shown.</p> <p>Assembly: Top Corrections</p> <p>This is a list of all the corrections made.</p> <p></p> <p>Note: only first 15 shown.</p> <p>Resequencing: Coverage</p> <p>Coverage across reference:</p> <ul> <li>discard contigs &lt;20X coverage</li> <li>others should have fairly consistent coverage.</li> <li>spikes could be collapsed repeats.</li> <li>valleys could be mis-assembly - e.g. draft assembly was incorrect and so remapped reads didn\u2019t support this part of the assembly.</li> </ul> <p></p> <p>Note: only unitigs 0 and 1 shown.</p> <p>Graph: Depth of Coverage:</p> <p>The is the number of reference regions vs. coverage. </p> <p></p> <p>Assembly: Polished Assembly</p> <ul> <li>Number of contigs</li> <li>Max contig length</li> <li>Graph: confidence vs depth. Multi-copy plasmids may have higher coverage.</li> </ul> <p></p>"},{"location":"modules/pacbio/#output","title":"Output","text":"<p>The polished assembly as a FASTA file.</p> <p></p> <ul> <li>download to local computer; or</li> <li>open file in (GVL) Galaxy; or</li> <li>open file in GVL command line and perform further analysis.</li> </ul>"},{"location":"modules/pacbio/#next","title":"Next","text":"<p>Further options:</p> <ul> <li> <p>Circularise the contigs; e.g. with Circlator.</p> </li> <li> <p>Polish the assembly using Illumina data; e.g. with Pilon.</p> </li> <li> <p>Annotate the polished assembly; e.g. with Prokka.</p> </li> </ul>"},{"location":"modules/pacbio/#links-to-more-information","title":"Links to more information","text":"<p>PacBio E. coli data set</p> <p>HGAP overview</p> <p>A full ist of reports and terminology</p> <p>Video overview of HGAP on SMRT portal</p> <p>More about the SMRT bell template</p>"},{"location":"modules/pathway_tools/annotation/","title":"Pathway annotation and prediction","text":""},{"location":"modules/pathway_tools/annotation/#pathway-prediction-and-annotations-for-new-organisms","title":"Pathway prediction and annotations for new organisms","text":""},{"location":"modules/pathway_tools/annotation/#connect-to-mgvl-using-vnc","title":"Connect to mGVL using VNC","text":"<ul> <li>Go to the mGVL dashboard</li> <li>Click on the link next to the Lubuntu Destkop (http://your-mgvl-ip-address/vnc)</li> </ul> <p>A new browser will appear, enter your user credentials to login</p> <p></p>"},{"location":"modules/pathway_tools/annotation/#create-a-new-database","title":"Create a new Database","text":"<p>Once logged in, you should see the following desktop with the 3 Pathway tools icons on the left. Click on the first icon Pathway Tools v1.9.5. This will bring up a new window.</p> <p></p> <ul> <li>In the Pathway Tools window, click on Tools menu item and then click on PathLogic</li> <li>In the new window, at the top, click on Database and then Create New</li> </ul> <p>Provide the metadata for the new database. In the Database(required) section, enter the following values:</p> <ul> <li>Organism/Project ID: SEPSIS25707</li> <li>Database Name: SepsisCycl</li> </ul> <p>Leave the other parameters as the default values, that is: *   Version: 1.0 (default) *   DB Storage Type: File (default)</p> <p></p> <p>Under the Taxonomy (required) section:</p> <ul> <li>Check Box if this is a multi-organism database: uncheck</li> <li>In Organism taxonomic class, type \u201c1314\u201d and click on Select. The species name of Streptococcus pyogenes will appear and a popup window will also appear. Click on to close the window.</li> <li>Create organism?: click yes</li> <li>Strain: HKU419(ARP) for sample (25707)</li> <li>Genome Source: ARP</li> <li>NCBI taxonomy ID: 1314 (come back to this after Select \u201cStrain\u201d in next step)</li> <li>Rank : Select Strain</li> </ul> <p>Leave all other fields as their default values:</p> <ul> <li>Full Species Name: autocomplete from the previous step</li> <li>Abbreviated Species Name: auto complete from the previous step</li> <li>Subspecies : leave it blank</li> <li>Default Codon Table: 11 - Bacterial and Plant Plastid\u2026</li> <li>Mitochondrial Codon Table : 0 - Unspecified</li> </ul> <p></p> <p>Leave Credits(optional) section black.</p> <ul> <li>Click OK.</li> </ul> <p>Another window will appear while processing. Wait for processing to complete, until you see the next window. Click on Enter Replicon Editor.</p> <p></p>"},{"location":"modules/pathway_tools/annotation/#specify-replicon-details","title":"Specify Replicon details","text":"<p>In this view, you provide the details of the annotated assembly. Each chromosome will have a separate entry. For each chromosome, you need to provide the GBK and FNA annotation files from Prokka.</p> <ul> <li>Name : 1 ( This is the chromosome name or number)</li> <li>Circular: checked if circulator was performed or leave it unchecked</li> <li>Select annotation file: select the gbk from prokka</li> <li>Select sequence file: select the fna from prokka</li> </ul> <p>Leave other fields as their default value:</p> <ul> <li>Type: Chromosome (default)</li> <li>Code: Bacterial, Archaeal and Plant Plastid (default)</li> <li>ID: leave it blank (default)</li> <li>Links to other database: NCBI Reference Sequences Database (default)</li> <li> <p>Relationship : same Entity (default)</p> </li> <li> <p>Click OK</p> </li> </ul> <p></p> <p>The metada for this database has now been created. Next we need to predict the pathways and annotate them.</p>"},{"location":"modules/pathway_tools/annotation/#predict-and-annotate-the-pathways","title":"Predict and annotate the pathways","text":"<p>Still on the previous window, from the top menu bar, click on Build and then Automated Build. This will take a while depending on the number of replicons that was included for this database.</p> <p></p> <p>Once the process has completed, a new window, Pathway Scoring Parameters will appear. Leave the values as their default values.</p> <ul> <li>Taxonomic Pruning: Enabled (default)</li> <li>Pathway Prediction Score Cutoff: 0.15 (default).</li> </ul> <p>A higher cutoff value for the prediction score will mean less pathways are predicted. This is the level of stringency imposed on the prediction.</p> <p>Click OK.</p> <p></p> <p>Again the process can take several minutes depending on the number of replicons included. Wait until the process is complete.</p> <p>Click on Database and then Save DB from the menu. The pathways have now been predicted, annotated and stored in the database.  </p>"},{"location":"modules/pathway_tools/annotation/#verify-and-test-the-new-database","title":"Verify and test the new Database","text":"<p>Now that the database has been created, we need to verify that it is available for use. First we check that it is present in the Pathway Tools. On the main screen, Pathway Tools - Available Databases, you should see a new entry at the bottom of the pre-existing list, \u201cStreptococcus pyogenes HKU419(ARP)\u201d.</p> <p></p> <p>To see this newly created database in the Pathway Tools web-application, start up the Pathway Tools Web service (if not already running).</p> <ul> <li>You can close all the windows, to exit Pathway Tools</li> <li>If the web server is not already running, click on the Pathway Tool Web server from the desktop, this is the third icon.</li> <li>Open an internet brwoser and go to http://your-mgvl-ip-address:1555</li> </ul> <p></p>"},{"location":"modules/pathway_tools/annotation/#using-the-new-database-in-pathway-tools-web-service","title":"Using the new database in Pathway Tools Web service","text":"<ul> <li>On the main screen, click on change organism database at the top right corner, under the search box.</li> <li>A new window will appear, select the newly created species from the list</li> <li>Click OK</li> </ul> <p>A statistic table of the species will be available for overview.</p> <p></p> <p>Click on the Pathways link in the table, which will show the list of all predicted pathways in this database.</p> <p></p> <p>You can navigate through the list of pathways and highlight a pathway of interest. For example,</p> <ul> <li>Click on the + symbol next to Detoxification</li> <li>Click on the + symbol again next to Antibiotic Resistance</li> <li>Click on peptidoglycan biosynthesis V (beta-lactam resistance) which will bring up the pathway view  </li> </ul> <p></p> <p>Go back to the previous screen with the statistics summary table and this time click on the 1 under the Replicon heading in the top table. The following genome browser will be shown.</p> <p></p> <p>From here forward the user can explore using the Pathway Tools webservice.</p>"},{"location":"modules/pear/","title":"Pear","text":"<p>Pear is a tool to merge paired-end sequencing reads, prior to downstream tasks such as assembly.</p>"},{"location":"modules/pear/#get-data","title":"Get data","text":"<p>Input: paired-end reads.</p> <ul> <li>We will use a set of Illumina MiSeq reads from the bacteria Staphylococcus aureus.</li> </ul> <p>Go to your Galaxy server.</p> <ul> <li>In the tool panel, go to Get Data: Upload File</li> <li>Select Paste/Fetch data</li> <li>In the box, paste in:</li> </ul> <p>ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR171/008/ERR1712338/ERR1712338_2.fastq.gz ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR171/008/ERR1712338/ERR1712338_1.fastq.gz</p> <ul> <li>Click Start and then Close.</li> <li>These two files will upload to your current Galaxy history.</li> <li>Using the pencil icon, change the filetype to \u201cfastqsanger\u201d, and shorten the name of the file.</li> </ul> <p></p>"},{"location":"modules/pear/#run-pear","title":"Run Pear","text":"<p>In the tool panel, go to NGS Analysis: NGS QC and manipulation: Pear</p> <ul> <li>Dataset type: Paired-end</li> <li>Name of file that contains the forward paired-end reads: ERR1712338_1.fastq</li> <li>Name of file that contains the reverse paired-end reads: ERR1712338_2.fastq</li> <li>Leave other settings as per defaults, except:</li> <li>Maximal proportion of uncalled bases in a read: 0.01<ul> <li>omits reads if &gt;1% of the reads is missing (N)</li> </ul> </li> <li>Output files: Select all</li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute</li> </ul>"},{"location":"modules/pear/#results","title":"Results","text":"<p>There are four output files.</p> <ul> <li>Assembled reads: merged paired-end reads.</li> <li>Unassembled forward reads and Unassembled reverse reads: remaining, unmerged reads.</li> <li>Discarded reads: Did not meet quality specified</li> </ul> <p>In this case, most of the reads have been merged (~360MB); 90MB are unmerged, and 350 sequences have been discarded.</p>"},{"location":"modules/pear/#next","title":"Next","text":"<p>Run Trimmomatic to trim sequences before assembling.</p>"},{"location":"modules/pear/#links","title":"Links","text":"<p>Pear paper</p> <p>Pear software</p>"},{"location":"modules/prokka/","title":"Genome annotation","text":""},{"location":"modules/prokka/#genome-annotation-using-prokka","title":"Genome annotation using Prokka","text":"<p>Keywords: annotation, Prokka, JBrowse, Galaxy, Microbial Genomics Virtual Lab</p>"},{"location":"modules/prokka/#background","title":"Background","text":"<p>In this section we will use a software tool called Prokka to annotate the draft genome sequence produced in the previous tutorial. Prokka is a \u201cwrapper\u201d; it collects together several pieces of software (from various authors), and so avoids \u201cre-inventing the wheel\u201d.</p> <p>Prokka finds and annotates features (both protein coding regions and RNA genes, i.e. tRNA, rRNA) present on on a sequence. Note, Prokka uses a two-step process for the annotation of protein coding regions: first, protein coding regions on the genome are identified using Prodigal; second, the function of the encoded protein is predicted by similarity to proteins in one of many protein or protein domain databases. Prokka is a software tool that can be used to annotate bacterial, archaeal and viral genomes quickly, generating standard output files in GenBank, EMBL and gff formats. More information about Prokka can be found here.</p>"},{"location":"modules/prokka/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>load a genome assembly into Prokka</li> <li>annotate the assembly using Prokka</li> <li>examine the annotated genome using JBrowse</li> </ol>"},{"location":"modules/prokka/#input-data","title":"Input data","text":"<p>Prokka requires assembled contigs.</p> <ul> <li> <p>If you are continuing on from the previous workshop (Assembly with Spades), this file will be in your current history named something like SPAdes contigs(fasta). </p> </li> <li> <p>Or, if you have uploaded the history of workshop files, there is also a copy in your history called SPAdes_contigs.fasta. Either copy is fine to use. </p> </li> <li> <p>Alternatively, get the file called \u201cassembled contigs\u201d from the Training dataset page.</p> </li> </ul>"},{"location":"modules/prokka/#run-prokka","title":"Run Prokka","text":"<ul> <li>In Galaxy, go to Tools \u2192 NGS Analysis \u2192 NGS: Annotation \u2192 Prokka </li> <li>Set the following parameters (leave everything else unchanged):<ul> <li>Contigs to annotate: SPAdes contigs (fasta) </li> <li>Locus tag prefix (\u2013locustag): P</li> <li>Force GenBank/ENA/DDJB compliance (\u2013compliant): No</li> <li>Sequencing Centre ID (\u2013centre): V</li> <li>Genus Name: Staphylococcus </li> <li>Species Name: aureus </li> <li>Use genus-specific BLAST database No </li> </ul> </li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute </li> </ul>"},{"location":"modules/prokka/#examine-the-output","title":"Examine the output","text":"<p>Once Prokka has finished, examine each of its output files.</p> <ul> <li>The GFF and GBK files contain all of the information about the features annotated (in different formats.)</li> <li>The .txt file contains a summary of the number of features annotated.</li> <li>The .faa file contains the protein sequences of the genes annotated.</li> <li>The .ffn file contains the nucleotide sequences of the genes annotated.</li> </ul>"},{"location":"modules/prokka/#view-annotated-features-in-jbrowse","title":"View annotated features in JBrowse","text":"<p>Now that we have annotated the draft genome sequence, we would like to view the sequence in the JBrowse genome viewer.</p> <ul> <li> <p>Go to the Galaxy tool panel, and use the top search box to search for \u201cJBrowse\u201d. </p> </li> <li> <p>Under Reference genome to display choose Use a genome from history.</p> </li> <li> <p>Under Select the reference genome choose Prokka on data XX:fna. This .fna sequence is the fasta nucleotide sequence, and will be the reference against which annotations are displayed.</p> </li> <li> <p>For Produce a Standalone Instance select Yes.</p> </li> <li> <p>For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code.</p> </li> <li> <p>Under JBrowse-in-Galaxy Action choose New JBrowse Instance.</p> </li> <li> <p>Click Insert Track Group</p> </li> <li> <p>Under Track Category type in gene annotations.</p> </li> <li> <p>Click Insert Annotation Track</p> </li> <li> <p>For Track Type choose GFF/GFF3/BED/GBK Features</p> </li> <li> <p>For GFF/GFF3/BED Track Data select Prokka on data XX:gff  [Note: not wildtype.gff]</p> </li> <li> <p>Under JBrowse Track Type[Advanced] select Canvas Features.</p> </li> <li> <p>Click on JBrowse Styling Options &lt;Advanced]</p> </li> <li> <p>Under JBrowse style.label add in product.</p> </li> <li> <p>Under Track Visibility choose On for new users.</p> </li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li> <p>Click Execute</p> </li> <li> <p>A new file will be created, called JBrowse on data XX and data XX - Complete. Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.</p> </li> <li> <p>Under Available Tracks on the left, tick the box for Prokka on data XX:gff.</p> </li> <li> <p>Select contig 1 in the drop down box. You can only see one contig displayed at a time.</p> </li> </ul> <p></p> <ul> <li> <p>Use the plus and minus buttons to zoom in and out, and the arrows to move left or right (or click and drag within the window to move left or right).</p> </li> <li> <p>Zoom in to see the reference sequence at the top. JBrowse displays the sequence and a 6-frame amino acid translation.</p> </li> </ul> <p>Zoomed in view:</p> <p></p> <ul> <li>Right click on a gene/feature annotation (the bars on the annotation track), then select View Details to see more information.<ul> <li>gene name</li> <li>product name</li> <li>you can download the FASTA sequence by clicking on the disk icon.</li> </ul> </li> </ul>"},{"location":"modules/roary/","title":"Find pan-genomes using Roary (using the commandline)","text":"<p>A concept in comparative microbial genomics is core and pan genomes. If we analyse DNA from several bacterial strains, we may want to know which genes they have in common and which are unique to some strains.</p> <ul> <li> <p>The core genome is the group of genes shared by all strains in the clade of interest. Gene sequences are similar but not necessarily identical. \u201cCore genome SNPs\u201d are those SNPs found in the genes in the core genome; i.e. at a particular site, the nucleotide varies. We can use these SNPs to infer relationships between the strains.</p> </li> <li> <p>The accessory genome is the group of genes that are not in all the strains. These genes may be in one or more strain.</p> </li> <li> <p>The pan genome is the sum of the core and accessory genomes. That is, a combination of all the genes that are found in the clade of interest.</p> </li> </ul> <p>Bacteria can horizontally-transfer genes to other bacteria via plasmids, and so their accessory genome can be large relative to those of eurkaryotes. Bacterial accessory genomes often house genes for drug resistance.</p> <p>This tutorial demonstrates how to calculate the pan and core genomes of a set of input bacterial samples, using the tool Roary.</p>"},{"location":"modules/roary/#get-data","title":"Get data","text":"<p>Input:</p> <ul> <li>annotated genome in GFF3 format, per sample (e.g. output from Prokka)</li> <li>samples must be from same species</li> </ul> <p>Our data:</p> <ul> <li>Five strains of Staphylococcus aureus, in .gff format.</li> </ul>"},{"location":"modules/roary/#run","title":"Run","text":""},{"location":"modules/roary/#run-roary","title":"Run roary","text":"<pre><code>roary -e --mafft -p 8 *.gff\n</code></pre> <ul> <li><code>-e --mafft</code> aligns the core genes using the tool MAFFT</li> <li><code>-p 8</code> uses 8 threads</li> </ul>"},{"location":"modules/roary/#what-does-roary-do","title":"What does Roary do","text":"<ul> <li>converts coding sequences into protein sequences</li> <li>clustered these protein sequences by several methods</li> <li>further refines clusters into orthologous genes</li> <li>for each sample, determines if gene is present/absent: produces gene_presence_absence.csv</li> <li>uses this gene p/a information to build a tree, using FastTree: produces accessory_binary_genes.fa.newick</li> <li>overall, calculates number of genes that are shared, and unique: produces summary_statistics.txt</li> <li>aligns the core genes (if option used, as above) for downstream analyses</li> </ul>"},{"location":"modules/roary/#output","title":"Output","text":""},{"location":"modules/roary/#core-and-pan-genes","title":"Core and pan genes","text":"<p>Open the summary file:</p> <pre><code>less summary_statistics.txt\n</code></pre> <p>This shows a table of counts of shared genes (core genome) and total genes (pan genome).</p> <p></p> <p>What are the core genes?</p> <pre><code>query_pan_genome -a intersection -o core_genome_results *.gff\n</code></pre> <p>What are the accessory genes?</p> <pre><code>query_pan_genome -a complement -o accessory_genome_results *.gff\n</code></pre> <p>What are the pan genes?</p> <pre><code>query_pan_genome -a union -o pan_genome_results *.gff\n</code></pre> <p>View: e.g.</p> <pre><code>less core_genome_results | column -t\n</code></pre>"},{"location":"modules/roary/#gene-presenceabsence","title":"Gene presence/absence","text":"<p>Transfer the file gene_presence_absence.csv to your local computer and view in spreadsheet software.</p> <ul> <li>Search for the gene that confers methicillin resistance. It is only found in some of the strains.</li> </ul>"},{"location":"modules/roary/#vizualize-with-phandango","title":"Vizualize with Phandango","text":"<p>Copy these files to your local computer:</p> <ul> <li>accessory_binary_genes.fa.newick</li> <li>gene_presence_absence.csv</li> </ul> <p>Go to http://phandango.net</p> <ul> <li>drag and drop the two files onto the landing page.</li> <li>view the tree of samples and their core and pan genomes</li> </ul> <p></p>"},{"location":"modules/roary/#links","title":"Links","text":"<ul> <li>Roary: https://sanger-pathogens.github.io/Roary/</li> <li>Roary publication: http://bioinformatics.oxfordjournals.org/content/31/22/3691</li> </ul>"},{"location":"modules/roary-galaxy/","title":"Find pan-genomes using Roary (in Galaxy)","text":"<p>A concept in comparative microbial genomics is core and pan genomes. If we analyse DNA from several bacterial strains, we may want to know which genes they have in common and which are unique to some strains.</p> <ul> <li> <p>The core genome is the group of genes shared by all strains in the clade of interest. Gene sequences are similar but not necessarily identical. \u201cCore genome SNPs\u201d are those SNPs found in the genes in the core genome; i.e. at a particular site, the nucleotide varies. We can use these SNPs to infer relationships between the strains.</p> </li> <li> <p>The accessory genome is the group of genes that are not in all the strains. These genes may be in one or more strain.</p> </li> <li> <p>The pan genome is the sum of the core and accessory genomes. That is, a combination of all the genes that are found in the clade of interest.</p> </li> </ul> <p>Bacteria can horizontally-transfer genes to other bacteria via plasmids, and so their accessory genome can be large relative to those of eurkaryotes. Bacterial accessory genomes often house genes for drug resistance.</p> <p>This tutorial demonstrates how to calculate the pan and core genomes of a set of input bacterial samples, using the tool Roary.</p>"},{"location":"modules/roary-galaxy/#get-data","title":"Get data","text":"<p>Input:</p> <ul> <li>annotated genome in GFF3 format, per sample (e.g. output from Prokka)</li> <li>samples must be from same species</li> </ul> <p>Our data:</p> <ul> <li>Five strains of Staphylococcus aureus, in .gff format.</li> <li>Galaxy or swift location: ask your demonstrator or load your own data. </li> </ul>"},{"location":"modules/roary-galaxy/#run","title":"Run","text":""},{"location":"modules/roary-galaxy/#run-roary","title":"Run Roary","text":"<ul> <li>In Galaxy, go to Tools \u2192 NGS Analysis \u2192 Pan Genomes \u2192 Roary </li> <li> <p>Set the following parameters (leave everything else unchanged):</p> <ul> <li>Individual gff files or a dataset collection: Individual</li> <li>select gff inputs to Roary: Select all the .gff input files</li> </ul> </li> <li> <p>Click Execute</p> </li> </ul>"},{"location":"modules/roary-galaxy/#what-does-roary-do","title":"What does Roary do","text":"<ul> <li>converts coding sequences into protein sequences</li> <li>clustered these protein sequences by several methods</li> <li>further refines clusters into orthologous genes</li> <li>for each sample, determines if gene is present/absent: produces gene_presence_absence.csv</li> <li>uses this gene p/a information to build a tree, using FastTree: produces accessory_binary_genes.fa.newick</li> <li>overall, calculates number of genes that are shared, and unique: produces summary_statistics.txt</li> <li>aligns the core genes (if option used, as above) for downstream analyses</li> </ul>"},{"location":"modules/roary-galaxy/#output","title":"Output","text":"<p>There are three output files. </p>"},{"location":"modules/roary-galaxy/#summary-statistics","title":"Summary statistics","text":"<p>Click on the eye icon. This shows a table of counts of shared genes (core genome) and total genes (pan genome).</p> <p></p>"},{"location":"modules/roary-galaxy/#core-gene-alignment","title":"Core gene alignment","text":"<p>Click on the disk icon under this file to download it.</p>"},{"location":"modules/roary-galaxy/#gene-presenceabsence","title":"Gene presence/absence","text":"<p>Click on the disk icon under this file to download it. Open and view in spreadsheet software.</p> <ul> <li>Column 3 shows the annotated gene name.</li> <li>Column 4 shows the number of isolates that the gene was found it (in this case, ordered from 5 (all) to 1).</li> </ul>"},{"location":"modules/roary-galaxy/#infer-phylogeny-using-core-gene-snps","title":"Infer phylogeny using core gene snps","text":"<p>Roary has produced an alignment of the core genes. We can use this alignment to infer a phylogenetic tree of the isolates.</p> <ul> <li>In Galaxy, go to Tools \u2192 NGS Analysis \u2192 NGS:Phylogenetics \u2192 Phylogeneitc reconstruction with RaXML </li> <li> <p>Set the following parameters (leave everything else unchanged):</p> <ul> <li>Source file: Roary on data x, data x, and others Core Gene Alignment</li> <li>Model Type: Nucleotide</li> <li>Substitution Model: GTRGAMMA</li> </ul> </li> <li> <p>Click Execute</p> </li> </ul> <p>There are six output files.</p> <p>Click on Result. Under the file, click on the \u201cVisualize\u201d icon (a graph), then choose PhyloViz.</p> <p></p> <ul> <li>These isolates are all very closely related and so the structure of the tree is narrow.</li> <li>To expand, go to the right hand box for \u201cPhyloviz Settings\u201d. Change the Phylogenetic Spacing to 2500 and the Vertical Spacing to 30.</li> </ul> <p>To return to the main Galaxy screen, go to the top panel and click on \u201cAnalyze Data\u201d.</p> <p>Click on the disk icon under the Results file to download.</p> <p>Re-name with the file extension .tree</p>"},{"location":"modules/roary-galaxy/#vizualize-with-phandango","title":"Vizualize with Phandango","text":"<p>If not done already, copy these files to your local computer:</p> <ul> <li> <p>The raxml.tree (or the accessory_binary_genes.fa.newick).</p> </li> <li> <p>gene_presence_absence.csv</p> </li> </ul> <p>Go to http://phandango.net</p> <ul> <li>drag and drop the two files onto the landing page.</li> <li>view the tree of samples and their core and pan genomes</li> <li>each blue coloured column is a gene: genes are present or absent in each isolate</li> <li>the core genes are shared by all isolates</li> </ul> <p></p>"},{"location":"modules/salmon/","title":"Salmon","text":"<p>Available on the ABRPI mGVL command line.</p> <p>Not yet available in mGVL Galaxy.</p> <p>What does Salmon do?</p> <ul> <li>quantifies transcripts from RNA-seq data</li> <li>uses \u201cquasi-mapping\u201d to map reads to reference - more detail here</li> </ul>"},{"location":"modules/salmon/#start","title":"Start","text":"<p>Note: testing on MDU first.</p> <p>Open a terminal. Log in to the ABRPI mGVL. Make a folder called RNA_seq</p> <pre><code>mkdir salmon\ncd salmon\n</code></pre>"},{"location":"modules/salmon/#input","title":"Input","text":"<ul> <li>RNA-seq reads in FASTA/FASTQ format</li> <li>Reference in FASTA format \u2013 need to get the Ecoli transcriptome - containing genes and RNAs</li> </ul> <p>how to get?</p> <p>```genbank2fasta.pl &lt; file.gbk &gt; file.ffn</p> <pre><code>get these files from [Nectar container] - how to scp these in using terminal\n\n\n##Run\n\nIndex the reference.\n[Note: the reads need to be in random order with respect to the reference. Are they?]\n\n```text\nsalmon index -t ecoli.fasta -i ecoli_index\n</code></pre> <p>-t specifies the input transcript fasta file -i specifies the name of the output index (folder)</p> <p>Quantify the reads [Salmon says \u201cquantify, don\u2019t count\u201d ? ]</p> <pre><code>salmon quant -i ecoli_index -l A -r rna_seqs.fasta.gz -p 8 --numAuxModelSamples 50000 -o quants\n</code></pre> <p>-i is the name of the index for the reference file -l A means that salmon will determine the library type for the input sequencing reads (whether they are stranded, anything else? page just says etc.) -p 8 use 8 threads (possible on this machine?) numAuxModelSamples default was 5 million but there are only ~2million reads per file; set this to 50,000 (not sure if ok) -o quants output directory for results is called quants</p> <p>Warming: Detected a potential strand bias &gt; 1% in an unstranded protocol check the file: quants/lib_format_counts.json for details</p> <p>(is this a problem?)</p>"},{"location":"modules/salmon/#output","title":"Output","text":"<pre><code>less quant.sf\n</code></pre> <p>shows the output:</p> <p>TPM - Transcripts per Million NumReads - estimated number of reads for this reference</p>"},{"location":"modules/scripts/","title":"Index","text":""},{"location":"modules/scripts/#bash-scripts","title":"Bash scripts","text":"<p>It is possible to put some commands into a script, to run automatically.</p> <p>Here, we will put commands for several tools into a bash script and use it to assemble a bacterial genome.</p> <p>Bash is a programming language, and we can run a bash script in the bash shell (e.g. the terminal).</p>"},{"location":"modules/scripts/#prepare-the-bash-script","title":"Prepare the bash script","text":"<ul> <li>Open the terminal.</li> <li>Open a text editor, e.g., nano.</li> </ul> <pre><code>nano myscript.sh\n</code></pre> <ul> <li>We now have a script called myscript.sh</li> <li>In the script, write</li> </ul> <pre><code>#!/bin/bash  \necho This is my assembly script\n</code></pre> <ul> <li> <p>Ctrl-X to exit nano.</p> </li> <li> <p>Make the script executable:</p> </li> </ul> <pre><code>chmod 755 myscript.sh\n</code></pre> <ul> <li>Run the script to test.</li> </ul> <pre><code>./myscript.sh\n</code></pre> <ul> <li>The text should print to the screen:</li> </ul> <pre><code>This is my assembly script\n</code></pre>"},{"location":"modules/scripts/#edit-the-bash-script","title":"Edit the bash script","text":"<ul> <li>Now we will add to the bash script.</li> <li>This will be a simple script that is designed to assemble, trim, and correct.</li> <li>It will likely only work in simple cases.</li> <li>Open nano</li> </ul> <pre><code>nano myscript.sh\n</code></pre> <ul> <li>and type in the following (#comments and echo statements are optional but probably useful):</li> </ul> <pre><code>#!/bin/bash\n#a script for assembling a bacterial genome\n\n#set a variable for the number of CPUS\n#this can then be easily changed if needed\nCPUS=16\n\n#this script requires 5 arguments\n#we will test whether 5 were entered\nif [ ! $# -eq 5 ] #if there are not 5 arguments\nthen\n    echo \"ERROR: needs 5 arguments\"\n    echo \"usage: $0 outdir genomeSize (e.g. 2.1m) pacbio.fq R1.fq R2.fq\"\n    #the usage shows what arguments are required\n    exit 1 #exits\nfi\n\n#report back the arguments entered:\n#each argument is assigned a variable name from 1 to 5\n#these variables are referred to with the $ sign\necho \"your directory with output is called $1\"\necho \"your genomeSize is $2\"\necho \"your pacbio reads are in file $3\"\necho \"your R1 reads are in file $4\"\necho \"your R2 reads are in file $5\"\necho #echo on its own puts in a blank line on the screen\n\n#run canu to assemble the reads\nmkdir -p \"$1\"  #the p creates intermediate directories where required\necho \"now running canu\"\necho \"your canu output is in directory \"$1/canu\"\"\nnice canu -p canu -d \"$1/canu\" genomeSize=\"$2\" -pacbio-raw \"$3\"\n#commands are preceeded by 'nice' in this script for particular servers\n\n#test canu output: number of contigs\n#make a variable called num_contigs\nnum_contigs=$(grep -c '&gt;' \"$1/canu/canu.contigs.fasta\")\necho \"number of contigs found by canu is: $num_contigs\"\necho\nif [ $num_contigs -gt 10 ]\nthen\n    echo \"there are more than 10 contigs\"\n    echo \"the analysis is stopping\"\n    exit 1\n#in more complex scripts, you can add the option to repeat the analysis with different parameters, etc.\nfi\n\n#run circlator to trim the contigs\necho \"now running circlator to trim and orient contigs\"\necho \"your circlator output is in directory \"$1/circlator\" \"\nnice circlator all --threads $CPUS --verbose \"$1/canu/canu.contigs.fasta\" \"$1/canu/canu.correctedReads.fasta.gz\" \"$1/circlator\"\n#in more complex scripts, you can add information about which contigs were merged; where contigs were oriented; how contigs were trimmed, etc.\n#rename the contigs file\ncp \"$1/circlator/06.fixstart.fasta\" \"$1/contigs.fa\"\necho \"your contigs from circlator are now in the file called contigs.fa\"\n#note: in this case, these contigs may not have been trimmed.\n\n#find smaller plasmids\necho \"now looking in illumina reads for small plasmids\"\necho \"indexing the contigs.fa file\"\nnice bwa index \"$1/contigs.fa\"\necho \"aligning illumina reads to the contigs.fa file\"\nnice bwa mem -t $CPUS \"$1/contigs.fa\" \"$4\" \"$5\" | samtools sort &gt; \"$1/aln.bam\"\necho \"indexing the aln.bam file\"\nnice samtools index \"$1/aln.bam\"\necho \"extracting the unmapped illumina reads\"\nsamtools fastq -f 4 -1 \"$1/unmapped.R1.fastq\" -2 \"$1/unmapped.R2.fastq\" -s \"$1/unmapped.RS.fastq\" \"$1/aln.bam\"\necho \"assembling the unmapped reads with spades\"\necho\nnice spades.py -t $CPUS -1 \"$1/unmapped.R1.fastq\" -2 \"$1/unmapped.R2.fastq\" -s \"$1/unmapped.RS.fastq\" -o \"$1/spades_assembly\"\necho\necho \"your output is in the spades_assembly directory\"\necho\n\n#check if any contigs are &gt; 1500bp\nseqtk seq -L 1500 \"$1/spades_assembly/contigs.fasta\" &gt; \"$1/illumina_contigs.fasta\"\necho \"extracting contigs &gt; 1500bp into illumina_contigs.fasta\"\necho\n#in more complex scripts, you can trim and orient these contigs, or do further investigation into whether they are true plasmids\n\n#join the canu pacbio contigs and the small plasmids\ncat \"$1/contigs.fa\" \"$1/illumina_contigs.fasta\" &gt; \"$1/allcontigs.fasta\"\n\necho\necho \"joining small contigs to the pacbio contigs as allcontigs.fasta\"\necho\n\n#correct this assembly with Pilon\necho \"preparing to correct contigs with illumina reads, using Pilon\"\necho \"indexing allcontigs.fasta\"\nnice bwa index \"$1/allcontigs.fasta\"\necho \"aligning illumina reads to allcontigs.fasta\"\nnice bwa mem -t $CPUS \"$1/allcontigs.fasta\" \"$4\" \"$5\" | samtools sort &gt; \"$1/aln.bam\"\necho \"indexing aln.bam\"\nnice samtools index \"$1/aln.bam\"\necho \"indexing allcontigs.fasta\"\nnice samtools faidx \"$1/allcontigs.fasta\"\necho \"correcting with Pilon\"\nnice pilon --genome \"$1/allcontigs.fasta\" --frags \"$1/aln.bam\" --output \"$1/pilon1\" --fix all --mindepth 0.5 --changes --verbose --threads $CPUS\necho\necho \"Pilon finished\"\necho\n\n#count how many changes were made\npilon_changes=$(wc -l &lt; \"$1/pilon1.changes\")\necho \"there were $pilon_changes corrections made\"\necho\necho \"Assembly complete\"\necho \"The sequence is saved as \"$1/pilon1.fasta\"\"\n\nexit 1\n</code></pre>"},{"location":"modules/scripts/#run","title":"Run","text":"<p>To run, type in</p> <pre><code>./myscript.sh outdir 1.9m subreads.fastq R1.fastq R2.fastq\n</code></pre> <ul> <li>outdir is the name of the output directory</li> <li>1.9m is the approximate genome size for the species</li> <li>subreads.fastq is the name of the Pacbio reads file</li> <li>R1.fastq is the name of the R1 Illumina reads file</li> <li> <p>R2.fastq is the name of the R2 Illumina reads file</p> </li> <li> <p>If the Pacbio and Illumina reads files are not in the current directory, put in the whole path to those files</p> </li> <li> <p>The script should run to the end or may exit early if necessary (e.g. the canu assembly found too many contigs).</p> </li> <li> <p>There are many refinements and additions that could be made to this script, and some of these are noted as comments above.</p> </li> </ul>"},{"location":"modules/snippy/","title":"Variant finding","text":""},{"location":"modules/snippy/#variant-calling-with-snippy","title":"Variant calling with Snippy","text":"<p>Keywords: variant calling, SNP, Snippy, JBrowse, Galaxy, Microbial Genomics Virtual Lab</p>"},{"location":"modules/snippy/#background","title":"Background","text":"<p>Variant calling is the process of identifying differences between two genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by \u201cvariant calling\u201d.</p> <p>In this tutorial, we will use the tool \u201cSnippy\u201d (link to Snippy is here). Snippy uses a tool to align the reads to a reference genome, and another tool to decide (\u201ccall\u201d) if the discrepancies are real variants.</p>"},{"location":"modules/snippy/#learning-objectives","title":"Learning Objectives","text":"<ol> <li>Find variants between a reference genome and a set of reads</li> <li>Visualise the SNP in context of the reads aligned to the genome</li> <li>Determine the effect of those variants on genomic features</li> <li>Understand if the SNP is potentially affecting the phenotype</li> </ol>"},{"location":"modules/snippy/#prepare-reference","title":"Prepare reference","text":"<p>For variant calling, we need a reference genome that is of the same strain as the input sequence reads.</p> <p>For this tutorial, our reference is the wildtype.gbk file and our reads are mutant_R1.fastq and mutant_R2.fastq. </p> <p>If these files are not presently in your Galaxy history, import them from the Training dataset page.</p>"},{"location":"modules/snippy/#call-variants-with-snippy","title":"Call variants with Snippy","text":"<ul> <li>Go to the Galaxy tools panel, and use the search box at the top to search for \u201csnippy\u201d. </li> <li>For Reference type select Genbank.</li> <li>Then for Reference Genbank choose the wildtype.gbk file.</li> <li>For Single or Paired-end reads choose Paired.</li> <li>Then choose the first set of reads, mutant_R1.fastq and second set of reads, mutant_R2.fastq.</li> <li>For Cleanup the non-snp output files select No.</li> </ul> <p>Your tool interface should look like this:</p> <p></p> <ul> <li>Click Execute.</li> </ul>"},{"location":"modules/snippy/#examine-snippy-output","title":"Examine Snippy output","text":"<p>From Snippy, there are 10 output files in various formats.</p> <ul> <li>Go to the file called snippy on data XX, data XX and data XX table and click on the eye icon.</li> <li>We can see a list of variants. Look in column 3 to see which types the variants are, such as a SNP or a deletion.</li> <li>Look at the third variant called. This is a T\u2192A mutation, causing a stop codon. Look at column 14: the product of this gene is a methicillin resistance protein. Methicillin is an antibiotic. What might be the result of such a mutation? </li> </ul>"},{"location":"modules/snippy/#view-snippy-output-in-jbrowse","title":"View Snippy output in JBrowse","text":"<ul> <li> <p>Go to the Galaxy tools panel, and use the search box at the top to search for \u201cJBrowse\u201d. </p> </li> <li> <p>Under Reference genome to display choose Use a genome from history.</p> </li> <li> <p>Under Select the reference genome choose wildtype.fna. This sequence will be the reference against which annotations are displayed.</p> </li> <li> <p>For Produce a Standalone Instance select Yes.</p> </li> <li> <p>For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code.</p> </li> <li> <p>Under JBrowse-in-Galaxy Action choose New JBrowse Instance.</p> </li> <li> <p>We will now set up three different tracks - these are datasets displayed underneath the reference sequence (which is displayed as nucleotides in FASTA format). We will choose to display the sequence reads (the .bam file), the variants found by snippy (the .gff file) and the annotated reference genome (the wildtype.gff)</p> </li> </ul> <p>Track 1 - sequence reads</p> <ul> <li>Click Insert Track Group</li> <li>For Track Cateogry name it \u201csequence reads\u201d</li> <li>Click Insert Annotation Track</li> <li>For Track Type choose BAM Pileups</li> <li>For BAM Track Data select the snippy bam file</li> <li>For Autogenerate SNP Track select Yes</li> <li>Under Track Visibility choose On for new users.</li> </ul> <p>Track 2 - variants</p> <ul> <li>Click Insert Track Group again</li> <li>For Track Category name it \u201cvariants\u201d</li> <li>Click Insert Annotation Track</li> <li>For Track Type choose GFF/GFF3/BED/GBK Features</li> <li>For Track Data select the snippy snps gff file</li> <li>Under Track Visibility choose On for new users.</li> </ul> <p>Track 3 - annotated reference</p> <ul> <li>Click Insert Track Group again</li> <li>For  Track Category name it \u201cannotated reference\u201d</li> <li>Click Insert Annotation Track</li> <li>For Track Type choose GFF/GFF3/BED/GBK Features</li> <li>For Track Data select wildtype.gff</li> <li>Under JBrowse Track Type[Advanced] select Canvas Features.</li> <li>Click on JBrowse Styling Options &lt;Advanced]</li> <li>Under JBrowse style.label add in the word product.</li> <li>Under JBrowse style.description add in the word product.</li> <li> <p>Under Track Visibility choose On for new users.</p> </li> <li> <p>Click Execute</p> </li> <li> <p>A new file will be created, called JBrowse on data XX and data XX - Complete. Click on the eye icon next to the file name. The JBrowse window will appear in the centre Galaxy panel.</p> </li> <li> <p>On the left, tick boxes to display the tracks</p> </li> <li> <p>Use the minus button to zoom out to see:</p> <ul> <li>sequence reads and their coverage (the grey graph)</li> </ul> </li> <li> <p>Use the plus button to zoom in to see:</p> <ul> <li>probable real variants (a whole column of snps)</li> <li>probable errors (single one here and there)</li> </ul> </li> </ul> <p></p> <ul> <li>In the coordinates box, type in 47299 and then Go to see the position of the SNP discussed above.<ul> <li>the correct codon at this position is TGT, coding for the amino acid Cysteine, in the middle row of the amino acid translations.</li> <li>the mutation of T \u2192 A turns this triplet into TGA, a stop codon.</li> </ul> </li> </ul> <p> </p>"},{"location":"modules/snippy-core/","title":"Snippy-core","text":"<p>Run Snippy   - ref genome + sets of reads   - one output is a whole-genome alignment of snps (not just the core-genome snps)   - =&gt; gubbins</p>"},{"location":"modules/snippy-core/#get-data","title":"Get data","text":"<p>Upload all these to galaxy:</p> <p>the Staph aureus BPH2986.gbk (from prokka annotation) =25749 (from sepsis done)</p> <ul> <li>manually change datatype to \u201cgenbank\u201d</li> </ul> <p>the read files from samples 25745-25748 (paired end)</p> <ul> <li>change datatype from fastq to fastqsanger</li> </ul>"},{"location":"modules/snippy-core/#make-dataset-collections","title":"Make dataset collections","text":"<p>In Galaxy - see the tick box at the top of the history pane. Click on this - select all the files for the collection</p> <p>change the search bar to say R1 instead of -1 check the pairs auto pair create list name list save</p> <p>https://galaxyproject.org/tutorials/collections/</p>"},{"location":"modules/snippy-core/#run-snippy","title":"Run Snippy","text":"<p>Reference type: Genbank. choose genbank file</p> <p>Single or Paired-end reads: Paired collection</p>"},{"location":"modules/spades/","title":"Genome assembly with Spades","text":""},{"location":"modules/spades/#assembly-using-spades","title":"Assembly using Spades","text":"<p>Keywords: de novo assembly, Spades, Galaxy, Microbial Genomics Virtual Lab</p>"},{"location":"modules/spades/#background","title":"Background","text":"<p>Spades is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this link.</p>"},{"location":"modules/spades/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>assemble the reads using Spades, and</li> <li>examine the output assembly.</li> </ol>"},{"location":"modules/spades/#import-and-view-data","title":"Import and view data","text":""},{"location":"modules/spades/#galaxy","title":"Galaxy","text":"<p>If you are using Galaxy-Mel or Galaxy-Qld, import the files:</p> <ul> <li>In your browser, go to Galaxy-Mel or Galaxy-Qld </li> <li>In the top Galaxy panel, go to User and log in (or register, and then log in)</li> <li>In the top Galaxy panel, go to Shared Data and click on the drop down arrow</li> <li>Click on Histories <li>Click on Genomics-workshop and then (over in the top right) Import history</li> <li>The files will now be listed in the right hand panel (your current history).</li> <p>(Alternatively, see here for information about how to start with Galaxy, and here for the link to import the Galaxy history for this tutorial, if you don\u2019t already have them in your history.)</p>"},{"location":"modules/spades/#the-data","title":"The data","text":"<p>The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome.</p> <ul> <li> <p>The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.</p> </li> <li> <p>The files we need for assembly are the mutant_R1.fastq and mutant_R2.fastq.</p> </li> <li> <p>(We don\u2019t need the reference genome sequences for this tutorial).</p> </li> <li> <p>The reads are paired-end.</p> </li> <li> <p>Each read is 150 bases long. </p> </li> <li> <p>The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).</p> </li> </ul> <ul> <li>Click on the View Data button (the ) next to one of the FASTQ sequence files.</li> </ul>"},{"location":"modules/spades/#assemble-reads-with-spades","title":"Assemble reads with Spades","text":"<ul> <li> <p>We will perform a de novo assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)</p> </li> <li> <p>Go to Tools \u2192 NGS Analysis \u2192 NGS: Assembly \u2192 spades</p> </li> <li> <p>Set the following parameters (leave other settings as they are):</p> <ul> <li>Run only Assembly: Yes [the Yes button should be darker grey]</li> <li>Kmers to use separated by commas: 33,55,91  [note: no spaces]  </li> <li>Coverage cutoff: auto </li> <li>Files \u2192 Forward reads: mutant_R1.fastq </li> <li>Files \u2192 Reverse reads: mutant_R2.fastq </li> </ul> </li> <li> <p>Your tool interface should look like this:</p> </li> </ul> <p></p> <ul> <li>Click Execute</li> </ul>"},{"location":"modules/spades/#examine-the-output","title":"Examine the output","text":"<ul> <li>Galaxy is now running Spades on the reads for you.</li> <li> <p>When it is finished, you will have five (or more) new files in your history, including:</p> <ul> <li>two FASTA files of the resulting contigs and scaffolds</li> <li>two files for statistics about these</li> <li>the Spades logfile</li> </ul> </li> </ul> <p></p> <ul> <li>Click on the View Data button  on each of the files.</li> <li>Note that the short reads have been assembled into much longer contigs.</li> <li>(However, in this case, the contigs have not been assembled into larger scaffolds.)</li> <li>The stats files will give you the length of each of the contigs, and the file should look something like this:</li> </ul> <p></p>"},{"location":"modules/spades_cmdline/","title":"Spades - commandline","text":"<p>This tutorial follows on from \u201cPacBio assembly with commandline tools\u201d.</p>"},{"location":"modules/spades_cmdline/#short-read-assembly-a-comparison","title":"Short-read assembly: a comparison","text":"<p>So far, we have assembled the long PacBio reads into one contig (the chromosome) and found an additional plasmid in the Illumina short reads.</p> <p>If we only had Illumina reads, we could also assemble these using the tool Spades.</p> <p>You can try this here, or try it later on your own data.</p>"},{"location":"modules/spades_cmdline/#get-data","title":"Get data","text":"<p>We will use the same Illumina data as we used above:</p> <ul> <li>illumina_R1.fastq.gz: the Illumina forward reads</li> <li>illumina_R2.fastq.gz: the Illumina reverse reads</li> </ul> <p>This is from Sample 25747.</p>"},{"location":"modules/spades_cmdline/#assemble","title":"Assemble","text":"<p>Run Spades:</p> <pre><code>spades.py -1 illumina_R1.fastq.gz -2 illumina_R2.fastq.gz --careful --cov-cutoff auto -o spades_assembly_all_illumina\n</code></pre> <ul> <li><code>-1</code> is input file of forward reads</li> <li><code>-2</code> is input file of reverse reads</li> <li><code>--careful</code> minimizes mismatches and short indels</li> <li><code>--cov-cutoff auto</code> computes the coverage threshold (rather than the default setting, \u201coff\u201d)</li> <li><code>-o</code> is the output directory</li> </ul>"},{"location":"modules/spades_cmdline/#results","title":"Results","text":"<p>Move into the output directory and look at the contigs:</p> <pre><code>infoseq contigs.fasta\n</code></pre>"},{"location":"modules/spades_cmdline/#next","title":"Next","text":"<p>Run \u201cProkka\u201d to annotate the contigs.</p>"},{"location":"modules/trimmomatic/","title":"Trimming reads","text":""},{"location":"modules/trimmomatic/#introduction","title":"Introduction","text":"<p>After checking your input sequence reads for quality (e.g. using FastQC) it might be necessary to trim the reads. Here we will use the Trimmomatic tool. For more information, see the Trimmomatic webpage and the manual.</p>"},{"location":"modules/trimmomatic/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>input sequence reads to Trimmomatic</li> <li>trim using appropriate parameters, and</li> <li>examine the output trimmed reads.</li> </ol>"},{"location":"modules/trimmomatic/#start","title":"Start","text":"<ul> <li>Open your Galaxy instance.</li> <li>Find your quality-checked Illumina sequence reads.<ul> <li>e.g. mutant_R1.fastq and mutant_R2.fastq</li> </ul> </li> <li>We want to trim the parts of the reads that are of low quality.</li> <li>Based on the FastQC results, we might want to trim the reads like this:<ul> <li>trim Illumina adapters</li> <li>leading and trailing bases - trim if quality is below 15</li> <li>sliding window - trim once average quality is below 20</li> </ul> </li> </ul>"},{"location":"modules/trimmomatic/#trimmomatic-functions","title":"Trimmomatic functions","text":""},{"location":"modules/trimmomatic/#trim-adapters","title":"Trim adapters","text":"<ul> <li>This function trims adapters, barcodes and other contaminants from the reads.</li> <li>This should always be the first trimming step if it is used.</li> <li>You need to supply a FASTA file of possible adapter sequences, barcodes, etc. to trim.<ul> <li>See the Trimmomatic webpage for detailed instructions.</li> </ul> </li> <li>The default quality settings are sensible.</li> </ul>"},{"location":"modules/trimmomatic/#trim-poor-quality-leading-and-trailing-bases","title":"Trim poor quality leading and trailing bases","text":"<ul> <li>Trims bases from the start or end of a read if they drop below a certain quality.</li> <li>Use FastQC report to decide whether this step is warranted and what quality value to use.</li> <li>A quality threshold value of 10-15 is a good starting point.</li> </ul>"},{"location":"modules/trimmomatic/#trim-poor-quality-sections","title":"Trim poor quality sections","text":"<ul> <li>This function uses a sliding window to measure average quality and trims accordingly.</li> <li>The default quality parameters are sensible for this step.</li> </ul>"},{"location":"modules/trimmomatic/#trim-short-reads","title":"Trim short reads","text":"<ul> <li>Once all trimming steps are complete, this function makes sure that the reads are still longer than a specified minimum length.</li> <li>If not, the read is removed from the file and its pair is put into the orphan file.</li> <li>The most appropriate value for this parameter will depend on the FastQC report, specifically the length of the high quality section of the Per Base Sequence Quality graph.</li> <li>Each read library should be trimmed separately with parameters dependent on their own FastQC reports.</li> </ul>"},{"location":"modules/trimmomatic/#run-trimmomatic","title":"Run Trimmomatic","text":"<p>Go to Tools \u2192 NGS Analysis \u2192 NGS: QC and manipulation \u2192 Trimmomatic.</p> <ul> <li>Paired end data?: Yes</li> <li>Input Type: Pair of datasets</li> <li>Input FASTQ file (R1/first of pair): mutant_R1.fastq</li> <li>Input FASTQ file (R2/second of pair): mutant_R2.fastq</li> <li>Perform initial ILLUMINACLIP step : Yes</li> </ul> <ul> <li>How accurate the match between the two \u2018adapter ligated\u2019 reads must be for PE palindrome read alignment: 40</li> <li>How accurate the match between any adapter etc. sequence must be against a read: 15</li> <li>leave the first Trimmomatic Operation as is</li> <li>click on + Insert Trimmomatic Operation</li> <li>Select Trimmomatic operation to perform: Cut bases off the start of a read, if below a threshold quality (LEADING)</li> <li>Minimum quality required to keep a base: 15</li> <li>click on + Insert Trimmomatic Operation</li> <li>Select Trimmomatic operation to perform: Cut bases off the end of a read, if below a threshold quality (TRAILING)</li> <li>Minimum quality required to keep a base: 15</li> <li>click Execute</li> </ul>"},{"location":"modules/trimmomatic/#examine-output","title":"Examine output","text":"<p>Trimmomatic should produce 2 pairs files (1 left and 1 right hand end) and 1 or 2 single \u201corphaned reads\u201d files.</p> <p>The output files are the ones you should use for assembly.</p> <p>There are four output files, still in FASTQ format:</p> <ul> <li>R1 reads that have a pair in the R2 file</li> <li>R2 reads that have a pair in the R1 file</li> <li>R1 reads with no pair (R2 match was low quality: deleted)</li> <li>R2 reads with no pair (R1 match was low quality: deleted)</li> </ul> <p>Examine each file with the eye icon. Look for:</p> <ul> <li>Number of reads orphaned by the trimming / cleanup process.</li> <li>Number of pairs lost totally.</li> </ul>"},{"location":"modules/trimmomatic/#what-next","title":"What next?","text":"<p>Next: use the output FASTQ files for Assembly, e.g. with Spades</p>"},{"location":"modules/velvet/","title":"Genome assembly with Velvet","text":""},{"location":"modules/velvet/#assembly-using-velvet","title":"Assembly using Velvet","text":"<p>Keywords: de novo assembly, Velvet, Galaxy, Microbial Genomics Virtual Lab</p>"},{"location":"modules/velvet/#background","title":"Background","text":"<p>Velvet is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Velvet see this link.</p> <p>In this activity, we will perform a de novo assembly of a short read set using the Velvet assembler.</p>"},{"location":"modules/velvet/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>assemble the reads using Velvet, and</li> <li>examine the output assembly.</li> </ol>"},{"location":"modules/velvet/#import-and-view-data","title":"Import and view data","text":"<p>If you have completed the previous tutorial on Quality Control, you should already have the required files in your current Galaxy history. If not, see how to get them here.</p>"},{"location":"modules/velvet/#the-data","title":"The data","text":"<p>The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome. The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.</p> <ul> <li>The files we need for assembly are the mutant_R1.fastq and mutant_R2.fastq.</li> <li> <p>(We don\u2019t need the reference genome sequences for this tutorial).</p> </li> <li> <p>The reads are paired-end.</p> </li> <li> <p>Each read is 150 bases long. </p> </li> <li> <p>The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).</p> </li> </ul> <ul> <li>Click on the View Data button (the ) next to one of the FASTQ sequence files.</li> </ul>"},{"location":"modules/velvet/#assemble-reads-with-velvet","title":"Assemble reads with Velvet","text":"<ul> <li>We will perform a de novo assembly of the mutant FASTQ reads into long contiguous sequences (in FASTA format.)</li> <li>Velvet requires the user to input a value of k for the assembly process. K-mers are fragments of sequence reads. Small k-mers will give greater connectivity, but large k-mers will give better specificity.</li> </ul> <ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: Assembly \u2192 velvet</li> <li> <p>Set the following parameters (leave other settings as they are):</p> <ul> <li>K-mer: Enter the value for k that you have been assigned in the spreadsheet.</li> </ul> <ul> <li>Input file type: Fastq</li> <li>Single or paired end reads: Paired</li> <li> Select first set of reads: mutant_R1.fastq </li> <li> Select second set of reads: mutant_R2.fastq</li> </ul> </li> <li> <p>Your tool interface should look like this (you will most likely have a different value for k):</p> </li> </ul> <p></p> <ul> <li>Click Execute</li> </ul>"},{"location":"modules/velvet/#examine-the-output","title":"Examine the output","text":"<ul> <li>Galaxy is now running velvet on the reads for you.</li> <li>Press the refresh button in the history pane to see if it has finished.</li> <li> <p>When it is finished, you will have four new files in your history.  </p> <ul> <li>a Contigs file</li> <li>a Contigs stats file</li> <li>the velvet log file</li> <li>an assembly Last Graph file</li> </ul> </li> <li> <p>Click on the View Data button  on each of the files.</p> </li> <li> <p>The Contigs file will show each contig with the k-mer length and k-mer coverage listed as part of the header (however, these are just called length and coverage).</p> <ul> <li>K-mer length: For the value of k chosen in the assembly, a measure of how many k-mers overlap (by 1 bp each overlap) to give this length.</li> <li>K-mer coverage: For the value of k chosen in the assembly, a measure of how many k-mers overlap each base position (in the assembly).</li> </ul> </li> </ul> <p></p> <ul> <li>The Contigs stats file will show a list of these k-mer lengths and k-mer coverages.</li> </ul> <p></p> <ul> <li>We will summarise the information in the log file.</li> <li>Go to NGS Common Toolsets \u2192 FASTA manipulation \u2192 Fasta statistics</li> <li>For the required input file, choose the velvet Contigs file.</li> <li>Click Execute.</li> <li>A new file will appear called Fasta summary stats</li> <li>Click the eye icon to look at this file.</li> </ul> <p></p> <ul> <li>Look at:<ul> <li>num_seq: the number of contigs in the FASTA file.</li> <li>num_bp: the number of assembled bases. Roughly proportional to genome size.</li> <li>len_max: the biggest contig.  </li> <li>len_N50: N50 is a contig size. If contigs were ordered from small to large, half of all the nucleotides will be in contigs this size or larger.</li> </ul> </li> </ul> <p>Now copy the relevant data back into the k-mer spreadsheet on your line.</p> <p>Along with the demonstrator, have a look at the effect of the k-mer size on the output metrics of the assembly. Note that there are local maxima and minima in the charts.</p>"},{"location":"modules/velvet/#assembly-with-velvet-optimiser","title":"Assembly with Velvet Optimiser","text":"<p>Now that we have seen the effect of k-mer size on the assembly, we will run the Velvet Optimiser to automatically choose the best k-mer size for us. It will use the \u201cn50\u201d to determine the best k-mer value to use. It then performs the further graph cleaning steps and automatically chooses other parameters for velvet. We should get a much better assembly result than we did with our attempts with Velvet alone.</p> <ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: Assembly \u2192 Velvet Optimiser<ul> <li> <p>Set the following parameters (leave other settings as they are):</p> <ul> <li>Start k-mer size: 45</li> <li>End k-mer size: 73</li> <li>Input file type: Fastq</li> <li>Single or paired end reads: Paired</li> <li> Select first set of reads: mutant_R1.fastq </li> <li> <p> Select second set of reads: mutant_R2.fastq</p> </li> <li> <p>Click Execute</p> </li> </ul> </li> </ul> </li> </ul> <p>Use the Fasta Statistics tool you used earlier to summarise the Velvet Optimiser Contigs output. Examine the resulting table. What are the main differences?</p>"},{"location":"modules/viral_genomes/","title":"Viral genome sequencing","text":""},{"location":"modules/viral_genomes/#viral-genome-sequencing","title":"Viral Genome Sequencing","text":"<p>This tutorial is about determining the genome sequence of a virus, using comparisons to a reference sequence.</p>"},{"location":"modules/viral_genomes/#background","title":"Background","text":"<p>Murray Valley encephalitis virus is classified as part of the Flavivirus genus of viruses, all of which are positive strand RNA viruses. The type species for this genus is yellow fever virus, and the genus includes dengue virus, west nile virus and zika virus.</p> <p>Viruses from this genus have a single-segment genome of about 11 kb. Within this, there is a 10 kb open reading frame that encodes a polyprotein. Following translation, this protein is modified to yield the various, mature structural and non-structural viral proteins as illustrated in Fig. 1.</p> <p></p> <p>Fig. 1 - An overview of a typical flavivirus genome and the viral proteins that are part of the viral polyprotein (from Viralzone).</p> <p>There are 14 complete Murray Valley encephalitis virus genome sequences available at NCBI Viral Genomes.</p> <ul> <li>Go to NCBI Viral Genomes.</li> <li>Select Browse viral genomes by family and click on the family Flaviviridae: Complete Genomes</li> <li>Note: you may have to widen your screen to see all the columns of viral family names.</li> </ul> <p></p> <ul> <li>Look at the row for Murray Valley encephelitis virus. In the Neigbours column, we can see there are 14.</li> </ul> <p>In this tutorial we will use the prototype strain 1-151 as the reference genome sequence.</p> <ul> <li>This strain was isolated in the early 1950s - see AF161266.</li> </ul> <p>The isolate we are looking at has been sequenced using the Illumina platform.</p> <ul> <li>The genomic cDNA was prepared using random hexamers to prime the reverse transcription of the viral genomic RNA.</li> <li>After second strand synthesis, the cDNA was used to prepare an Illumina sequencing library and run on an Illumina MiSeq instrument.</li> </ul> <p>In this activity we will use a read mapping approach to determine the sequence of a new Murray Valley encephalitis virus isolate.</p>"},{"location":"modules/viral_genomes/#import-data","title":"Import data","text":""},{"location":"modules/viral_genomes/#section-overview","title":"Section overview:","text":"<ul> <li>Log in to your Galaxy server</li> <li>Import files required for the activity</li> <li>View imported files</li> </ul>"},{"location":"modules/viral_genomes/#go-to-the-galaxy-page","title":"Go to the Galaxy Page","text":"<ul> <li>Web address: http://phln.genome.edu.au/galaxy</li> <li>Remind me how to logon</li> </ul>"},{"location":"modules/viral_genomes/#import-files-to-galaxy","title":"Import files to Galaxy","text":"<ul> <li>Click on the Analyze Data menu at the top of the page.</li> <li>Click on the History menu button (the  on the top right of the history pane)</li> <li>Click Import from File (at the bottom of the list)</li> <li>A new page will appear with a text box for the URL of the history to import.</li> <li>Copy the following URL into the text box:</li> <li> <p>http://phln.genome.edu.au/public/dieter/Galaxy-History-MVEVmapping.tar.gz</p> </li> <li> <p>Click Submit</p> </li> <li>Galaxy will download the data files from the internet and will be available as an additional history (takes about one minute).</li> </ul>"},{"location":"modules/viral_genomes/#to-make-the-newly-imported-history-appear-as-the-current-history","title":"To make the newly imported history appear as the current history:","text":"<ul> <li>Click on the View all Histories button (the  on the top right of the history pane.)</li> <li>If the history has finished downloading it will appear with the title:</li> <li>\u201cimported from archive: MVEVmapping\u201c</li> <li>Click on the Switch to button above this history and then the Done button.</li> </ul> <p>You should now have 4 files in the history pane as follows:</p> <p></p> <p>Reference sequence files  :</p> <ul> <li>MVEV.gbk - genbank format</li> <li>MVEV.fna - fasta format</li> </ul> <p>Illumina sequence reads (R1 and R2) from the new isolate:</p> <ul> <li>MVE_R1.fq - forward reads</li> <li>MVE_R2.fq - reverse reads</li> </ul>"},{"location":"modules/viral_genomes/#snippy","title":"Snippy","text":""},{"location":"modules/viral_genomes/#section-overview_1","title":"Section overview:","text":"<ul> <li>Find variants in the isolate using the tool Snippy.</li> </ul> <p>Snippy is a fast variant caller for haploid genomes. The software is available on GitHub at https://github.com/tseemann/snippy. For this activity, we are using Snippy as installed on Galaxy.</p>"},{"location":"modules/viral_genomes/#preliminary-activity","title":"Preliminary Activity","text":"<ul> <li> <p>Run FastQC: How many reads in in each of the fastq files MVE_R1.fq and MVE_R2.fq?</p> </li> <li> <p>MVEV.fna and MVEV.gbk each contain the genome sequence of Murray Valley encephalitis virus strain 1-151 - how many bases in the genome? (Hint: use Fasta Statistics)</p> </li> </ul>"},{"location":"modules/viral_genomes/#running-snippy","title":"Running Snippy","text":"<p>Snippy maps reads from the new Murray Valley encephalitis virus isolate (the MVE_R1.fq and MVE_R2.fq reads) onto the genome sequence of Murray Valley encephalitis virus strain 1-151 (MVEV.fna). </p> <ul> <li>Find Snippy in the tool menu (in  NGS: Variant Analysis)</li> <li>Select appropriate files (see screenshot below) and Execute (use default settings).</li> </ul> <p></p>"},{"location":"modules/viral_genomes/#output","title":"Output","text":"<p>Files cataloging SNP differences:</p> <ul> <li>9: snippy on data 4, data 3, and data 2 snps vcf file</li> <li>10: snippy on data 4, data 3, and data 2 snps gff file</li> <li>11: snippy on data 4, data 3, and data 2 snps table</li> <li>12: snippy on data 4, data 3, and data 2 snps summary</li> </ul> <p>A log of the progress of the run:</p> <ul> <li>13: snippy on data 4, data 3, and data 2 log file</li> </ul> <p>Regions where reads aligned (NNNN \u2014, indicate regions where there was low or no read data):</p> <ul> <li>14: snippy on data 4, data 3, and data 2 aligned fasta</li> </ul> <p>A consensus genome sequence for the new isolate:</p> <ul> <li>15: snippy on data 4, data 3, and data 2 consensus fasta</li> </ul> <p>Summary of the read depth:</p> <ul> <li>16: snippy on data 4, data 3, and data 2 mapping depth</li> </ul> <p>A compressed version of the above files (and more that can be downloaded):</p> <ul> <li>17: snippy on data 4, data 3, and data 2 out dir</li> </ul> <p>Download these files to your local computer (click on the file name and then the disk icon in the lower left hand corner):</p> <ul> <li>17: snippy on data 4, data 3, and data 2 out dir (and unzip)</li> <li>2: MVEV.gbk</li> <li>1: MVEV.fna</li> </ul> <p>Also download these bam files from these URLs (open each URL in a new tab and the file should download automatically):</p> <ul> <li>http://phln.genome.edu.au/public/dieter/snps.bam</li> <li>http://phln.genome.edu.au/public/dieter/snps.bam.bai</li> <li>http://phln.genome.edu.au/public/dieter/snps.depth.gz</li> <li>http://phln.genome.edu.au/public/dieter/snps.depth.gz.tbi</li> </ul> <p>Note: if you have previously downloaded these files, the new downloads may be renamed. Remove any spaces in the names.</p>"},{"location":"modules/viral_genomes/#artemis","title":"Artemis","text":""},{"location":"modules/viral_genomes/#section-overview_2","title":"Section overview:","text":"<ul> <li>View the reads from the new isolate mapped against the reference sequence, using the tool Artemis.</li> </ul> <p>Artemis is a tool to view genome sequences and mapped reads, including variants (SNPs).</p> <p>If Artemis is not installed, go to http://www.sanger.ac.uk/science/tools/artemis.</p>"},{"location":"modules/viral_genomes/#view-the-reference-sequence","title":"View the reference sequence","text":"<ul> <li>Open Artemis.</li> <li>Go to File: Open and select MVEV.gbk. The file will probably have a \u201cGalaxy\u201d prefix, e.g. Galaxy2-[MVEV.gbk].genbank.</li> </ul>"},{"location":"modules/viral_genomes/#the-artemis-window","title":"The Artemis window:","text":"<ul> <li>panes 1 and 2 are the same, but can be scaled differently</li> <li>each pane has the double-stranded sequence in the centre, with amino acid translations above and below</li> <li>there is a third lower pane with feature information</li> <li>coding sequences are highlighted in blue</li> <li>other features are highlighted in green</li> <li>clicking on one of these will select it in all panels</li> <li>black vertical lines are stop codons (when zoomed out)</li> <li>move left and right with horizontal scroll bar</li> <li>zoom in and out with right-hand scroll bar</li> </ul>"},{"location":"modules/viral_genomes/#add-a-plot","title":"Add a plot","text":"<ul> <li>Go to Graph: Add User Plot, select snps.depth.gz</li> <li>A graph should display at the top of the screen </li> </ul>"},{"location":"modules/viral_genomes/#producing-a-draft-genome-sequence","title":"Producing a draft genome sequence","text":""},{"location":"modules/viral_genomes/#section-overview_3","title":"Section overview:","text":"<ul> <li>Produce draft genome sequence for the new viral isolate.</li> </ul>"},{"location":"modules/viral_genomes/#examine-the-mapped-reads","title":"Examine the mapped reads","text":"<p>What is the minimum read depth used by Snippy to call a SNP?</p> <ul> <li>Hint: Go back to Snippy on Galaxy - look at the information below the \u2018Execute\u2019 button</li> </ul> <p>Would Snippy call a SNP at positions 1 \u2192 5 ?</p> <p>What is the maximum read depth?</p> <p>What do we know about the sequence of the new isolate in the regions where there is low read coverage?</p> <ul> <li>Unzip 17: snippy on data 4, data 3, and data 2 out dir</li> <li> <p>This makes an \u201cout\u201d folder containing some files including the consensus file.</p> </li> <li> <p>In Artemis, open snps.consensus.fa</p> </li> </ul> <p>This is a file that is based on the reference sequence and includes any confirmed SNPs called by Snippy.</p> <p>If we were going to use this sequence to produce the draft sequence of the new isolate, what bases would you have at positions 1\u2192 5?</p>"},{"location":"modules/viral_genomes/#getting-an-overview-of-the-difference-between-strain-1-151-and-our-new-isolate","title":"Getting an Overview of the Difference between strain 1-151 and our new isolate","text":"<p>Simplest overview: view the bam file with Artemis</p> <p>Open MVEV.gbk in Artemis and load the snps.bam via the File menu to \u201cRead BAM / VCF\u201d</p> <p>Once loaded, differences between reads and the reference sequence can be highlighted by right/command click in the bam view window. Select \u2018Show &gt; SNP marks\u2019.</p> <p></p>"},{"location":"modules/viral_genomes/#getting-more-detail-looking-at-the-table-of-snps","title":"Getting more detail: looking at the table of SNPs","text":"<p>Located in the out folder there is a html file that contains a table with information about each of the SNPs called by Snippy.</p> <p>Included in the table is a column that provides a prediction about the impact each SNP will have on annotated protein coding regions. The genbank file provides the annotation information used by Snippy to make the predictions.</p> <p>A total of 790 SNP differences were call by Snippy</p> <p>Open snps.html in your web browser</p> <p>Summary: 663/790 SNPs do not result a difference in the encoded polyprotein</p> <p>Is this pattern of variable genome sequence and more conserved protein sequence normal in viruses? What might be the cause?</p>"},{"location":"modules/workflow-pear-trim/","title":"QC and assembly workflow","text":"<p>Run FastQC on R1 and R2.</p> <p>Look at results - webpage.</p> <p>Pear</p> <p>Trimmomatic</p> <p>Assembly</p>"},{"location":"modules/workflow-pear-trim/#trimmomatic","title":"Trimmomatic","text":"<p>Settings:  trimmed leading and trailing - qual 15  sliding window 4 - 20</p> <p>did for F, R, merged</p> <p>all - can see file size dropped so some were trimmed</p>"},{"location":"modules/workflow-pear-trim/#spades","title":"Spades","text":"<p>put all these trimmomatic files in as \u201cunpaired/single reads\u201d</p>"},{"location":"modules/workflow-pear-trim/#compare-to-no-pear-trimmomatic-spades","title":"Compare to no pear + trimmomatic + spades","text":"<p>vs Assembly only</p>"},{"location":"modules/workflows/","title":"Galaxy workflows","text":""},{"location":"modules/workflows/#galaxy-workflows","title":"Galaxy workflows","text":"<p>This tutorial assumes you have used Galaxy before.</p> <p>Although we can use tools in Galaxy to analyse data and create a history, there is also a way to create a workflow of files, tools, settings and outputs. You can then input different datasets and run the workflow.</p> <p>This tutorial covers building a workflow to analyse a bacterial genome, from input Fastq sequencing reads to assembly, annotation, and visualization.</p>"},{"location":"modules/workflows/#start","title":"Start","text":"<p>Go to your Galaxy instance and Register/Login.</p> <p>Import a history of data files:</p> <ul> <li>Click on the History cog </li> <li>Select Import from File</li> <li>In the box called Archived History URL, paste in this link address to the Galaxy history of input files:</li> </ul> <p>https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Microbial_tutorials/Galaxy_history_input_files.tar.gz</p> <ul> <li>Click Submit</li> <li>Wait a few seconds.</li> <li>Click on the \u201cView all histories\u201d button </li> <li>See if the Galaxy history has been imported: it will be called imported from archive: Data</li> <li>Above that pane, click on the Switch to button.</li> <li>Then click Done (in the top left corner).</li> <li> <p>You should now have a list of five files in your current history.</p> </li> <li> <p>Re-name this history \u201cWorkflows\u201d.</p> </li> </ul>"},{"location":"modules/workflows/#build-a-workflow","title":"Build a workflow","text":"<p>We will first write a workflow for genome assembly.</p> <ul> <li>In the top menu bar in Galaxy, click on \u201cWorkflow\u201d.</li> </ul> <p></p> <ul> <li>Click on Create new workflow</li> </ul> <p></p> <ul> <li> <p>Under Workflow Name: put in \u201cReads to Annotation\u201d.</p> </li> <li> <p>Click Create</p> </li> <li> <p>This will bring up the \u201cWorkflow Canvas\u201d, a grid where you can arrange the workflow.</p> </li> </ul>"},{"location":"modules/workflows/#add-inputs","title":"Add inputs","text":"<ul> <li> <p>In the Tools panel, click Inputs: Input datset twice (at the very top of the list).</p> </li> <li> <p>A box will appear: drag it to the left and there will be another box underneath it. Drag this also to the left. Your workflow canvas should look like this:</p> </li> </ul> <p></p> <ul> <li>Click on the first box. Look in the right hand panel (now called \u201cDetails\u201d) and change the name of the Input dataset to R1.fastq. Press Enter for the change to be saved.</li> </ul> <p></p> <ul> <li>Repeat for the second input dataset box, naming that one R2.fastq.</li> </ul>"},{"location":"modules/workflows/#add-the-tool-spades","title":"Add the tool \u201cspades\u201d","text":"<ul> <li>In the tools panel, click on NGS Analysis: NGS Assembly: spades. This puts the spades box onto the workflow canvas.</li> </ul> <ul> <li> <p>Click on the spades box and look in the Details pane on the right. This shows all the options in spades. Choose:</p> </li> <li> <p>Run only Assembly: Yes [the Yes button should be darker grey]</p> </li> <li>Kmers to use separated by commas: 33,55,91  [note: no spaces]  </li> <li>Coverage cutoff: auto </li> </ul>"},{"location":"modules/workflows/#join-inputs-to-the-tool","title":"Join inputs to the tool","text":"<p>Now tell spades which input files to use.</p> <ul> <li> <p>Look at the input dataset box called R1.fastq and find the small arrow: &gt;</p> </li> <li> <p>Click on this and drag the arrow over to the spades box input arrow &gt; next to \u201cLibraries 1 &gt; Files 1 &gt; Forward reads\u201d.</p> </li> </ul> <p></p> <ul> <li>Repeat for the dataset box R2.fastq, joining to the spades box next to \u201cLibraries 1 &gt; Files 1 &gt; Reverse reads\u201d.</li> </ul>"},{"location":"modules/workflows/#save-it-and-run","title":"Save it and run","text":"<ul> <li>Click on the cog at the top right of the workflow canvas and \u201cSave\u201d.</li> </ul> <ul> <li> <p>Click the cog again and choose \u201cRun\u201d.</p> </li> <li> <p>This brings up a window where you specify the input datasets to use in the workflow.</p> <ul> <li>Under Step1: Input dataset choose mutant_R1.fastq.</li> <li>Under Step2: Input dataset choose mutant_R2.fastq.</li> </ul> </li> <li> <p>Click Run workflow.</p> </li> </ul> <p>This will run the workflow (spades) and save the output to the top of your current history in the right hand panel.</p> <ul> <li>View some of the output files with the eye icon to check that the workflow (in this case, just spades) ran correctly.</li> </ul>"},{"location":"modules/workflows/#add-to-the-worfklow","title":"Add to the worfklow","text":"<p>We will add another tool to the workflow.</p> <ul> <li> <p>Go to the top Galaxy panel and click \u201cWorkflow\u201d.</p> </li> <li> <p>Your workflow Reads to Annotation should be in the list. Click on the drop-down arrow next to this workflow and choose Edit.</p> </li> <li> <p>This will bring up the Workflow Canvas where we can add more inputs and tools.</p> </li> <li> <p>In the Tools panel, click on NGS Annotation: Prokka. This will add a Prokka box to the workflow canvas.</p> </li> <li> <p>We need to tell Prokka which genome assembly) to annotate. Join the spades output called out_contigs(fasta) to the Prokka input called Contigs to annotate.</p> </li> </ul> <p></p> <ul> <li> <p>Click on the Prokka box and change some of the settings in the right hand Details panel:</p> <ul> <li>Set the following parameters (leave everything else unchanged):</li> <li>Locus tag prefix (\u2013locustag): P</li> <li>Force GenBank/ENA/DDJB compliance (\u2013compliant): No</li> <li>Sequencing Centre ID (\u2013centre): V</li> <li>Use genus-specific BLAST database No </li> </ul> </li> <li> <p>Click on the cog to the top right of the workflow canvas to save.</p> </li> <li> <p>Click on the cog again to run.</p> <ul> <li>Again, choose the input files: mutant_R1.fastq and mutant_R2.fastq, and then click Run workflow.</li> </ul> </li> <li> <p>The output from the workflow (files from spades and prokka) will appear at the top of the History panel.</p> </li> <li> <p>Click on the eye icon for some files to verify the workflow ran correctly.      </p> </li> </ul>"},{"location":"modules/workflows/#add-more-to-the-workflow","title":"Add more to the workflow","text":"<p>We will add a visualization tool to view the genome annotation.</p> <ul> <li> <p>Go to the top Galaxy panel and click \u201cWorkflow\u201d.</p> </li> <li> <p>Your workflow Reads to Annotation should be in the list. Click on the drop-down arrow next to this workflow and choose Edit.</p> </li> <li> <p>This will bring up the Workflow Canvas where we can add more inputs and tools.</p> </li> <li> <p>In the Tools panel, click on Statistics and Visualisation: Graph/Display Data: JBrowse. This will add a JBrowse box to the workflow canvas.</p> </li> <li> <p>Click on the JBrowse box. In the Details pane:</p> <ul> <li> <p>Under JBrowse-in-Galaxy Action choose New JBrowse Instance.</p> </li> <li> <p>Under Reference genome to display choose Use a genome from history.</p> </li> <li> <p>For Produce a Standalone Instance select Yes.</p> </li> <li> <p>For Genetic Code choose 11: The Bacterial, Archaeal and Plant Plastid Code.</p> </li> <li> <p>Click Insert Track Group</p> </li> <li> <p>Under Track Category type in gene annotations.</p> </li> <li> <p>Click Insert Annotation Track</p> </li> <li> <p>For Track Type choose GFF/GFF3/BED/GBK Features</p> </li> <li> <p>Under JBrowse Track Type[Advanced] select Canvas Features.</p> </li> <li> <p>Click on JBrowse Styling Options &lt;Advanced]</p> </li> <li> <p>Under JBrowse style.label correct the word \u201cprodcut\u201d to \u201cproduct\u201d.</p> </li> <li> <p>Under Track Visibility choose On for new users.</p> </li> </ul> </li> <li> <p>Now we need to tell JBrowse the input files to use.</p> <ul> <li> <p>Join the Prokka output out_fna (fasta) to the JBrowse input Fasta sequences</p> </li> <li> <p>Join the Prokka output out_gff (gff) to the JBrowse input Track Group 1\u2026</p> </li> </ul> </li> </ul> <p></p> <ul> <li> <p>Click on the cog to save; again to run; choose input files; Run workflow; examine output files in current history.</p> </li> <li> <p>The workflow will now assemble and annotate the genome, and create a JBrowse view of the annotations.</p> </li> <li> <p>JBrowse will produce one output file.</p> <ul> <li>Click on the eye icon to view.</li> <li>In the centre drop down box, choose contig 6.</li> <li>Under \u201cAvailable Tracks\u201d on the left, tick the boxes.</li> <li>Zoom in and out with the plus and minus icons.</li> <li>The blue blocks are the genome annotations.</li> </ul> </li> </ul> <p></p>"},{"location":"modules/workflows/#summary","title":"Summary","text":"<ul> <li> <p>Our workflow is now:</p> <ul> <li>Fastq sequence reads to Spades for assembly</li> <li>Spades contigs fasta file to Prokka for annotation</li> <li>Prokka fasta file and .gff file to JBrowse for visualisation.</li> </ul> </li> <li> <p>We can re-run this workflow with different input Fastq files.</p> </li> </ul>"},{"location":"modules/workflows/#other-workflow-options","title":"Other workflow options","text":""},{"location":"modules/workflows/#saving-outputs","title":"Saving outputs","text":"<p>To save only some output files:</p> <ul> <li>Go to the workflow canvas.</li> <li>Find the star next to the outputs.</li> <li>Click on the star for any outputs you want to save.</li> </ul> <p></p> <p>To save these starred files from the workflow output as a new history:</p> <ul> <li>Before you click Run workflow, tick the box above to Send results to a new history.</li> </ul>"},{"location":"modules/workflows/#import-a-workflow","title":"Import a workflow","text":"<p>To import an existing Galaxy Workflow:</p> <ul> <li>Go to the Workflow tab in the top panel.</li> <li>At the top right, click on Upload or import workflow.</li> </ul>"},{"location":"modules/workflows/#extract-a-workflow","title":"Extract a workflow","text":"<p>You can extract a workflow from an existing Galaxy history.</p> <ul> <li>Go to your Galaxy history</li> <li>Click on the History cog icon and choose \u201cExtract Workflow\u201d.</li> <li>Give it a name and click Create Workflow.</li> <li>To edit, go to the Workflow tab, select the workflow, and choose \u201cEdit\u201d from the drop down menu. You can then edit the steps on the Workflow Canvas.</li> </ul>"},{"location":"modules/workflows/#a-note-on-workflow-tabs","title":"A note on workflow tabs","text":"<p>We have been using the top Workflow tab. There is another tab at the bottom of the tool panel called Workflows. Click on Workflows: All Workflows. This gives a similar view with a list of workflows, and you can also click on the top right tab \u201cswitch to workflow management view\u201d.</p> <p>To return to the main Galaxy window click on the Analyze Data tab in the top panel.</p>"},{"location":"modules/workflows/#links","title":"Links","text":"<p>Introduction to workflows: https://wiki.galaxyproject.org/Learn/AdvancedWorkflow</p> <p>Another tutorial on workflows: http://vlsci.github.io/lscc_docs/tutorials/galaxy-workflows/galaxy-workflows/</p> <p>Galaxy published workflows: https://usegalaxy.org/workflow/list_published</p>"},{"location":"modules/workshop_overview/","title":"Genomics workshop overview","text":""},{"location":"modules/workshop_overview/#genomics","title":"Genomics","text":"<p>The tutorials listed here under the Genomics tab include a set that can be run as a Genomics Workshop.</p>"},{"location":"modules/workshop_overview/#genomics-workshop","title":"Genomics workshop","text":"<ul> <li> <p>The modules in this workshop cover microbial genomics, from assembly to annotation and variant calling:</p> <ul> <li>Starting with Galaxy</li> <li>Training dataset</li> <li>Quality control</li> <li>Genome assembly with two tools - Velvet and Spades</li> <li>Genome annotation</li> <li>Variant finding</li> </ul> </li> <li> <p>The analyses are conducted on the Galaxy platform, and links to training data are provided.</p> </li> <li> <p>These modules can be delivered to a group workshop or used online independently.</p> </li> <li> <p>If you have not yet used the Galaxy platform, we recommend following the modules in order.</p> </li> <li> <p>If you are using these tutorials outside of a workshop and need access to Galaxy, you can follow the instructions on the homepage here to obtain your own mGVL instance with Galaxy and command line tools.</p> </li> </ul>"},{"location":"modules/workshop_overview/#other-genomics-tutorials","title":"Other Genomics tutorials","text":"<ul> <li>There are also additional tutorials listed under the \u201cGenomics\u201d tab (such as PacBio assembly), but these may require different data sets and tools.</li> </ul>"},{"location":"modules/xcms/","title":"Metabolite identification","text":""},{"location":"modules/xcms/#metabolomics-with-xcms","title":"Metabolomics with XCMS","text":""},{"location":"modules/xcms/#overview","title":"Overview","text":"<p>Metabolomics is the study of metabolites: small molecules (smaller than proteins) produced by organisms. One technique to identify and quantify metabolites is LC/MS (liquid chromatography-mass spectrometry).</p> <p>In liquid chromatography, metabolites are sent through a column and are separated by various chemical properties.</p> <ul> <li>At each time point, the abundance of the particular group of metabolites is measured (the intensity).</li> <li>This is called a chromatogram:</li> </ul> <p></p> <p>image: C Wenger, Wikipedia</p> <p>At each time point in this chromatogram, the group of metabolites is then ionized (charged) and fired through a mass spectrometer.</p> <ul> <li>These are separated based on their mass-to-charge ratio.</li> <li>This adds another dimension to the graph: an axis with the mass-to-charge ratio of the metabolites found at that time point, and their intensities.</li> </ul> <p></p> <p>image: Daniel Norena-Caro, Wikipedia.</p> <p>There are multiple mass spectra. Each spectrum is often simplified into a graph of peaks only (local maxima):</p> <p></p> <p>image: Wikipedia.</p> <ul> <li>Each of these peaks is a \u201cfeature\u201d: an ion with a unique m/z and retention time.</li> <li>These masses can then be matched to a database to identify the metabolites.</li> </ul> <p>A common aim is to compare metabolites between two samples (e.g. two different bacterial strains), and from there, to understand which biological pathways may be up- or down-regulated.</p> <p>In this tutorial, we will use a platform called \u201cXCMS online\u201d to analyse metabolite data.</p> <ul> <li>Input: raw data from mass spectrometry</li> <li>Output: identified metabolites, and a comparison of their abundances between samples.</li> </ul>"},{"location":"modules/xcms/#xcms","title":"XCMS","text":"<p>Go to: https://xcmsonline.scripps.edu and sign up.</p> <p></p>"},{"location":"modules/xcms/#get-data","title":"Get data","text":"<p>The data we will use today is from two bacterial strains of Klebsiella pneumoniae.</p> <ul> <li>strain AJ218 - 6 replicates</li> <li>strain KPC2 (antibiotic resistance) - 6 replicates</li> </ul> <p>The raw data output from the mass spectrometer are points in a 3D graph: intensity, m/z, time (retention time).</p> <p>Download these files to your local computer.</p> <p>Data format:</p> <ul> <li> <p>We will use .mzML format. </p> </li> <li> <p>The machine used to produced this data originally produced .d files. These have been converted into .mzML format using the Proteowizard MSConvert program.</p> </li> </ul> <p>To use Proteowizard: (Windows only)</p> <ul> <li>Download the program and open the MSConvert program.</li> <li>Browse. Add files.</li> <li>Change output format to .mzML</li> <li>Leave default settings.</li> <li>Click Start in the bottom right hand corner.</li> </ul> <p>An alternative is the commercially-available Qualitative Analysis Software.</p>"},{"location":"modules/xcms/#upload-data","title":"Upload data","text":"<p>In the top panel, go to Stored Datasets. We will upload some data here.</p> <p></p> <ul> <li> <p>Drag the .mzML files into the Drop Here box - 6 replicates for each strain.</p> </li> <li> <p>Wait until all files have a green tick (scroll down to check all).</p> </li> <li>Name the datset (e.g. Sample AJ218 or Sample KPC2) and click Save.</li> <li>Click Save Dataset &amp; Proceed.</li> </ul> <p></p> <p>Repeat with the second strain.</p>"},{"location":"modules/xcms/#set-up-job","title":"Set up job","text":"<p>In the top panel, click on Create Job and select Pairwise Job.</p> <p></p> <p>On the right hand side, under Job Summary, Job Name: click Edit, enter job name: e.g. Klebsiella, and then click Save.</p> <p>Under Dataset 1 click on Select Dataset.</p> <ul> <li>Choose AJ218.</li> </ul> <p>Under Dataset 2 click on Select Dataset.</p> <ul> <li>Choose KPC2.</li> </ul> <p>We now need to set parameters that correspond with the machine on which the data was generated. In a typical analysis, we would look at the raw output files and examine the chromatograms and mass spectra to inform some of the settings. Here we have chosen appropriate settings for this data set.</p> <p>Under Parameters select HPLC / UHD Q-TOF (HILIC, neg. mode).</p> <ul> <li>Click View/Edit.</li> <li>This brings up a window to change some settings.</li> </ul> <p></p>"},{"location":"modules/xcms/#general","title":"General","text":"<ul> <li>First, click Create New in the bottom right hand corner.</li> <li>Give it a name. e.g. Agilent 6545</li> <li>(Don\u2019t click Save Current yet).</li> <li>Retention time format: seconds</li> <li>Polarity: negative</li> </ul> <p>See the tabs along the top: we will change some of these settings.</p>"},{"location":"modules/xcms/#feature-detection","title":"Feature Detection","text":"<p>This is to adjust for noise in the centroid data.</p> <ul> <li>Method: centWave</li> <li>ppm: 50</li> <li>minimum peak width: 10</li> <li>maximum peak width: 50</li> </ul>"},{"location":"modules/xcms/#retention-time-correction","title":"Retention time correction","text":"<p>This is to correct the shift that occurs as the run progresses.</p> <ul> <li>Method: obiwarp</li> <li>profStep: 0.1</li> </ul>"},{"location":"modules/xcms/#alignment","title":"Alignment","text":"<p>This is to align spectra after retention time correction.</p> <ul> <li>mzwid: 0.5</li> <li>minfrac: 0.5</li> <li>bw: 20</li> </ul>"},{"location":"modules/xcms/#statistics","title":"Statistics","text":"<p>Set up the statistical test for the metabolites from two strains.</p> <ul> <li>Statistical test: Unpaired non-parametric (Mann-Whitney)</li> </ul>"},{"location":"modules/xcms/#annotation","title":"Annotation","text":"<ul> <li>Search for: isotopes + adducts</li> <li>m/z absolute error: 0.05</li> <li>ppm: 50</li> </ul>"},{"location":"modules/xcms/#identification","title":"Identification","text":"<ul> <li>ppm: 50</li> <li>adducts: [M-H]-</li> <li>sample biosource: Select biosource. Search: K pneumo. Select the top strain.</li> <li>pathway ppm deviation: 5</li> </ul>"},{"location":"modules/xcms/#visualization","title":"Visualization","text":"<ul> <li>EIC width: 200</li> </ul>"},{"location":"modules/xcms/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Bypass file sanity check: tick</li> </ul>"},{"location":"modules/xcms/#next","title":"Next","text":"<ul> <li>Save Current</li> <li>Submit Job</li> </ul> <p>This will now bring up the \u201cView Results\u201d page.</p> <ul> <li>The current job will be listed as \u201cProcessing\u201d with a % completion bar.</li> <li>The time taken will depend on server load.</li> </ul>"},{"location":"modules/xcms/#view-results","title":"View results","text":"<p>Click on View.</p> <p>There are six graphs, and options for other results in the left hand panel.</p> <p></p>"},{"location":"modules/xcms/#ions-detected","title":"Ions detected","text":"<p>Look at the top three graphs.</p> <ul> <li> <p>Graph 1: Total ion Chromatograms (original):</p> <ul> <li>All the ions detected. Their intensity vs retention time.</li> </ul> </li> <li> <p>Graph 2: Retention Time Deviation vs. Retention Time:</p> <ul> <li>A graph showing the correction curve.</li> </ul> </li> <li> <p>Graph 3: Total ion Chromatograms (corrected):</p> <ul> <li>A corrected version of graph 1.</li> </ul> </li> </ul>"},{"location":"modules/xcms/#sample-information","title":"Sample information","text":"<ul> <li> <p>Graphs 5 and 6 show MDS (Multi-dimensional Scaling) and PCA (Principal Components Analysis) results.</p> <ul> <li>Are the samples separated well?</li> <li>Samples (or conditions) should be separated into two groups.</li> <li>For a more detailed examination, click on \u201ciPCA\u201d in the left hand panel.</li> </ul> </li> </ul>"},{"location":"modules/xcms/#results-table","title":"Results Table","text":"<p>Click on the Results Table in the left hand panel. This is a table of \u201cfeatures\u201d - a feature is an ion with unique m/z and retention time.</p> <ul> <li>Click on a row (a feature) to display associated graphs in the right-hand panel.</li> </ul> <p></p> <ul> <li>The METLIN database contains data on metabolites, their mass, and their known and predicted fragment masses.</li> </ul> <p>To filter the table, click on the small magnifying glass:</p> <p></p> <ul> <li>Filter by p-value or fold change (or both).</li> <li>e.g. p-value less or equal to 0.01, fold change greater than 30</li> <li>Investigate these features and the identified matches in the Metlin database.</li> </ul>"},{"location":"modules/xcms/#cloud-plot","title":"Cloud plot","text":"<p>In the results pane on the left, click on Metabolomic Cloud Plot.</p> <ul> <li>A cloud plot shows the features (m/z and retention time) as dots/circles.</li> <li>The size of the circles is relative to their fold change.</li> <li>Features are shown as either up- or down-regulated, by their position above or below the 0-axis.</li> <li>Adjust p-value and fold change, and click Regenerate Cloud Plot.</li> <li>Click on a feature to see its associated graphs in the left hand panel.</li> </ul> <p></p>"},{"location":"modules/xcms/#activity-network","title":"Activity network","text":"<p>This shows the pathways that correspond to the identified metabolites. The table under the image shows the \u201cTop pathways\u201d - these are ordered by their p-values.</p>"},{"location":"modules/xcms/#links","title":"Links","text":"<p>XCMS Online</p> <p>XCMS Documentation</p> <p>Tautenhahn, R. et al. (2012) XCMS Online: A Web-Based Platform to Process Untargeted Metabolomic Data. Analytical Chemistry. DOI: 10.1021/ac300698c</p> <p>Smith, R. et al. (2014) Proteomics, lipidomics, metabolomics: a mass spectrometry tutorial from a computer scientist\u2019s point of view. BMC Bioinformatics. DOI: 10.1186/1471-2105-15-S7-S9. See Figure 2 for an excellent explanation of the various graphs produced from MS.</p> <p>Patti, G. J. et al. (2013) A View from Above: Cloud Plots to Visualize Global Metabolomic Data. Analytical Chemistry. DOI: 10.1021/ac3029745</p>"},{"location":"modules/xtandem/","title":"Protein Identification","text":""},{"location":"modules/xtandem/#protein-identification-using-xtandem","title":"Protein identification using X!Tandem","text":""},{"location":"modules/xtandem/#introduction","title":"Introduction","text":"<p>The high-throughput nature of proteomics mass spectrometry is enabled by a productive combination of data acquisition protocols and the computational tools used to interpret the resulting spectra (list of peaks). One of the key components in mainstream protocols is the generation of tandem mass (MS/MS) spectra by peptide fragmentation. This approach is currently used in the large majority of proteomics experiments to routinely identify hundreds to thousands of proteins from single mass spectrometry runs. In order to do that multiple tools have to be employed: LC-MS/MS to segregate components of proteomic samples associated with protein identification (see Figure 1) softwares, X!Tandem<sup>1</sup>, Mascot or SEQUEST all of which perform protein identification but with different algorithms.</p> <p></p> <p>Figure 1 \u2014 General overview of the experimental steps and flow of data in protein identification using shotgun proteomics experiment.<sup>2</sup>.</p> <p>Figure 1 shows a general overview of the experimental steps in protein identification. Sample proteins are first cleaved into peptides, which are then separated using chromatography (e.g. HPLC). The peptides are then ionised and then selected ions are fragmented to produce signature tandem mass spectrometry (MS/MS) spectra. Peptides are identified from the MS/MS spectra by using programs such as X!Tandem, which search against a database of known peptides. Sequences of the identified peptides are used to infer which proteins are present in the original sample.</p>"},{"location":"modules/xtandem/#background","title":"Background","text":""},{"location":"modules/xtandem/#lc-msms-analysis","title":"LC-MS/MS Analysis","text":"<p>Liquid Chromatography (LC) is a technique used to separate molecules in the solvent (mobile phase). Nowadays liquid chromatography utilising high pressure to force the solvent through the columns packed with porous particles (stationary phase) is referred as High Pressure Liquid Chromatography (HPLC) \u2013 see Figure 2. After purifying the proteomic cell content, LC is able to separate the different proteins which are injected in the mass spectrometer. Each peak from the results will be analysed by mass spectrometry.</p> <p></p> <p>Figure 2 \u2014 Schema of High Pressure Liquid Chromatography (HPLC)<sup>5</sup>. Compounds of the mixture are separated in the HPLC column according to various parameters (polarity, charge, affinity etc). The type of separation depends on the column being used). A detector flow cell is used to detect the separated compounds band.</p> <p>Mass spectrometry (MS) \u2013 see Figure 3 \u2013 has been widely used to analyse biological samples and has evolved into an indispensable tool for proteomics research. Fundamentally, MS measures the mass-to-charge ratio (m/z) of gas-phase ions. Mass spectrometers consist of an ion source that converts analyte molecules into gas-phase ions, a mass analyser that separates ionised analytes on the basis of m/z ratio and a detector that records the number of ions at each m/z value.</p> <p></p> <p>Figure 3 \u2014 Schema of mass specter. \u201cA mass spectrometer consists of three components: an ion source, a mass analyzer, and a detector. The ionizer converts a portion of the sample into ions. There is a wide variety of ionization techniques, depending on the phase (solid, liquid, gas) of the sample and the efficiency of various ionization mechanisms for the unknown species. An extraction system removes ions from the sample, which are then targeted through the mass analyzer and onto the detector. The differences in masses of the fragments allows the mass analyzer to sort the ions by their mass-to-charge ratio. The detector measures the value of an indicator quantity and thus provides data for calculating the abundances of each ion present.\u201d <sup>6</sup></p> <p>Tandem mass spectrometry (MS/MS) \u2013 see Figure 4 \u2013 is a key technique for protein or peptide sequencing and post-translational modifications analysis. Collision-induced dissociation (CID) has been the most widely used MS/MS technique in proteomics research. In this method, gas-phase peptide/protein cations are internally heated by multiple collisions with rare gas atoms. The result is fragmented ions that, after the detection phase and reconstitution, reveal the amino-acid chains.</p> <p></p> <p>Figure 4 \u2014 Schema of a tandem mass spectrometry associated with liquid chromatography (LC-MS/MS). This technique combine separation form liquid chromatography and m/z ratio analyse of the tandem mass spectrometry in order to generate spectra.</p> <p>File formats : During a full proteomics analysis, as seen in Figure 5, many files are created. Every step has its own multiple file formats:</p> <p></p> <p>Figure 5 \u2014 Multiple formats during MS treatment<sup>7</sup>. From the sample processing to the final file, various file formats can be used. This schema shows the different processes and file formats that are generated during a full MS experiment.</p> <p>For this tutorial we will focus on the \u201cInformatics Analysis\u201d part using the following file formats:</p> <ul> <li>fasta: fasta files are mainly used for representing either nucleotide sequences or peptide sequences, using single-letter codes.</li> <li>MGF : Mascot Generic Format (MGF) file is the most common format for MS/MS data encoding in the form of a peak list<sup>8</sup>. This file encodes multiple MS/MS spectra in a single file listing the [m/z, intensity] pairs separated by headers \u2013 see Figure 6. More precisely each query represents a complete MS/MS spectrum delimited by BEGIN IONS and END IONS statements. Embedded parameters<sup>9</sup> can be found after each BEGIN IONS statement. An example entry is shown in the figure below:</li> </ul> <p></p> <p>Figure 6 \u2014 Sample of a MGF file. MGF files are used for enconding MS results, multiple spectra can be enconded in one MGF. Every spectrum begins with the BEGINS IONS assessment and finishes with END IONS. MGF files can be divided in 2 parts :     \u2013 The header : containing information about the embedded Search Parameters.     \u2013 Ions information : the first figure is the ion mass, the second is the ion charge.</p>"},{"location":"modules/xtandem/#xtandem","title":"X!Tandem","text":"<p>X!Tandem is an open source software that can match tandem mass spectra (usually the experiment) with peptide sequences from a database. This process allows identification of proteins in one or more samples.</p> <p>The X!Tandem search engine calculates a statistical confidence (expectation value) for all of the individual spectrum-to-sequence assignments. Some spectra might map to more than one protein, in this case X!Tandem will pick the best match with the highest confidence score (see Figure 7). The output is a lists all of the high confidence assignments.</p> <p></p> <p>Figure 7 \u2014 Schema of the X!Tandem analysis<sup>2</sup>. After LC-MS/MS analysis the experimental spectrum is compared to a theoretical spectrum made from a protein database. This comparison leads to a list of peptide match ranked by score.</p>"},{"location":"modules/xtandem/#galaxy","title":"GALAXY","text":"<p>GALAXY<sup>3</sup> is an open source, web-based platform for biomedical research. GALAXY allows users to perform multi-omics data analyses: genomics, proteomics, transcriptomics and more. Numerous tools are available to achieve various analyses. This tutorial will focus on proteomics identification: matching the experimental data, spectra from LC-MS/MS analysis against data from a protein database using X!Tandem.</p> <p>Before starting, a quick overview of the GALAXY interface \u2013 see Figure 8. The interface is divided into three parts:</p> <ul> <li>Left panel:  List the tools that are available.  A search textbox is at the top of the panel in order to find the tool you want.</li> <li>Right panel: Is the history of all the data outputs from previous steps and subsequently becoming the input for the next step. For example, the figure below shows the data imported ready for the next step. This panel allows the user to follow the different steps of the  analysis.</li> <li>Central panel: Is the main screen, showing the details and options of the selected tool.</li> </ul> <p></p> <p>Figure 8 \u2014 Galaxy interface. Divided in 3 parts Galaxy\u2019s interface go from the left selecting the tools to the right where the results are displayed.</p>"},{"location":"modules/xtandem/#tutorial","title":"Tutorial","text":"<p>This tutorial describes how to identify a list of proteins from tandem mass spectrometry data.</p> <p>Analyses of this type are a fundamental part of most proteomics studies. The basic idea is to match tandem MS spectra obtained from a sample with equivalent theoretical spectra against a reference protein database. The process is referred to as \u201cprotein identification\u201d, although amino acid sequences are not obtained de novo with this method.</p>"},{"location":"modules/xtandem/#objectives","title":"Objectives","text":"<p>The objective of this tutorial is to perform protein identification from MS/MS spectra data using the X!Tandem tool in GALAXY \u2013 see Figure 9. The basic steps involved are:</p> <ul> <li>Loading UniProt<sup>4</sup> proteome data in GALAXY (fasta file format)</li> <li>Loading your MS/MS spectra in GALAXY</li> <li>Run X!Tandem proteomics search</li> <li>Sorting and analysing the results</li> </ul> <p>The tutorial will finish with an exercise where you repeat the same protocol but with your own proteome as the reference database instead of using UniProt.</p> <p></p> <p>Figure 9 - General flowchart of this training. The first part is to upload datasets to be investigated. Then the training will cover the key parts of the configuration of a X!Tandem search. Finally, we look at sorting and analysing the results.</p> <p>The aim of the training will be to create a list of all proteins that can be confidently said to be present in the sample.</p> <p>This tutorial uses the following open source tools:</p> <ul> <li>X!Tandem search engine</li> <li>Trans Proteomic Pipeline<sup>11</sup></li> <li>GALAXY platform with tools already installed</li> </ul> <p>This tutorial uses an E. Coli MS/MS spectra dataset \u201cs1-000.RAW.gz\u201d that has already been converted to MGF format for use in the Galaxy. The MGF data file is over 200MB, instead of downloading it to your computer, you can upload this file into Galaxy directly. Copy this link (https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/EColi_K12_MS_Spectra.mgf) and follow the instructions below.</p> <p>Note If you downloaded the RAW data (which can be obtained from here), you will need to manually convert it to \u201cMGF\u201d before it can be used in Galaxy. To convert the file, follow the following steps: * Download and Install ProteoWizard on your local computer. (Note: version - Windows 64-bit installer(able to convert vendor files except T2D) * Start the ProteoWizard software on your local computer with windows operating system. * Upload the raw file and convert to mgf format</p>"},{"location":"modules/xtandem/#step-1-data-import","title":"STEP 1: Data import","text":"<ul> <li>Before importing data, Name your history. Click on the Unnamed history on the top of the right panel until you get the cursor. Delete and type in \u201cProtein Identificaiton E.coli K12\u201d or a more meaningful name. You must hit Enter, otherwise the name will not be saved.</li> </ul> <ul> <li>Next, import data into GALAXY. On the left panel click on the upload button as shown below:</li> </ul> <ul> <li>A new window will open, where you can select a method to upload your data: Choose local file, Choose FTP file or Paste/Fetch data. Click on Paste/Fetch data then copy and paste the URL of the mass spectrometer file into the textbox.</li> </ul> <p>Tip : You can also use the Get Data \u2192 Upload file tool to obtain the same result. Here you want to upload your MS/MS spectra.</p> <p></p> <p>Warning : X!Tandem only accepts mgf files in GALAXY.  Other file formats have to be converted beforehand. A useful tool for that is msconvert<sup>12</sup>(download : here. This tool only working on Windows).</p>"},{"location":"modules/xtandem/#step-2-import-reference-data","title":"STEP 2: Import Reference Data","text":"<p>We will first use the UniProt Database as our reference data to search against.</p> <ul> <li>Select the tool named Protein Database Downloader</li> <li>Choose the database: UniProtKB</li> <li>Select the organism of interest: Escherichia Coli (strain K12)</li> <li> <p>Click on Execute</p> </li> <li> <p>You will see your history update with the new data imports</p> </li> </ul> <p></p> <ul> <li>Rename your \u201cProtein Database\u201d by clicking on pencil  icon.</li> <li>Select Edit Attributes</li> <li>In Name, type in EColi_K12_UniProt_Database</li> <li>Click Save</li> </ul> <p></p>"},{"location":"modules/xtandem/#step-3-xtandem-msms-search","title":"STEP 3: X!Tandem MS/MS Search","text":"<p>This part of the tutorial is to perform the X!Tandem MS/MS search.</p> <ul> <li>The tool can be found in the left panel under the section Proteomics Tools \u2192 X!Tandem MSMS Search</li> <li>In the central section, you should see the following options. Below the key parameters are explained in detail.</li> </ul> <p></p> <p>X!Tandem proposes many options, the key options of interest are:</p> <ol> <li>Uploaded FASTA file: this parameter is to select the fasta file that will be used as the proteins database.</li> <li>MSMS File : select the spectra file to analyse.</li> <li>Variable Modifications: this option considers possible modification on each residue (which impact the MS/MS spectra).</li> <li>Fixed Modifications: this option allows you to specify any known modification.</li> <li>Missed Cleavages Allowed: \u201cwhen a cleavage reagent (either chemical or enzymatic) is used to cleave the peptide backbone of a protein to produce peptides, different sites along the backbone will have different reaction rates and kinetics. Therefore, there may be some sites that should be cleaved by the reagent that are not completely cleaved during the course of the experiment. The value of this parameter represents the maximum number of missed cleavage sites allowed within a peptide.\u201d</li> <li>Enzyme: specify the enzyme that has been used to cleave the proteins (affecting the interpretation of the spectrum).</li> <li>Fragment ion tolerance: define the minimum weight (in Da) of the fragmented ions, default value is 0.5.</li> <li>Precursor ion tolerance: define the minimum weight (in Da) of the precursor ions.</li> </ol> <p>In this tutorial, we are using the following parameters:</p> Parameters Name Value Default Value Uploaded FASTA file EColi_K12_UniProt_Database \u2013 MSMS File EColi_K12_MS_Spectra.mgf \u2013 Variable Modifications Oxidation M \u2013 Fixed Modifications Carbamidomethyl C \u2013 Missed Cleavages Allowed 2 2 Enzyme Trypsin Trypsin Fragment ion tolerance 0.5 0.5 Precursor ion tolerance 10 ppm 10 ppm <ul> <li>Leave all other parameters as their default settings.</li> <li> <p>Click on Execute</p> </li> <li> <p>The history should update with a new entry, the output file of the X!Tandem</p> </li> <li>Rename the output by clicking on the   icon</li> </ul> <p></p> <ul> <li>You can view the output by click on the name in the history panel.</li> </ul>"},{"location":"modules/xtandem/#step-4-convert-xtandem-xml-to-table","title":"STEP 4: Convert X!Tandem XML to Table","text":"<p>The output of X!Tandem is an XML format, which is not easy to decipher. In order to get a more readable file, we will convert the XML format to a table. This is a two step process:</p> <ul> <li>Select Proteomics Tools \u2192 Tandem to pepXML</li> <li>Select your tandem file in the Input File field</li> <li>Click on Execute</li> <li>The history should update with a new pepXML file. The pepXML file is still a XML file and needs to be converted to a tabular.</li> <li>Select Proteomics Tools \u2192 PepXML to Table</li> <li>Select your pepXML file in the Input File field</li> <li>This history should update with a new file</li> </ul> <p></p> <p>After the X!Tandem search we obtain a list of proteins present in the sample data from Step 1:</p> Tabular name Tandem file XML designation Definition Protein label Protein name according to the database used for the MS/MS search Peptide seq Peptide sequence Assumed_charge z Parent ion mass (plus a proton) from the spectrum Calc_neutral_pep_mass mh (+mass of a proton) Parent ion mass calculated from the spectrum Neutral_mass mh (+mass of a proton) Calculated peptide mass (plus a proton) Retention_time rt Length of time between injection and position of the target compound peak.<sup>10</sup> Start_scan id id of the group treated (where the analysis starts) End_scan id id of the domain treated (usually the same as start_scan, no consideration of the doted name in the original XML file) Search_engine \u2014 Name of the search engine used, in our case X!Tandem (associated with the scoring method : k-score) Raw_score expect Expectation value for the top ranked protein identified with this spectrum <p>Note: You can find all the details on the X!Tandem output file here: The file format for X! series search engines. The tandem XML file contains more information than the tabular format which can also be of further use (e.i. the score for the different ions x, y, z, a, b, c \u2026)</p>"},{"location":"modules/xtandem/#references","title":"References","text":"<ol> <li> <p>X!Tandem website and X!Tandem documentation. Craig, R., and R. C. Beavis. 2004. \u201cTANDEM: matching proteins with tandem mass spectra.\u201d Bioinformatics 20, no. 9 (June): 1466-67. http://dx.doi.org/10.1093/bioinformatics/bth092.\u00a0\u21a9</p> </li> <li> <p>Nesvizhskii, Alexey I. \u201cProtein Identification By Tandem Mass Spectrometry And Sequence Database Searching\u201d. Mass Spectrometry Data Analysis in Proteomics 87-120.  \u2014 Mass Spectrometry Data Analysis in Proteomics \u21a9\u21a9</p> </li> <li> <p>GALAXY platform : https://usegalaxy.org/. You can also find a more extensive documentation here : https://galaxyproject.org/. Afgan, Enis et al. \u201cThe Galaxy Platform For Accessible, Reproducible And Collaborative Biomedical Analyses: 2016 Update\u201d. Nucleic Acids Res 44.W1 (2016): W3-W10.  \u2014 The Galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2016 update \u21a9</p> </li> <li> <p>UniProt : http://www.uniprot.org/. Apweiler, R. \u201cUniprot: The Universal Protein Knowledgebase\u201d. Nucleic Acids Research 32.90001 (2004): 115D-119.  \u2014 UniProt: the Universal Protein knowledgebase \u21a9</p> </li> <li> <p>High-performance liquid chromatography (HPLC): How Does High Performance Liquid Chromatography Work ? Mant, Colin T. et al. \u201cHPLC Analysis And Purification Of Peptides\u201d. Peptide Characterization and Application Protocols (2007): 3-55.\u00a0\u21a9</p> </li> <li> <p>Aebersold, Ruedi and Matthias Mann. \u201cMass Spectrometry-Based Proteomics\u201d. Nature 422.6928 (2003): 198-207.  \u2014 Mass Spectrometry-Based Proteomics \u21a9</p> </li> <li> <p>Deutsch, E. W. \u201cFile Formats Commonly Used In Mass Spectrometry Proteomics\u201d. Molecular &amp; Cellular Proteomics 11.12 (2012): 1612-1621.  \u2014 File Formats Commonly Used in Mass Spectrometry Proteomics \u21a9</p> </li> <li> <p>Mascot Generic Format (MGF) file is likely the most common text format for MS/MS data encoding in the form of a peak list. This file encodes multiple MS/MS spectra in a single file via m/z, intensity pairs separated by headers.  \u2014 MGF file format \u21a9</p> </li> <li> <p>The MGF format allows parameters that can be found after the BEGIN IONS statement.  \u2014 Embedded Parameters \u21a9</p> </li> <li> <p>The retention time of a peak can be used as means of qualitative identification. The length of time between injection and position of the target compound peak.  \u2014 Retention Time Parameters  \u2014 Retention Time explained for GC/MS \u21a9</p> </li> <li> <p>The Trans-Proteomic Pipeline (TPP) website : http://tools.proteomecenter.org/wiki/index.php?title=Software:TPP. Deutsch, Eric W. et al. \u201cA Guided Tour Of The Trans-Proteomic Pipeline\u201d. Proteomics 10.6 (2010): 1150-1159.  \u2014 A Guided Tour of the Trans-Proteomic Pipeline \u21a9</p> </li> <li> <p>ProteoWizard Tools website : http://proteowizard.sourceforge.net/tools.shtml. Holman, Jerry D., David L. Tabb, and Parag Mallick. \u201cEmploying Proteowizard To Convert Raw Mass Spectrometry Data\u201d. Current Protocols in Bioinformatics (2014): 13.24.1-13.24.9. \u2014 Employing ProteoWizard to Convert Raw Mass Spectrometry Data \u21a9</p> </li> </ol>"},{"location":"scrapbook/data/data_access/","title":"Data: access, using, moving","text":"<p>how to get data from x to y</p>"},{"location":"scrapbook/data/data_access/#introduction","title":"Introduction","text":"<p>FIXME</p>"},{"location":"scrapbook/data/data_access/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>FIXME</li> <li>FIXME</li> <li>FIXME</li> </ol>"},{"location":"scrapbook/data/data_access/#main-tutorial","title":"Main Tutorial","text":"<p>FIXME</p> <p>Note</p> <p>Please take note of this because we care about you.</p> <p>Hint</p> <p>This is a useful tip for you because we like you.</p> <p>Warning</p> <p>Please be careful here, you could really mess things up.</p>"},{"location":"scrapbook/data/data_access/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/data/formats/bam/","title":"BAM File","text":"<p>[from LSCC docs]</p> <p>SAM is a text format which is not space efficient. Binary Sequence Alignment is a compressed version of SAM. Data in a BAM file is binary and therefore can\u2019t be visualised as text. If you try and visualise in Galaxy, it will default to downloading the file.</p> <p> FIXME link</p>"},{"location":"scrapbook/data/formats/file_formats/","title":"File formats","text":"<p>FIXME: link to images?</p> File format File extensions Description FASTA &gt;SequenceID  sequence  More information. .fasta  .fas  .fa generic FASTA file .fna nucleotides .ffn nucleotides for coding regions only? .faa amino acids .frn nucleotides? for non-coding RNA regions FASTQ .fastq @SequenceID  sequence  +  nucleotide quality scores SAM .sam tab-delimited text file of reads aligned to a reference. e.g. mapped position, sequence, quality scores. More [FIXME: can\u2019t link] BAM .bam Compressed version of SAM file. More [FIXME: can\u2019t link] GBK .gbk Genbank format. Sequence information, features, protein translations, DNA sequence. GFF .gff General Feature Format. Tab-delimited. Each line is a feature. also known as GTF? mention gff3? e.g. it needs to be version 3? More information. VCF .vcf Variant Call Format. Tab-delimited. Header, then one line per identified variant. pileup Each line is a nucleotide in the sequence, with information on how all the reads are mapped to that position. More [FIXME: can\u2019t link] <p>there are some nice images etc in here https://docs.google.com/document/pub?id=1fouC29Lq0CXxQQCpuojrR5RXbdzMdxRf8ZID01XYNqI#h.18e90b8fc68f</p>"},{"location":"scrapbook/data/formats/pileup/","title":"Pileup format","text":"<p>[from LSCC docs]</p>"},{"location":"scrapbook/data/formats/pileup/#pileup-format_1","title":"Pileup Format","text":"<p>A pileup file has as many lines as there are bases in the reference sequence that are aligned with reads in the SAM/BAM file. Each line contains information about every base found in the sequence reads that corresponds to the reference base on that line. The format of a pileup record is:</p> <ul> <li>ReferenceSeq [string] - name of the reference sequence</li> <li>Coordinate [integer] - position in the reference sequence</li> <li>ReferenceBase [A/C/G/T/N] - reference base at that position</li> <li>Num. Reads [integer] - number of reads aligning to that base</li> <li>ReadBases [variable length string, see below]</li> <li>BaseQualities [variable length string, Phred encoded]</li> </ul> <p>ReadBases:</p> <ul> <li>Each separate read that covers the base is represented here. The more reads that cover this base, the longer this string</li> <li>. = match on forward strand for that base</li> <li>, = match on reverse strand</li> <li>ACGTN = mismatch on forward</li> <li>acgtn = mismatch on reverse</li> <li>+[0-9]+[ACGTNacgtn]+\u2019 = insertion between this reference position and the next</li> <li>[0-9]+[ACGTNacgtn]+\u2019 = deletion between this reference position and the next</li> <li>^ = start of read</li> <li>$ = end of read</li> </ul> <p>BaseQualities = one character per base in ReadBases, ASCII encoded Phred scores</p> <p>Example:</p> <ul> <li>chr1 272 T 24 ,.$.....,,.,.,\u2026,,,.,..^+. &lt;&lt;&lt;+;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;=&lt;;&lt;;7&lt;&amp;</li> <li>chr1 273 T 23 ,.....,,.,.,\u2026,,,.,..A &lt;&lt;&lt;;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;3&lt;=&lt;&lt;&lt;;&lt;&lt;+</li> <li>chr1 274 T 23 ,.$....,,.,.,\u2026,,,.,\u2026 7&lt;7;&lt;;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;=&lt;;&lt;;&lt;&lt;6</li> <li>chr1 275 A 23 ,$....,,.,.,\u2026,,,.,\u2026^l. &lt;+;9*&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;=&lt;&lt;:;&lt;&lt;&lt;&lt;</li> <li>chr1 276 G 22 \u2026T,,.,.,\u2026,,,.,.... 33;+&lt;&lt;7=7&lt;&lt;7&lt;&amp;&lt;&lt;1;&lt;&lt;6&lt;</li> </ul> <p>In this example there are 5 chromosomal positions represented, with between 22 and 24 reads aligning to each of the positions. There are two mismatches: an \u2018A\u2019 in position 273 and a \u2018T\u2019 in position 276. That is, only a single read contained that mismatch in either case. More information on pileup format here: http://samtools.sourceforge.net/pileup.shtml</p>"},{"location":"scrapbook/data/formats/pileup/#pileup-file-in-galaxy","title":"Pileup file in Galaxy","text":""},{"location":"scrapbook/data/formats/sam/","title":"SAM File","text":"<p>[from LSCC docs]</p> <p>Sequence Alignment/Map (SAM) format records all information relevant to how a set of reads aligns to a reference genome. A SAM file has an optional set of header lines describing the context of the alignment, then one line per read, with the following format:</p> <p>11 mandatory fields (+ variable number of optional fields) 1    QNAME: Query name of the read 2    FLAG 3    RNAME: Reference sequence name 4    POS: Position of alignment in reference sequence 5    MAPQ: Mapping quality (Phred-scaled) 6    CIGAR: String that describes the specifics of the alignment against the reference 7    MRNM 8    MPOS 9    ISIZE 10  SEQQuery: Sequence on the same strand as the reference 11  QUAL: Query quality (ASCII-33=Phred base quality)</p>"},{"location":"scrapbook/data/formats/sam/#sam-example","title":"SAM example","text":"<p>SRR017937.312 16   chr20 43108717 37   76M   *    0    0 TGAGCCTCCGGGCTATGTGTGCTCACTGACAGAAGACCTGGTCACCAAAGCCCGGGAAGAGCTGCAGGAAAAGCCG ?,@A=A5=,@==A:BB@=B9(.;A@B;@ABBB@@9BB@:@5BBB2&lt;BBB@BBB?;;BABBBBBBB@ <p>For this example:</p> <p>QNAME = SRR017937.312 - this is the name of this read FLAG = 16 - see the format description below RNAME = chr20 - this read aligns to chromosome 20 POS = 43108717 - this read aligns the sequence on chr20 at position 43108717 MAPQ = 37 - this is quite a high quality score for the alignment (b/w 0 and 90) CIGAR = 76M - this read aligns to the reference segment across all bases (76 Matches means no deletions or insertions. Note that \u2018aligns\u2019 can mean \u2018aligns with mismatches\u2019 - mismatches that don\u2019t affect the alignment are not recorded in this field) MRNM = * - see the format description below MPOS = 0 as there is no mate for this read - the sequenced DNA library was single ended, not mate paired*. ISIZE = 0 as there is no mate for this read SEQQuery = the 76bp sequence of the reference segment QUAL = per-base quality scores for each position on the alignment. This is just a copy of what is in the FASTQ file</p> <p>NOTE: reads are shown mapped to the \u201csense\u201d strand of the reference, and bases are listed in 5\u2019 -&gt; 3\u2019 order. This is important because an actual read might be from the other strand of DNA. The alignment tool will try to map the read as it is, and also the reverse compliment. If it was on the other strand then the reverse compliment is shown in the SAM file, rather than the original read itself</p> <p>More information.</p> <p> [FIXME link]</p>"},{"location":"scrapbook/dge/","title":"Differential Gene Expression","text":""},{"location":"scrapbook/dge/#background","title":"Background","text":"<p>Differential Gene Expression (DGE) is the process of determining whether any genes were expressed at a different level between two conditions. For example, the conditions could be wildtype versus mutant, or two growth conditions. Usually multiple biological replicates are done for each condition - these are needed to separate variation within the condition from that between the conditions.</p>"},{"location":"scrapbook/dge/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>Align RNA-Seq data to a reference genome  </li> <li>Count transcripts for each sample</li> <li>Perform statistical analysis to obtain a list of differentially expressed genes</li> <li>Interpret the DGE list</li> <li>Visualize the results in Degust</li> </ol>"},{"location":"scrapbook/dge/#input-data","title":"Input data","text":"<p>A typical experiment will have 2 conditions each with 3 replicates, for a total of 6 samples. Each sample will be RNA-Seq data, either as one file per sample (single-end reads / SE) or two files (paired-end reads / PE).</p> Condition 1 Condition 2 Replicate 1 1 4 Replicate 2 2 5 Replicate 3 3 6 <p>FIXME:  load reads</p>"},{"location":"scrapbook/dge/#prepare-reference","title":"Prepare reference","text":"<p>FIXME: tricky need it in correct format for htseq-count GFF2 ?</p>"},{"location":"scrapbook/dge/#align-reads","title":"Align reads","text":"<p>FIXME: use BWA MEM with defaults? for each sample, should be able to use the \u201c6 at once\u201d feature of Galaxy?  </p>"},{"location":"scrapbook/dge/#count-reads","title":"Count reads","text":"<p>FIXME: htseq-count, use the CDS and RNA features to align to, get count table</p>"},{"location":"scrapbook/dge/#dge-analysis","title":"DGE Analysis","text":""},{"location":"scrapbook/dge/#within-galaxy","title":"Within Galaxy","text":"<p>FIXME: Need to use Voom/Limma here</p>"},{"location":"scrapbook/dge/#within-degust","title":"Within Degust","text":"<p>FIXME: need to combine each of the results in count-reads section into a single table (using galaxy table tools?) but need to munge in the annotation as well, so i or simon will need to add new tools to toolshed to do this</p>"},{"location":"scrapbook/dge/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/dna/anno/","title":"Genome Annotation","text":"<p>Genome annotation is the process of labelling genomic features onto a genomic sequence, such as the location of coding genes and RNAs.</p>"},{"location":"scrapbook/dna/anno/#command-line","title":"Command Line","text":"<ul> <li>Prokka</li> </ul>"},{"location":"scrapbook/dna/anno/#galaxy","title":"Galaxy","text":"<ul> <li>Prokka</li> </ul>"},{"location":"scrapbook/dna/anno/#web","title":"Web","text":"<ul> <li>RAST</li> <li>GENIX</li> </ul>"},{"location":"scrapbook/dna/data/","title":"Genomics Data","text":"<p>DNA-Seq</p> <p>FASTQ</p>"},{"location":"scrapbook/dna/denovo/","title":"De novo genome assembly","text":""},{"location":"scrapbook/dna/denovo/#illumina-data","title":"Illumina data","text":""},{"location":"scrapbook/dna/denovo/#command-line","title":"Command line","text":"<ul> <li>Velvet</li> <li>Spades</li> <li>MegaHIT</li> </ul>"},{"location":"scrapbook/dna/denovo/#galaxy","title":"Galaxy","text":"<ul> <li>Spades</li> </ul>"},{"location":"scrapbook/dna/denovo/#pacbio-data","title":"Pacbio data","text":""},{"location":"scrapbook/dna/denovo/#command-line_1","title":"Command line","text":"<ul> <li>CANU</li> </ul>"},{"location":"scrapbook/dna/denovo/#smrt-suite","title":"SMRT Suite","text":"<ul> <li>HGAP</li> </ul>"},{"location":"scrapbook/dna/snps/","title":"Variant Finding","text":"<p>Variant finding the the process of identifying small differences between two genomes. Typically this refers to the small scale, such as SNPs and small insertions and deletions, as opposed to larger structural variation.</p>"},{"location":"scrapbook/dna/snps/#command-line","title":"Command Line","text":"<ul> <li>Snippy</li> </ul>"},{"location":"scrapbook/dna/snps/#galaxy","title":"Galaxy","text":"<ul> <li>Varscan</li> </ul>"},{"location":"scrapbook/dna/anno/eugene/","title":"EuGene-PP","text":"<p>link: http://bioinformatics.oxfordjournals.org/content/30/18/2659.full</p> <p>can annotate using oriented RNA-seq data, so that the resulting annotation may include non-coding regions, including antisense ones.</p>"},{"location":"scrapbook/dna/anno/eugene/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>mGVL</li> </ul>"},{"location":"scrapbook/dna/anno/eugene/#start","title":"Start","text":""},{"location":"scrapbook/dna/anno/eugene/#input-data","title":"Input data","text":"<ul> <li>assembled genome</li> <li>oriented RNA-seq</li> </ul>"},{"location":"scrapbook/dna/anno/eugene/#how-it-works","title":"How it works","text":"<p>-</p>"},{"location":"scrapbook/dna/anno/genix/","title":"GENIX","text":"<p>this is a new website not galaxy</p>"},{"location":"scrapbook/dna/anno/megannotator/","title":"Megannotator","text":""},{"location":"scrapbook/dna/anno/megannotator/#megannotator","title":"MEGAnnotator","text":"<p>http://femsle.oxfordjournals.org/content/363/7/fnw049</p>"},{"location":"scrapbook/dna/anno/prokka/","title":"Prokka on Galaxy","text":""},{"location":"scrapbook/dna/anno/prokka/#background","title":"Background","text":"<p>Genome annotation involves finding and describing particular features, such as genes, tRNAs and rRNAs. This tutorial will demonstrate how to annotate an assembled bacterial genome using the tool Prokka. Link to Prokka on github; link to Prokka citation.</p>"},{"location":"scrapbook/dna/anno/prokka/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial you should be able to :</p> <ol> <li>input files into Prokka</li> <li>change settings</li> <li>run Prokka, and</li> <li>examine the output: annotated genome.</li> </ol>"},{"location":"scrapbook/dna/anno/prokka/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>a mGVL and galaxy instance</li> </ul>"},{"location":"scrapbook/dna/anno/prokka/#start","title":"Start","text":"<ul> <li>open your galaxy instance in your mGVL</li> </ul>"},{"location":"scrapbook/dna/anno/prokka/#input-data","title":"Input data","text":"<ul> <li>assembled contigs, e.g. SPAdes_contigs.fasta</li> </ul>"},{"location":"scrapbook/dna/anno/prokka/#how-it-works","title":"How it works","text":"<ul> <li> <p>Prokka compares the input contigs with various databases to identify coding sequences, rRNA genes, tRNA genes, non-coding RNA, and signal leader peptides.</p> </li> <li> <p>These databases are maintained by different organisations, and include information about known genomic features and their locations. Prokka includes a local copy.</p> </li> </ul>"},{"location":"scrapbook/dna/anno/prokka/#run-prokka","title":"Run Prokka","text":"<ul> <li>In Galaxy, go to Tools \u2192 NGS Analysis \u2192 NGS: Annotation \u2192 Prokka </li> <li>Set the following parameters (leave everything else unchanged):<ul> <li>Contigs to annotate: SPAdes contigs (fasta) </li> <li>Locus tag prefix (\u2013locustag): P</li> <li>FIXME: actually we want to have a different locus tag for each sample for later use in Roary. Is there some problem here with the length of the locus tag that can be used?</li> <li>Force GenBank/ENA/DDJB compliance (\u2013compliant): Yes</li> <li>Sequencing Centre ID (\u2013centre): V</li> <li>Genus Name: Staphylococcus </li> <li>Species Name: aureus </li> <li>Use genus-specific BLAST database No </li> <li>Click Execute. This may take x minutes.</li> </ul> </li> </ul>"},{"location":"scrapbook/dna/anno/prokka/#examine-the-output","title":"Examine the output","text":"<p>Once Prokka has finished, examine each of its output files.</p> <ul> <li> <p>The gff and gbk files contains all of the information about all of the features annotated (in different formats.)</p> </li> <li> <p><code>summary.gff</code>: a list of all the features found, listed in order of their location (starting at the start of contig number 1). Each row is a genomic feature and its location. Column 2 is the source - the database used to find the feature. Column 3 is the feature - e.g. CDS, tRNA.</p> </li> <li> <p><code>summary.gbk</code>: the contigs listed in order. For each contig, the features are listed (e.g. CDS name and translation), followed by the sequence of the whole contig.</p> </li> <li> <p>The txt file contains a summary of the number of features annotated.</p> </li> <li>The faa file contains the protein sequences of the genes annotated.</li> <li> <p>The ffn file contains the nucleotide sequences of the genes annotated.</p> </li> <li> <p>Download the gff file to your local computer: click on the file name with the .gff extension, and then click on the disk icon .</p> </li> </ul> <p></p>"},{"location":"scrapbook/dna/anno/prokka/#annotated-features","title":"Annotated features","text":"<p>Now that we have annotated the draft genome sequence, we would like to view the sequence in the Artemis genome viewer.</p> <ul> <li>Open Artemis and load the downloaded .gff file.</li> <li>The top panel shows an overview - here we can see annotated genes and other features.</li> <li>The middle panel shows the DNA sequence and amino acid translations in 6 frames.</li> <li>The bottom panel shows a text summary of the features.</li> <li>Scroll left and right with the horizontal bars under each panel.</li> <li>Zoom with the vertical bars to the right.</li> </ul> <p></p>"},{"location":"scrapbook/dna/anno/prokka/#what-next","title":"What Next?","text":"<ul> <li>Determine core and pan genomes using Roary.</li> </ul>"},{"location":"scrapbook/dna/anno/prokka_cmdline/","title":"Prokka on commandline","text":"<ul> <li>ssh to your mGVL</li> <li>wget data - scaffolds of .fna for several species</li> <li>(alternatively - have already put data on your mGVL)</li> <li>type in:</li> </ul> <pre><code>prokka --outdir [name of output folder for 1 sample] --locustag [tag eg sample number] [fna filename]\n</code></pre> <ul> <li>make a new directory for the gff files e.g. \u201cgff_files\u201d</li> <li> <p>mv -v /.gff gff_files/  (means move any .gff files into that folder)</p> </li> <li> <p>FIXME: prokka options see manual</p> </li> </ul>"},{"location":"scrapbook/dna/anno/rast/","title":"RAST","text":"<p>website</p>"},{"location":"scrapbook/dna/denovo/canu/","title":"CANU","text":"<p>pacbio cmdline</p>"},{"location":"scrapbook/dna/denovo/galaxy-spades/","title":"Assembly with Spades in Galaxy","text":"<p>FIXME: This tutorial includes the Workshop 2a \u201cAssembly with Spades\u201d but also some extra info:</p> <ul> <li>section: Pre-requisites</li> <li>section: How does Spades work  </li> <li>more detail on output files</li> <li>section: Filter output</li> <li>section: questions  </li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#background","title":"Background","text":"<p>Spades is one of a number of de novo assemblers that use short read sets as input (e.g. Illumina Reads), and the assembly method is based on de Bruijn graphs. For information about Spades see this link. A protocol for assembling with Velvet (another de novo assembler) is available here.</p> <p>In this activity, we will perform a de novo assembly of a short read set (from an Illumina sequencer) using the Spades assembler. The output from Spades that we are interested in is a multifasta file that contains the draft genome sequence.</p> <p>The read set for today is from an imaginary Staphylococcus aureus bacterium with a miniature genome.</p> <p>We have a closed, annotated genome sequence for a closely related wildtype strain.</p> <p>The whole genome shotgun method used to sequence our mutant strain read set was produced on an Illumina DNA sequencing instrument.</p> <ul> <li>The reads are paired-end</li> <li>Each read is 150 bases (before trimming)</li> <li>The number of bases sequenced is equivalent to 19x the genome sequence of the wildtype strain. (Read coverage 19x - rather low!).</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#learning-objectives","title":"Learning objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>import data into Galaxy  </li> <li>view the files</li> <li>evaluate the read quality</li> <li>assemble the reads using Spades, and</li> <li>examine the output assembly.</li> </ol>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>Galaxy</li> <li>de novo assembly</li> <li>QC</li> <li>Trimming</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#login-to-galaxy","title":"Login to Galaxy","text":"<ul> <li>Go to this Galaxy address: http://43.240.98.1/galaxy  (FIXME: or alternative)</li> <li>Remind me how to logon. FIXME: note this contains the same galaxy address as above - change?</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#import-data","title":"Import data","text":"<ul> <li>Click on the Analyze Data menu at the top of the page.    </li> <li>Click on the History options button the  on the top right of the history pane.</li> <li>Click Import from File (at the bottom of the list).  </li> <li>A new page will appear with a text box for the URL of the history to import.  </li> <li>Copy the following URL into the text box: http://43.240.98.1/public/dieter/Galaxy-History-Colombiaworkshopstart.tar.gz </li> <li>Click Submit.  </li> <li>Galaxy will download the data files from the internet and will be available as an additional history (takes about one minute).  </li> <li>To view this new history, click the View all histories button (top right of the history pane).  </li> <li>If the history has finished downloading it will appear as imported from archive: Colombia_workshop_start</li> <li>Click on the  button above the imported from archive:Colombia_workshop_start then the  button.</li> <li>You should now have four files in the history pane as follows:</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#view-files","title":"View files","text":"<p>All the files are text files.</p> <ul> <li>mutant_R1.fastq and mutant_R2.fastq: a paired-end read set  </li> <li>wildtype.fna: a file that contains the genome sequence of the wildtype strain in fasta format (a header line, then the nucleotide sequence of the genome)</li> <li>wildtype.gff: a file that contains the genome sequence of the wildtype strain in general feature format. (a list of features - one feature per line, then the nucleotide sequence of the genome)</li> </ul> <p>Look at the contents of these files</p> <ul> <li>Click on the View Data button (the ) next to each of the files in turn.</li> <li>Brief Discussion about the GFF format (FIXME: add?)</li> </ul> <p></p>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#evaluate-the-input-reads","title":"Evaluate the input reads","text":"<p>Questions you might ask about your input reads include:</p> <ul> <li>How good is my read set?</li> <li>Do I need to ask for a new sequencing run?  </li> <li>Is it suitable for the analysis I need to do?</li> </ul> <p>We will evaluate the input reads using the FastQC tool.</p> <ul> <li>This runs a standard series of tests on your read set and returns a relatively easy to interpret report.</li> <li>We will use the FASTQC tool in Galaxy to evaluate the quality of one of our fastq files.</li> <li>Go to Tools \u2192 NGS:Analysis \u2192 NGS: QC and Manipulation \u2192 FastQC</li> <li>Select mutant_R1.fastq</li> <li>Execute</li> <li>Once finished, examine the output called FastQC on data1:webpage (Hint:). It has a summary at the top of the page and a number of graphs.</li> </ul> <p>Some of the important outputs of FastQC for our purposes are:</p> <ul> <li>Basic Statistics: Sequence length: will be important in setting maximum k-mer size value for assembly</li> <li>Basic Statistics: Encoding: Quality encoding type: important for quality trimming software</li> <li>Basic Statistics: % GC: high GC organisms don\u2019t tend to assemble well and may have an uneven read coverage distribution.</li> <li>Basic Statistics: Total sequences: Total number of reads: gives you an idea of coverage.</li> <li>Per base sequence quality: Dips in quality near the beginning, middle or end of the reads: determines possible trimming/cleanup methods and parameters and may indicate technical problems with the sequencing process/machine run.</li> <li>Per base N content: Presence of large numbers of Ns in reads: may point to poor quality sequencing run. You would need to trim these reads to remove Ns.</li> <li>Kmer content: Presence of highly recurring k-mers: may point to contamination of reads with barcodes, adapter sequences etc.</li> </ul> <p>Although we have warnings for two outputs (per base sequence content; Kmer content), we can ignore these for now. For a fuller discussion of FastQC outputs and warnings, see the FastQC website link, including the section on each of the output reports, and examples of \u201cgood\u201d and \u201cbad\u201d Illumina data. We won\u2019t be doing anything to these data to clean it up as there isn\u2019t much need. Therefore we will get on with the assembly!</p>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#how-does-spades-work","title":"How does Spades work?","text":"<ol> <li> <p>As with several other de novo assembly programs (e.g. Velvet) Spades uses an algorithm based on de Bruijn graphs. Such graphs use sub-lengths of sequence reads to build an overall genome assembly. The span of the sub-length is called a k-mer, where \u201ck\u201d is the number of nucleotides (e.g. k=21). The user chooses three values of k and Spades makes three assemblies based on these.</p> </li> <li> <p>For the first value of k, each read is broken into as many fragments as possible. For example, if the input read is 22 nucleotides long, and the chosen value of k is 21, then there are two possible fragments (positions 1-21 and 2-22).</p> </li> <li> <p>One randomly-chosen fragment becomes the first node on the de Bruijn graph.</p> </li> <li> <p>A second fragment is connected to this node if it overlaps.</p> </li> <li> <p>Repeat until all fragments are connected. Output \u2192 de Bruijn graph.</p> </li> <li> <p>Find a connected pathway through this graph. Output \u2192 a pathway (sequence) known as a contig. Because of poor or incorrect sequencing, not all the fragments can be joined together. There will be several de Bruijn graphs and so several contigs, usually of different sizes.</p> </li> <li> <p>Repeat these steps for a further two values of k (e.g. k = 33, k = 55). Output \u2192 Three (sets of) contigs.</p> </li> <li> <p>Merge the three (sets of) contigs to get one. Output \u2192 one set of contigs.</p> </li> <li> <p>For paired-end reads (as in this tutorial), the two reads are sequenced from each end of a longer DNA fragment. The middle part of the fragment is not sequenced, but information about the distance between the reads can be used by Spades to join contigs into larger sequences, called scaffolds. Output \u2192 one set of scaffolds.</p> </li> <li> <p>To fix any errors map the original sequence reads onto the scaffolds with the program BWA. Output \u2192 assembled genome.</p> </li> </ol>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#assemble-reads-with-spades","title":"Assemble reads with Spades","text":"<ul> <li> <p>We will perform a de novo assembly of the mutant fastq reads into long contiguous sequences (in fasta format.)</p> </li> <li> <p>Spades produces both contigs and scaffolds. Ask your demonstrator if you would like to know the difference between contigs and scaffolds.</p> </li> <li> <p>Go to Tools \u2192 NGS Analysis \u2192 NGS: Assembly \u2192 spades</p> </li> <li> <p>Set the following parameters:</p> <ul> <li>Run only Assembly: Yes </li> <li>Kmers to use separated by commas: 33,55,91  no spaces  </li> <li>Coverage cutoff: auto </li> <li>Files \u2192 Forward reads: mutant_R1.fastq </li> <li>Files \u2192 Reverse reads: mutant_R2.fastq </li> </ul> </li> <li> <p>Your tool interface should look like this:</p> </li> </ul> <p></p> <ul> <li>Click Execute</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#examine-the-output","title":"Examine the output","text":"<ul> <li>Galaxy is now running Spades on the reads for you.</li> <li>When it is finished, you will have five new files in your history.  </li> <li>contig stats: There are x contigs. Look at the variation in length and coverage. A short contig with high coverage could be a result of contamination, a collapsed repeat, or a plasmid.</li> <li>contigs: Each contig is listed, followed by its sequence in fasta format.</li> <li>scaffold stats: There are x scaffolds.</li> <li>scaffolds: Each scaffold is listed, followed by its sequence in fasta format.</li> <li>log: The specific actions performed in the analysis.</li> <li>Click on the View Data button  on each of the files.</li> <li>Note that the short reads have been assembled into much longer contigs.</li> <li>(However, in this case, the contigs have not been assembled into larger scaffolds.)</li> <li>The stats files will give you the length of each of the contigs.</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#filter-output","title":"Filter output","text":"<p>Go to Tools \u2192 NGS Analysis \u2192 NGS: Assembly \u2192 Filter SPAdes output.</p> <p>This is a quick way to discard contigs that are too short (e.g., they might be contamination) or contigs that do not have enough coverage (e.g., they might be too unreliable).</p> <ul> <li>Under Sequences, choose the contigs fasta file.</li> <li>Under Contig stats choose the contigs stats file. Change the cut-off values for length and coverage or leave them as they are.</li> <li>For Save filtered-out sequences? click Yes.</li> <li>Click Execute. A new fasta file with only the filtered sequences will be saved in the right-side history pane.</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-spades/#questions","title":"Questions","text":"How does SPAdes differ from other genome assembly programs? It uses multiple values of k in de Bruijn graphs. Larger fragment sizes will more accurately position sections of duplicated DNA (repeats), but these larger fragments will only overlap well in densely-sequenced (high-coverage) areas of the genome. Because bacterial genomes may have low-coverage regions, using smaller fragments can increase the potential for overlaps (joins) in these low-coverage regions. Using a range of fragment sizes will therefore get the benefit from both approaches. More information [here](http://thegenomefactory.blogspot.com.au/2013/08/how-spades-differs-from-velvet.html&gt;).  How do I choose values of k?   The k values need to be odd numbers, and shorter than the read lengths.  A good strategy could be to choose some that are small, medium and large. e.g. if the read is 150 nucleotides, k values could be 33, 55, 91. There is no absolute rule; rather, the aim is to get a good spread of k values across the read length.   What can I do with my assembled genome? This tutorial used a subset of a real dataset, so is not a complete genome (is it?). You could re-try it with short reads from a whole genome, at NCBI SRA. You can [annotate] (describe) the genomic features such as genes or [compare] it to other genomes to see variation in structure."},{"location":"scrapbook/dna/denovo/galaxy-spades/#what-next","title":"What Next?","text":"<p>Annotate the genome, e.g. with Prokka.</p>"},{"location":"scrapbook/dna/denovo/hgap/","title":"HGAP","text":"<p>this means SMRT Suite</p> <p>Assembly with PacBio data</p> <p>PacBio is a company that uses a technology called single molecule real time (SMRT) sequencing. This produces very long sequencing reads (up to xx?). These raw sequencing reads can be assembled into genomes by using the software from PacBio, called the SMRT Portal.</p> <p>link: http://www.pacb.com/smrt-science/ link: http://www.pacb.com/products-and-services/analytical-software/smrt-analysis/</p> <p>info: https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Large-Genome-Assembly-with-PacBio-Long-Reads</p> <p>Background: assembly galaxy cmdline?</p> <p>Start Open your GVL dashboard.</p> <p>Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click on \u201cInstall\u201d.  (Note: you will need 16 cores in your GVL).</p> <p>open up the link and log on (create a username and password I think) FIXME</p> <p>Sepsis Data e.g. https://downloads-qcif.bioplatforms.com/bpa/sepsis/pacbio/</p> <p>e.g. one sample it will be split into three files ? for each sample: need the bas file? and the xml</p> <p>but not the subreads</p> <p>bas.h5 Reference Guide (PDF): Describes the main output files produced by the primary analysis pipeline: bas.h5,.1.bax.h5, .2.bax.h5, and .3.bax.h5. The bax.h5 files contain base call information from the sequencing run. The bas.h5 file is essentially a pointer to the three bax.h5 files. Metadata Output Guide (PDF): Describes the file metadata.xml, which contains top-level information about the data, including what sequencing enzyme and chemistry were used, sample name, and other metadata.</p> <p>which files to put over into sepsis gvl</p> <p>Input data from here [link]</p> <p>Import and Manage Import SMRT cells: SMRT Cells shows file paths that are searched add (so should have made folder, put smrt cells data in there, and then tell it this path using \u201cadd\u201d)</p> <p>How it works The PacBio SMRT analysis software: de novo assembly.</p> <p>link: http://www.pacb.com/products-and-services/analytical-software/smrt-analysis/analysis-applications/de-novo-assembly/ Several options, but for example HGAP + BridgeMapper: RS_HGAP Assembly.3 pre-assembly de novo assembly with AssembleUnitig finalise assembly with Quiver</p> <p>RS_Bridgemapper assesses assembly quality by comparing to a reference genome.</p> <p>Run</p> <p>give job name and comments choose a protocol click on the data you want (how to get in) and then arrow to transfer it to right pane run click on the monitor tab as it runs, new items will appear on the left hand side under reports, e.g. starting with filtering graphs will appear for some items, e.g. mapped subread length, what does it mean new data sets will appear under on the left hand side under data eg polished assembly fastq. click on top right corner - log (to check for anything?)</p> <p>Output when finished, go to view data tab; click on job name, open (what is SMRT view? another option)</p> <p>shows all reports and data files e.g. assembled genome</p> <p>download any or leave in here? main assembly parameters /reports - what to check how do you know assembly is good</p> <p>https://github.com/PacificBiosciences/Bioinformatics-Training/wiki/Finishing-Bacterial-Genomes</p> <p>\u2013 good detail in here</p> <p>Next</p> <p>Links to more information</p>"},{"location":"scrapbook/dna/denovo/megahit/","title":"Megahit","text":"<p>cmdline</p> <p>This tutorial demonstrates how to assemble genomic reads from bacteria found in environmental samples. [FIXME: is that correct?]</p> <p>Megahit on Github</p>"},{"location":"scrapbook/dna/denovo/megahit/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>mGVL instance</li> <li>knowledge: cmdline</li> <li>knowledge: metagenomics</li> </ul>"},{"location":"scrapbook/dna/denovo/megahit/#start","title":"Start","text":"<ul> <li>open your mGVL in terminal</li> <li>make a folder for the Megahit analsyses: <code>mkdir Megahit</code></li> <li>move into this folder: <code>cd Megahit</code></li> </ul>"},{"location":"scrapbook/dna/denovo/megahit/#input-data","title":"Input data","text":"<ul> <li>We will use Illumina paired-end reads from several species [FIXME?]</li> </ul>"},{"location":"scrapbook/dna/denovo/megahit/#run-megahit","title":"Run Megahit","text":"<pre><code>megahit [options] R1reads.fastq R2reads.fastq\n</code></pre>"},{"location":"scrapbook/dna/denovo/megahit/#output","title":"Output","text":""},{"location":"scrapbook/dna/denovo/megahit/#next","title":"Next","text":""},{"location":"scrapbook/dna/denovo/megahit/#more-information","title":"More information","text":""},{"location":"scrapbook/dna/denovo/pacbio/","title":"PacBio SMRT Portal","text":"<p>This tutorial will show you how to assemble a bacterial genome de novo, using the PacBio SMRT Portal. </p> <p>Link to PacBio analysis software</p>"},{"location":"scrapbook/dna/denovo/pacbio/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>mGVL instance with 16 cores (FIXME: will people have this - if not, note how they can request it)</li> <li>knowledge: de novo assembly</li> </ul>"},{"location":"scrapbook/dna/denovo/pacbio/#start","title":"Start","text":"<ul> <li>Open your mGVL dashboard.</li> <li>Go to Admin. There is a list of packages. Find SMRT Analysis. On the right, click on Install.</li> <li>You should see SMRT Portal as one of the instance services on your GVL dashboard.</li> <li>Open up the SMRT portal web link (to the right) and register/log on.</li> </ul>"},{"location":"scrapbook/dna/denovo/pacbio/#how-it-works","title":"How it works","text":"<ul> <li>RS_HGAP_Assembly.3 Protocol</li> <li>Filters short and poor-quality reads.</li> <li>Large insert (fragment) sizes =&gt; single pass long reads (but these have lower quality)</li> <li>and/or small insert (fragment) sizes =&gt; cut adapters and assemble subreads =&gt; Circular Consensus Sequence (CSS) reads (higher quality)</li> <li>Pre-assembly e.g. with Canu</li> <li>Polishes assembly e.g. with Quiver (joins contigs/scaffolds?)</li> <li>Corrections</li> </ul>"},{"location":"scrapbook/dna/denovo/pacbio/#input","title":"Input","text":"<ul> <li>Choose your data. (FIXME: e.g. on GenomeSpace?)</li> <li>Get the data you want to use onto your mGVL. (FIXME: explain how?)</li> <li>In the SMRT Portal, go to Design Job, the top left tab.</li> <li>Go to Import and Manage: Import SMRT cells: SMRT Cells. Work out where you put the data on your GVL, and make sure the file path is showing. If not, click Add and list the file path to the data.</li> <li>Click on the file path and then Scan to check for new data.</li> </ul>"},{"location":"scrapbook/dna/denovo/pacbio/#run","title":"Run","text":"<ul> <li>Go back to the top tab Design Job.</li> <li>Go to Create New.</li> <li>An Analysis window should appear. Check the box next to De novo assembly, then Next.</li> <li>Under Job Name enter a name.</li> <li>Under Protocols choose RS_HGAP_Assembly.3.</li> </ul> <ul> <li>There is an ellipsis underneath Protocols - click on the ellipsis. This brings up the settings. Leave everything as is, except for: Click on Assembly. Change the Genome Size to an approximately correct size for the sample. Click Ok.  </li> </ul> <ul> <li>In the SMRT Cells Available window, select the file to be used. Click on the arrow to transfer these files to the SMRT Cells in Job window.</li> </ul> <ul> <li>Click Save.</li> <li>Next to Save, click Start.</li> <li>The Monitor Jobs window should open. As each step proceeds, new items will appear under the Reports and Data tabs on the left. Click on each of these items to see the details and graphs available, which will appear in the main pane. The default display in the main pane is \u201cOverview\u201d.</li> </ul> <ul> <li>FIXME: how long will it take for this example data.</li> </ul>"},{"location":"scrapbook/dna/denovo/pacbio/#output","title":"Output","text":"<ul> <li>The current running jobs will be under the Monitor Jobs tab. Click on the job to see the reports and data.</li> <li>The finished jobs will be under the View Data tab.</li> <li>A full ist of reports and terminology is here</li> <li>Reports: General: Filtering: look at the table showing the pre-filter and post-filter information.</li> </ul> <ul> <li> <p>FIXME: what are other graphs showing / why are there mapping/coverage graphs if a ref genome wasn\u2019t supplied?</p> </li> <li> <p>FIXME: what are the files under Data for - further analyses later? where would these be saved if we want to use later.</p> </li> <li> <p>BAM and BAI files: view reads aligned to assembly (IGV)</p> </li> </ul>"},{"location":"scrapbook/dna/denovo/pacbio/#next","title":"Next","text":"<ul> <li>Check assembly quality: for example, align to the same species in Mauve.</li> </ul>"},{"location":"scrapbook/dna/denovo/pacbio/#links-to-more-information","title":"Links to more information:","text":"<ul> <li>Finishing bacterial genomes</li> </ul>"},{"location":"scrapbook/dna/denovo/spades/","title":"Spades - command line","text":"<p>FIXME: add general info about spades (copy from galaxy-spades)</p>"},{"location":"scrapbook/dna/denovo/spades/#start","title":"Start","text":"<ul> <li>open your mGVL (e.g. via ssh in terminal)</li> <li>check spades is installed: <code>which spades</code></li> <li>the path to spades should appear</li> <li>FIXME: it\u2019s already loaded? seems to work</li> <li> <p>make a new directory for these analyses: <code>mkdir spades</code></p> </li> <li> <p>copy the read files into your mGVL</p> <ul> <li>e.g. R1.fastq and R2.fastq (e.g. download from the galaxy workshops)</li> <li>in terminal, navigate to the folder containing these files</li> <li><code>scp &lt;file names&gt; &lt;user@mGVL:/path to put data&gt;</code></li> </ul> </li> </ul>"},{"location":"scrapbook/dna/denovo/spades/#run-spades","title":"Run spades","text":"<pre><code>spades.py -1 R1.fastq -2 R2.fastq -k 33,55,77 -o output\n</code></pre>"},{"location":"scrapbook/dna/denovo/spades/#output","title":"Output","text":"<ul> <li>Go to the folder called output<ul> <li>contigs.fasta</li> <li>scaffolds.fasta</li> <li>assembly_graph.fastg</li> <li>subfolder: corrected reads [FIXME explain]</li> </ul> </li> </ul>"},{"location":"scrapbook/dna/denovo/spades/#what-next","title":"What next?","text":"<ul> <li> <p>view assembly_graph.fasta in Bandage</p> </li> <li> <p>generate summary statistics with Quast</p> </li> </ul>"},{"location":"scrapbook/dna/denovo/velvet/","title":"Velvet","text":"<p>cmdline</p>"},{"location":"scrapbook/dna/denovo/vopt/","title":"Velvet","text":"<p>cmdline</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/","title":"Galaxy - Velvet","text":"<p>Modified from LSCC tutorial by Simon Gladman - VLSCI</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#tutorial-overview","title":"Tutorial Overview","text":"<p>In this tutorial we cover the concepts of Microbial de novo assembly using a very small synthetic dataset from a well studied organism.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#background","title":"Background","text":"<p>Where is the data in this tutorial from?</p> <p>The data for this tutorial is from a whole genome sequencing experiment of a multi-drug resistant strain of the bacterium Staphylococcus aureus. The DNA was sequenced using an Illumina GAII sequencing machine. The data we are going to use consists of about 4 million x 75 base-pair, paired end reads (two FASTQ read files, one for each end of a DNA fragment.) The data was downloaded from the NCBI Short Read Archive (SRA) (http://www.ncbi.nlm.nih.gov/sra/). The specific sample is a public dataset published in April 2012 with SRA accession number ERR048396.</p> <p>We will also use a FASTA file containing the sequences of the Illumina adapters used in the sequencing process. It is desirable to remove these as they are artificial sequences and not part of the bacterium that was sequenced.</p> <p>We will use software called Velvet (Zerbino et al 2008) for the main de novo assembly, as well as some other peripheral software for pre- and post-processing of the data. Details of these can be found in the background document linked above.</p> <p>The protocol:</p> <p>We are performing a de novo assembly of the read data into contigs and then into scaffolds (appropriately positioned contigs loosely linked together). We firstly need to check the quality of the input data as this will help us choose the most appropriate range of input parameters for the assembly and will guide us on an appropriate quality trimming/cleanup strategy. We will then use an iterative method to assemble the reads using the Velvet Optimiser (a program that performs lots of Velvet assemblies searching for an optimum outcome.) Once this is complete we will obtain summary statistics on the final results (contigs) of the assembly.</p> <p>More information about this protocol at the end of this tutorial.</p> <p>The protocol in a nutshell:</p> <p>Input: Raw reads from sequencer run on microbial DNA sample.</p> <p>Output: File of assembled scaffolds/contigs and associated information.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#input-data","title":"Input data","text":"<ol> <li>On the Galaxy tools panel, click on Get data -&gt; Upload File.</li> <li>Click on the Paste/Fetch Data button.</li> <li>Paste the URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/ERR048396_1.fastq.gz into the text box. Change the type to fastqsanger (Not fastqcsanger).</li> <li>Click on the Paste/Fetch Data button again.</li> <li>Paste the URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/ERR048396_2.fastq.gz into the text box and change it\u2019s type to fastqsanger as well.</li> <li>Repeat the process for the last URL: https://swift.rc.nectar.org.au:8888/v1/AUTH_377/public/Assembly/illumina_adapters.fna , but make it\u2019s type fasta</li> <li>Click on the Start button. Once all of the uploads are at 100%, click on the Close button.</li> <li>When the files have finished uploading, rename them to \u2018ERR048396_1.fastq\u2019, \u2018ERR048396_2.fastq\u2019 and \u2018illumina_adapters.fna\u2019 respectively by clicking on the  icon to the top right of the file name in the right hand Galaxy panel (the history panel)</li> </ol> <p>You should now have the following files in your Galaxy history:</p> <ul> <li>ERR048396_1.fastq - forward reads in fastq format</li> <li>ERR048396_2.fastq - reverse reads in fastq format</li> <li>illumina_adapters.fa - Illumina adapter sequences in fasta format</li> </ul> <p>Click on the  icon to the top right of each fastq file to view the first part of the file</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#section-1-quality-control","title":"Section 1: Quality control","text":"<p>The basic process here is to collect statistics about the quality of the reads in the sample FASTQ readsets. We will then evaluate their quality and choose an appropriate regime for quality filtering using Trimmomatic (a FASTQ read quality trimmer.)</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#run-fastqc-on-both-input-read-files","title":"Run FastQC on both input read files","text":"<ol> <li>From the tools menu in the left hand panel of Galaxy, select NGS QC and manipulation &gt; FastQC: Comprehensive QC (down the bottom of this category) and run with these parameters:<ul> <li>\u201cFASTQ reads\u201d: ERR048396_1.fastq</li> <li>Use default for other fields</li> </ul> </li> <li>Click Execute</li> <li>Now repeat the above process on the second read file: ERR048396_2.fastq</li> </ol> <p>It is important to do both read files as the quality can be very different between them.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-1-screenshot-of-fastqc-interface-in-galaxy","title":"Figure 1: Screenshot of FastQC interface in Galaxy","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-the-fastqc-output","title":"Examine the FastQC output","text":"<p>You should have two output objects from the first step:</p> <ul> <li>FastQC_ERR048396_1.fastqc.html</li> <li>FastQC_ERR048396_2.fastqc.html</li> </ul> <p>These are a html outputs which show the results of all of the tests FastQC performed on the read files.</p> <ol> <li>Click on the  icon of each of these objects in turn to see the FastQC output.</li> </ol> <p>The main parts of the output to evaluate are:</p> <ul> <li>Basic statistics. This section tells us that the ASCII quality encoding format used was Sanger/Illumina 1.9 and the reads are length 75 and the percent GC content of the entire file is 35%.</li> <li>Per base sequence quality. In the plot you should see that most of the early bases are up around the \u201832\u2019 mark and then increase to 38-40, which is very high quality; The spread of quality values for the last few bases increases and some of the outliers have quality scores of less than 30. This is a very good quality dataset. 20 is often used as a cutoff for reliable quality.</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-2-screenshot-of-fastqc-output-in-galaxy","title":"Figure 2: Screenshot of FastQC output in Galaxy","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#quality-trim-the-reads-using-trimmomatic","title":"Quality trim the reads using Trimmomatic.","text":"<ol> <li> <p>From the tools menu in the left hand panel of Galaxy, select NGS QC and manipulation &gt; Trimmomatic and run with these parameters (only the non-default selections are listed here):</p> <ul> <li>\u201cInput FASTQ file (R1/first of pair)\u201d: ERR048396_1.fastq</li> <li>\u201cInput FASTQ file (R2/second of pair)\u201d: ERR048396_2.fastq</li> <li>\u201cPerform initial ILLUMINACLIP step?\u201d: Yes</li> <li>\u201cAdapter sequences to use\u201d: TruSeq3 (additional seqs) (paired end, for MiSeq and HiSeq)</li> <li>\u201cHow accurate \u2026 read alignment\u201d: 40</li> <li>\u201cHow accurate \u2026 against a read\u201d: 15</li> <li>We will use the default settings for the SLIDING_WINDOW operation but we need to add a few more Trimmomatic operations.</li> <li>Click Insert Trimmomatic Operation<ul> <li>Add Cut bases \u2026 (LEADING)</li> <li>\u201cMinimum quality required to keep a base\u201d: 15</li> </ul> </li> <li>Repeat the Insert Trimmomatic Operation for:<ul> <li>Trim trailing bases, minimum quality: 15</li> <li>Minimum length read: 35</li> </ul> </li> </ul> </li> <li> <p>Click Execute </p> </li> </ol>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-3-screenshot-of-trimmomatic-inputs-in-galaxy","title":"Figure 3: Screenshot of Trimmomatic inputs in Galaxy","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-the-trimmomatic-output-fastq-files","title":"Examine the Trimmomatic output FastQ files.","text":"<p>You should have 4 new objects in your history from the output of Trimmomatic:</p> <ul> <li>Trimmomatic on data 2 and data 1 (R1 Paired)</li> <li>Trimmomatic on data 2 and data 1 (R1 Unpaired)</li> <li>Trimmomatic on data 2 and data 1 (R2 Paired)</li> <li>Trimmomatic on data 2 and data 1 (R2 Unpaired)</li> </ul> <p>Click on the  on one of the objects to look at its contents. You\u2019ll notice that not all of the reads are the same length now, as they have had the illumina adapters cut out of them and they\u2019ve been quality trimmed.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#section-2-assemble-reads-into-contigs-with-velvet-and-the-velvet-optimiser","title":"Section 2: Assemble reads into contigs with Velvet and the Velvet Optimiser","text":"<p>The aim here is to assemble the trimmed reads into contigs/scaffolds using Velvet and the Velvet Optimiser.</p> <p>We will use a single tool, Velvet Optimiser, which takes the trimmed reads from Trimmomatic and performs numerous Velvet assemblies to find the best one. We need to add the reads in two separate libraries. One for the still paired reads and the other for the singleton reads orphaned from their pairs by the trimming process.</p> <p>Click here for a more detailed explanation of Velvet assemblies and the Velvet Optimiser</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#de-novo-assembly-of-the-reads-into-contigs","title":"De novo assembly of the reads into contigs","text":"<ol> <li>From the tools menu in the left hand panel of Galaxy, select NGS: Assembly -&gt; Velvet Optimiser and run with these parameters (only the non-default selections are listed here):<ul> <li>\u201cStart k-mer value\u201d: 55</li> <li>\u201cEnd k-mer value\u201d: 69</li> <li>In the input files section:<ul> <li>\u201cSelect first set of reads\u201d: Trimmomatic on data 2 and data 1 (R1 paired)</li> <li>\u201cSelect second set of reads\u201d: Trimmomatic on data 2 and data 1 (R2 paired)</li> </ul> </li> <li>Click the Insert Input Files button and add the following:<ul> <li>\u201cSingle or paired end reads\u201d: Single</li> <li>\u201cSelect the reads\u201d: Trimmomatic on data 2 and data 1 (R1 unpaired)</li> </ul> </li> <li>Repeat the above process to add the other unpaired read set Trimmomatic on data 2 and data 1 (R2 unpaired) as well.</li> </ul> </li> <li>Click Execute.</li> </ol>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-4-screenshot-of-velvet-optimiser-inputs-in-galaxy","title":"Figure 4: Screenshot of Velvet Optimiser inputs in Galaxy","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-assembly-output","title":"Examine assembly output","text":"<p>Once step 1 is complete, you should now have 2 new objects in your history: * VelvetOptimiser on data 9, data 7, and others: Contigs * VelvetOptimiser on data 9, data 7, and others: Contig Stats</p> <p>Click on the  icon of the various objects.</p> <ul> <li> <p>Contigs: You\u2019ll see the first MB of the file. Note that the contigs are named NODE_XX_length_XXXX_cov_XXX.XXX. This information tells you how long (in k-mer length) each contig is and what it\u2019s average k-mer coverage is. (See detailed explanation of Velvet and Velvet Optimiser for explanation of k-mer coverage and k-mer length.)</p> </li> <li> <p>Contig stats: This shows a table of the contigs and their k-mer coverages and which read library contributed to the coverage. It is interesting to note that some of them have much higher coverage than the average. These are most likely to be repeated contigs. (Things like ribosomal RNA and IS elements.)</p> </li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-5-screenshot-of-assembled-contigs-a-and-contig-stats-b","title":"Figure 5: Screenshot of assembled contigs (a) and contig stats (b)","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#a","title":"a","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#b","title":"b","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#calculate-some-statistics-on-the-assembled-contigs","title":"Calculate some statistics on the assembled contigs","text":"<ol> <li>From the tools menu in the left hand panel of Galaxy, select FASTA Manipulation -&gt; Fasta Statistics and run with these parameters:<ul> <li>\u201cFasta or multifasta file\u201d: Velvet Optimiser \u2026 Contigs</li> </ul> </li> <li>Click Execute</li> <li>Examine the Fasta Stats output</li> </ol> <p>You should now have one more object in your history: Fasta Statistics on data 10: Fasta summary stats</p> <p>Click on the  icon next to this object and have a look at the output. You\u2019ll see a statistical summary of the contigs including various length stats, the % GC content, the n50 as well as the number of contigs and the number of N bases contained in them.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#section-3-extension","title":"Section 3: Extension.","text":"<p>Examine the contig coverage depth and blast a high coverage contig against a protein database.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#examine-the-contig-coverage-depth","title":"Examine the contig coverage depth.","text":"<p>Look at the Contig Stats data (Velvet Optimiser vlsci on data 8, data 9, and data 7: Contig stats) by clicking on the  icon. Note that column 2 contig length (lgth), shows a number of very short contigs (some are length 1).</p> <ul> <li>We can easily filter out these short contigs from this information list by using the Filter and Sort -&gt; Filter tool.</li> <li>Set the following:<ul> <li>\u201cFilter\u201d: Velvet Optimiser on data 8, data 7 and others: Contig stats</li> <li>\u201cWith the following condition\u201d: c2 &gt; 100</li> </ul> </li> <li>Click Execute</li> </ul> <p>The new data object in the history is called: Filter on data 11.</p> <p>Click on its  icon to view it. Look through the list taking note of the coverages. Note that the average of the coverages (column 6) seems to be somewhere between 16 and 32.  There are a lot of contigs with coverage 16. We could say that these contigs only appear once in the genome of the bacteria. Therefore, contigs with double this coverage would appear twice. Note that some of the coverages are &gt;400! These contigs will appear in the genome more than 20 times!</p> <p>Lets have a look at one of these contigs and see if we can find out what it is.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#extract-a-single-sequence-from-the-contigs-file","title":"Extract a single sequence from the contigs file.","text":"<p>Note the contig number (column 1 in the Contig stats file) of a contig with a coverage of over 300. There should be a few of them. We need to extract the fasta sequence of this contig from the contigs multifasta so we can see it more easily.</p> <p>To do this we will use the tool:</p> <ul> <li>Fasta manipulation -&gt; Fasta Extract Sequence</li> <li>Set the following:<ul> <li>\u201cFasta or multifasta file\u201d: Velvet Optimiser \u2026 : Contigs</li> <li>\u201cSequence ID (or partial): NODE_1_\u2026 (for example)</li> </ul> </li> <li>Click Execute</li> </ul> <p>The new data object in the history is called: Fasta Extract Sequence on data 10: Fasta.</p> <p>Click on its  icon to view it. It is a single sequence in fasta format.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#blast-sequence-to-determine-what-it-contains","title":"Blast sequence to determine what it contains.","text":"<p>We want to find out what this contig is or what kind of coding sequence (if any) it contains. So we will blast the sequence using the NCBI blast website. (External to Galaxy). To do this:</p> <ul> <li>Bring up the sequence of the contig into the main window of the browser by clicking on the  icon if it isn\u2019t already.</li> <li>Select the entire sequence by clicking and dragging with the mouse or by pressing ctrl-a in the browser.</li> <li>Copy the selected sequence to the clipboard.</li> <li>Open a new tab of your browser and point it to: http://blast.ncbi.nlm.nih.gov/Blast.cgi</li> <li>Under the BASIC BLAST section, click \u201cblastx\u201d.</li> <li>Paste the sequence into the large text box labelled: Enter Accession number(s), gi(s) or FASTA sequence(s).</li> <li>Change the Genetic code to: Bacteria and Archaea (11)</li> <li>Click the button labelled: BLAST</li> </ul> <p>After a while the website will present a report of the blast run. Note that the sequence we blasted (if you chose NODE_1) is identical to part of a transposase gene (IS256) from a similar Staphylococcus aureus bacteria. These transposases occur frequently as repeats in bacterial genomes and so we shouldn\u2019t be surprised at its very high coverage.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#figure-6-screenshot-of-the-output-from-the-ncbi-blast-website","title":"Figure 6: Screenshot of the output from the NCBI Blast website","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#de-novo-assembly-with-velvet-and-the-velvet-optimiser","title":"De novo assembly with Velvet and the Velvet Optimiser.","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#velvet","title":"Velvet","text":"<p>Velvet is software to perform dna assembly from short reads by manipulating de Bruijn graphs. It is capable of forming long contigs (n50 of in excess of 150kb) from paired end short reads. It has several input parameters for controlling the structure of the de Bruijn graph and these must be set optimally to get the best assembly possible. Velvet can read Fasta, FastQ, sam or bam files. However, it ignores any quality scores and simply relies on sequencing depth to resolve errors. The Velvet Optimiser software performs many Velvet assemblies with various parameter sets and searches for the optimal assembly automatically.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#de-bruijn-graphs","title":"de Bruijn graphs","text":"<p>A de Bruijn graph is a directed graph which represents overlaps between sequences of symbols. The size of the sequence contained in the nodes of the graph is called the word-length or k-mer size. In Figure 2, the word length is 3. The two symbols are 1 and 0. Each node in the graph has the last two symbols of the previous node and 1 new symbol. Sequences of symbols can be produced by traversing the graph and adding the \u201cnew\u201d symbol to the growing sequence.</p> <p>Figure 2: A de Bruijn graph of word length 3 for the symbols 1 and 0.</p> <p></p> <p>From: https://cameroncounts.wordpress.com/2015/02/28/1247/</p> <p>Velvet constructs a de Bruijn graph of the reads. It has 4 symbols (A, C, G and T - N\u2019s are converted to A\u2019s) The word length (or k-mer size) is one of Velvet\u2019s prime parameters.</p> <p>Velvet is not the only assembly software that works in this manner. Euler, Edena and SOAP de novo are examples of others.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#the-velvet-algorithm","title":"The Velvet algorithm","text":""},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-1-hashing-the-reads","title":"Step 1: Hashing the reads.","text":"<ul> <li>Velvet breaks up each read into k-mers of length k.</li> <li>A k-mer is a k length subsequence of the read.</li> <li>A 36 base pair long read would have 6 different 31-mers.</li> <li>The k-mers and their reverse complements are added to a hash table to categorize them.</li> <li>Each k-mer is stored once but the number of times it appears is also recorded.</li> <li>This step is performed by \u201cvelveth\u201d - one of the programs in the Velvet suite.</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-2-constructing-the-de-bruijn-graph","title":"Step 2: Constructing the de Bruijn graph.","text":"<ul> <li>Velvet adds the k-mers one-by-one to the graph.</li> <li>Adjacent k-mers overlap by k-1 nucleotides.</li> <li>A k-mer which has no k-1 overlaps with any k-mer already on the graph starts a new node.</li> <li>Each node stores the average number of times its k-mers appear in the hash table.</li> <li>Figure 3 shows a section of a de Bruijn graph constructed by Velvet for k=5.</li> <li>Different sequences can be read off the graph by following a different path through it. (Figure 3)</li> </ul> <p>Figure 3: Section of a simple de Bruijn graph of reads with k-mer size 5. Coloured sequences are constructed by following the appropriately coloured line through the graph. (Base figure Zerbino et al 2008.)</p> <p></p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-3-simplification-of-the-graph","title":"Step 3: Simplification of the graph.","text":"<ul> <li>Chain merging: When there are two connected nodes in the graph without a divergence, merge the two nodes.</li> <li>Tip clipping: Tips are short (typically) chains of nodes that are disconnected on one end. They will be clipped if their length is &lt; 2 x k or their average k-mer depth is much less than the continuing path.</li> <li>Bubble removal: Bubbles are redundant paths that start and end at the same nodes (Figure 4.) They are created by sequencing errors, biological variants or slightly varying repeat sequences.</li> <li>Velvet compares the paths using dynamic programming.</li> <li>If they are highly similar, the paths are merged.</li> <li>Error removal: Erroneous connections are removed by using a \u201ccoverage cutoff\u201d. Genuine short nodes which cannot be simplified should have a high coverage. An attempt is made to resolve repeats using the \u201cexpected coverage\u201d of the graph nodes.</li> <li>Paired end read information: Velvet uses algorithms called \u201cPebble\u201d and \u201cRock Band\u201d (Zerbino et al 2009) to order the nodes with respect to one another in order to scaffold them into longer contigs.</li> </ul> <p>Figure 4: Representation of \u201cbubbles\u201d in a Velvet de Bruijn graph. (Base figure Zerbino et al 2008.)</p> <p></p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#step-4-read-off-the-contigs","title":"Step 4: Read off the contigs.","text":"<ul> <li>Follow the chains of nodes through the graph and \u201cread off\u201d the bases to create the contigs.</li> <li>Where there is an ambiguous divergence/convergence, stop the current contig and start a new one.</li> </ul>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#k-mer-size-and-coverage-cutoff-values","title":"K-mer size and coverage cutoff values","text":"<p>The size of the k-mers that construct the graph is very important and has a large effect on the outcome of the assembly. Generally, small k-mers create a graph with increased connectivity, more ambiguity (more divergences) and less clear \u201cpaths\u201d through the graph. Large k-mers produce graphs with less connectivity but higher specificity. The paths through the graph are clearer but they are less connected and prone to breaking down.</p> <p>The coverage cutoff c used during the error correction step of Velvet also has a significant effect on the output of the assembly process. If c is too low, the assembly will contain nodes of the graph that are the product of sequencing errors and misconnections. If c is too high, it can create mis-assemblies in the contigs and destroys lots of useful data.</p> <p>Each dataset has its own optimum values for the k-mer size and the coverage cutoff used in the error removal step. Choosing them appropriately is one of the challenges faced by new users of the Velvet software.</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#velvet-optimiser","title":"Velvet Optimiser","text":"<p>The Velvet Optimiser chooses the optimal values for k and c automatically by performing many runs of Velvet (partially in parallel) and interrogating the subsequent assemblies.  It uses different optimisation functions for k and c and these can be user controlled.</p> <p>It requires the user to input a range of k values to search (to cut down on running time).</p>"},{"location":"scrapbook/dna/denovo/galaxy-velvet/galaxy-velvet/#references","title":"References","text":"<p>http://en.wikipedia.org/wiki/Sequence_assembly</p> <p>Zerbino DR, Birney E, Velvet: algorithms for de novo short read assembly using de Bruijn graphs, Genome Research, 2008, 18:821-829</p> <p>Zerbino DR, McEwen GK, Margulies EH, Birney E, Pebble and rock band: heuristic resolution of repeats and scaffolding in the velvet short-read de novo assembler. PLoS One. 2009; 4(12):e8407.</p> <p>Gladman SL, Seemann T, Velvet Optimiser, http://www.vicbioinformatics.com/software.shtml 2009.</p>"},{"location":"scrapbook/dna/pan/mauve/","title":"Mauve","text":"<p>This tutorial demonstrates how to use the Mauve software to align genomes. For example, a de novo assembly can be compared against a reference genome to check the assembly. Or, changes between two or more genomes can be examined.</p> <p>Link to Mauve</p>"},{"location":"scrapbook/dna/pan/mauve/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>mGVL instance if using Lubuntu desktop</li> </ul>"},{"location":"scrapbook/dna/pan/mauve/#start","title":"Start","text":"<ul> <li>FIXME: use linux version in Lubuntu desktop, or local version e.g. Mac ?</li> <li>or you can use in the cmd line</li> </ul>"},{"location":"scrapbook/dna/pan/mauve/#input","title":"Input","text":"<ul> <li>2+ genomes in FASTA(.fasta or .fna)/gbk format</li> <li>FIXME: choose data</li> </ul>"},{"location":"scrapbook/dna/pan/mauve/#how-it-works","title":"How it works","text":"<ul> <li>Mauve finds structural variants in genomes.</li> <li>It aligns genoms and finds homologous regions, either from a common ancestor (orthologs) or lateral transfer (xenologs).</li> </ul>"},{"location":"scrapbook/dna/pan/mauve/#run","title":"Run","text":"<ul> <li>File: Align with progressiveMauve</li> <li>Add sequences: select 2+ genome FASTA files</li> <li>Output: provide a name for the output folder</li> <li>Align</li> <li>the Mauve Console will appear while Mauve is running, showing the job status.</li> </ul>"},{"location":"scrapbook/dna/pan/mauve/#output","title":"Output","text":"<ul> <li>FIXME: screenshots</li> <li>one genome per line</li> <li>genomic regions are coloured blocks: locally co-linear blocks (LCB): a block of genome that is unchanged inside, but as a block might have moved/inverted etc.</li> <li>you can export a list of annotated homologous features</li> </ul>"},{"location":"scrapbook/dna/pan/mauve/#next","title":"Next","text":""},{"location":"scrapbook/dna/pan/orthomcl/","title":"OrthoMCL","text":"<p>cmdline - probably not worth bothering</p>"},{"location":"scrapbook/dna/pan/roary/","title":"Roary","text":"<p>cmdline</p> <p>This tutorial demonstrates how to calculate the pan and core genomes of a set of input bacterial species, using Roary.</p> <p>Roary code and manual on github</p> <p>Roary paper</p>"},{"location":"scrapbook/dna/pan/roary/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>background: pan genomes</li> <li>a mGVL instance</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#start","title":"Start","text":"<ul> <li>via local Terminal: in your terminal, ssh into your mGVL, but make sure you put in -X -Y after ssh so that xquartz can view files later. (FIXME: word better)</li> <li>or via virtual desktop: Go to your mGVL dashboard. Click on the link to the Lubuntu desktop. A virtual desktop will open in a new browser window. Enter username: ubunutu; and your GVL password. Click on terminal in the top left corner.</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#input-data","title":"Input data","text":"<ul> <li>Roary takes .gff files produced by Prokka. A gff file has sequences and annotations.</li> <li>file formats FIXME: link to proper page</li> <li>Get files into mGVL. (FIXME: explain how, wget etc or from GenomeSpace)</li> <li>put all gff files into a folder</li> <li>FIXME: choose a good sample set - ideally something that usefully shows how AMR genes can be present/absence in a group? for a draft can use the Listeria tutorial at https://github.com/microgenomics/tutorials/blob/master/pangenome.md</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#run","title":"Run","text":"<ul> <li>navigate into the place where the gff folder is.</li> </ul> <pre><code>roary -f ./results ./gff_files/*.gff\n</code></pre> <ul> <li>\u201c-f ./results\u201d puts the output into a directory called results</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#how-it-works","title":"How it works","text":"<ul> <li>Based on the input genomes, Roary works out which genes are shared between all (core) and which are not (accessory).</li> <li>It uses the protein-coding genes from each of the input genomes.</li> <li>converts to protein seqs</li> <li>similar protein seqs are clustered progressively.</li> <li>each sample: will be labelled with presence/absence of orthologous genes.</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#output","title":"Output","text":""},{"location":"scrapbook/dna/pan/roary/#summary-statistics","title":"summary statistics:","text":"<pre><code>more summary_statistics.txt\n</code></pre> <ul> <li>you will see the number of core genes, shell genes, etc.</li> <li><code>q</code> to exit viewing</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#gene-presenceabsence-graphically","title":"gene presence/absence graphically:","text":"<pre><code>roary2svg.pl gene_presence_absence.csv &gt; pan_genome.svg\n</code></pre> <ul> <li>(if you have logged in with -X -Y)</li> </ul> <pre><code>firefox pan_genome.svg &amp;\n</code></pre> <ul> <li>then <code>enter</code></li> <li>the &amp; makes it run in the background</li> <li>a firefox window should open with the svg image</li> <li>(later: close the firefox window to stop this job running in the background)</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#list-of-genes-that-are-presentabsent","title":"list of genes that are present/absent:","text":"<ul> <li>view the gene_presence_absence.csv by (FIXME)</li> <li>lots of information about this file in the roary website (FIXME summarize?)</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#query-the-pan-genome","title":"query the pan genome:","text":"<ul> <li>copy the input .gff files into the results folder (FIXME: do this earlier)</li> <li>cd into this folder</li> </ul> <pre><code>query_pan_genome -a intersection *.gff\n</code></pre> <ul> <li>this finds the core genes</li> </ul> <pre><code>more pan_genome_results\n</code></pre> <ul> <li>shows the list of genes found in the core genome.</li> <li><code>q</code> to exit viewing</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#advanced-options","title":"Advanced options","text":"<p>FIXME: update firefox on mGVL so can run phandango</p>"},{"location":"scrapbook/dna/pan/roary/#run-roary-and-create-an-alignment-of-core-genes","title":"Run roary and create an alignment of core genes:","text":"<pre><code>roary -f ./results -e -n -p 8 ./gff_files/*.gff\n</code></pre> <ul> <li>\u201c-f ./results\u201d puts the output into a directory called results</li> <li>\u201c-e -n\u201d creates an alignment of core genes using mafft</li> <li>\u201c-p 8\u201d gives 8 threads - optional, if you know how many you have</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#generate-a-tree-based-on-the-presenceabsence-of-core-genes","title":"Generate a tree based on the presence/absence of core genes:","text":"<ul> <li>navigate into the results folder that you want to use.</li> </ul> <pre><code>FastTree -nt -gtr core_gene_alignment.aln &gt; my_tree.newick\n</code></pre> <ul> <li>(By default, roary will also have created a (very quick) tree from the accessory genes.)</li> <li>FastTree information and options.</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#use-roary_plotspy-to-generate-plots","title":"Use roary_plots.py to generate plots:","text":"<ul> <li>navigate into the results folder that you want to use.</li> </ul> <pre><code>python roary_plots.py core_gene_alignment.nwk gene_presence_absence.csv\n</code></pre> <ul> <li>output: pangenome matrix, frequency plot, pie chart.</li> <li>view these by typing <code>firefox [filename]</code> and a firefox window will open to show the image. You need to close the window before you open the next image.</li> </ul>"},{"location":"scrapbook/dna/pan/roary/#what-next","title":"What next?","text":"<p>View using Phandango; tutorial here.</p>"},{"location":"scrapbook/dna/pan/roary/#more-information","title":"More information","text":"<ul> <li>another Roary tutorial</li> </ul>"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/","title":"FastQC - commandline","text":""},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#start","title":"Start","text":"<ul> <li>on your local machine, make sure XQuartz is installed. This doesn\u2019t have to be open - it will open automatically later.</li> <li>in terminal, ssh to your virtual machine with -X and -Y, e.g. <code>ssh -X -Y ubuntu@111.111.111.111</code> (the -X and -Y means it will use your local XQuartz to display some files).</li> <li><code>module load fastqc_dist_0_10_1</code></li> </ul> <ul> <li>navigate to where you want to make a FastQC analysis folder.</li> <li>Make a folder: <code>mkdir fastqc_analyses</code></li> <li>Move to that folder: <code>cd fastqc_analyses</code></li> </ul>"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#input","title":"Input","text":"<ul> <li>move your input reads into this folder.</li> </ul>"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#run","title":"Run","text":"<ul> <li><code>fastqc R1reads.fastq</code> [this runs fastqc]</li> <li>type <code>fastqc --help</code> to see settings that you can change, and defaults</li> </ul>"},{"location":"scrapbook/dna/qualitycontrol/fastqc_cmdline/#output","title":"Output","text":"<ul> <li>R1reads_fastqc: folder containing the output, e.g. fastqc_report.html</li> <li>to view this, type: <code>firefox fastqc_report.html</code></li> <li>firefox should open and display the report (you may get an error message in terminal but ignore this).</li> </ul>"},{"location":"scrapbook/dna/qualitycontrol/qc/","title":"Genomics QC","text":"<p>Phred</p> <p>Adapters</p> <p>Trimming</p> <p>Clipping</p> <p>Depth</p>"},{"location":"scrapbook/dna/qualitycontrol/trimmomatic_cmdline/","title":"Trimmomatic - command line","text":"<p>[from LSCC docs; FIXME: add info &amp; data; test]</p> <p>for Paired End Files:</p> <pre><code>java -cp &lt;path to trimmomatic jar&gt; org.usadellab.trimmomatic.TrimmomaticPE\n</code></pre> <p>for Single End Files</p> <pre><code>java -cp &lt;path to trimmomatic jar&gt; org.usadellab.trimmomatic.TrimmomaticSE\n</code></pre> <p>Trimmomatic can perform many read trimming functions sequentially.</p>"},{"location":"scrapbook/dna/snps/bwa_mem/","title":"BWA-MEM in Galaxy","text":""},{"location":"scrapbook/dna/snps/bwa_mem/#introduction","title":"Introduction","text":"<p>This tool is used to find variants. (Note: BWA-MEM can also be used to map sequence reads to a reference for the purposes of assembly.) BWA stands for \u201cBurrows-Wheeler Aligner\u201d; more information and manual here.</p>"},{"location":"scrapbook/dna/snps/bwa_mem/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>map reads to reference using BWA-MEM, and</li> <li>identify variants in the output files.</li> </ol>"},{"location":"scrapbook/dna/snps/bwa_mem/#data","title":"Data","text":""},{"location":"scrapbook/dna/snps/bwa_mem/#run","title":"Run","text":"<ul> <li>Go to Tools \u2192 NGS Analysis \u2192 NGS: Mapping \u2192 Map with BWA-MEM</li> </ul>"},{"location":"scrapbook/dna/snps/bwa_mem/#output","title":"Output","text":"<p>SAM file</p>"},{"location":"scrapbook/dna/snps/bwa_mem/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/dna/snps/galaxy/","title":"Galaxy","text":"<p>need to make a workflow  BWA samtools or varscan vcf filter?</p>"},{"location":"scrapbook/dna/snps/snippy/","title":"Snippy","text":"<p>cmdline</p> <p>This tutorial will demonstrate how to find variants in a bacterial genome using Snippy. Variants are found by comparing to a reference genome of the same species.</p> <p>Github link to Snippy</p>"},{"location":"scrapbook/dna/snps/snippy/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>connect to your GVL - cmdline</li> <li>background knowledge: variant calling</li> </ul>"},{"location":"scrapbook/dna/snps/snippy/#start","title":"Start","text":"<ul> <li>log in to your virtual machine via terminal</li> <li>navigate to the place where you want Snippy to run.</li> <li>make a folder called snippy - <code>mkdir snippy</code></li> <li>move into that folder - <code>cd snippy</code></li> </ul>"},{"location":"scrapbook/dna/snps/snippy/#input","title":"Input","text":""},{"location":"scrapbook/dna/snps/snippy/#raw-sequence-reads","title":"Raw sequence reads","text":"<ul> <li>Illumina paired-end reads from a bacteria in FASTQ format.</li> <li>These reads are from Pasteurella multocida, from EMBL-EBI ENA. We will use <code>wget</code> to download them via FTP.</li> <li>in the snippy folder,</li> </ul> <pre><code>wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR125/003/SRR1257473/SRR1257473_1.fastq.gz\n</code></pre> <pre><code>wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR125/003/SRR1257473/SRR1257473_2.fastq.gz\n</code></pre> <ul> <li>These files are compressed and so end in .gz. Snippy can use these .gz read files directly without unzipping.</li> </ul>"},{"location":"scrapbook/dna/snps/snippy/#reference-genome","title":"Reference genome","text":"<ul> <li>Reference genome from the same species, Pasteurella multocida, from EMBL-EBI Ensembl genomes, in FASTA format.</li> <li>in the snippy folder,</li> </ul> <pre><code>wget ftp://ftp.ensemblgenomes.org/pub/bacteria/release-31/fasta/bacteria_104_collection/pasteurella_multocida_subsp_multocida_gca_001027695/dna/Pasteurella_multocida_subsp_multocida_gca_001027695.ASM102769v1.31.dna.genome.fa.gz\n</code></pre> <ul> <li>This file is also compressed into .gz format. This needs to be unzipped:</li> </ul> <pre><code>gunzip ftp://ftp.ensemblgenomes.org/pub/bacteria/release-31/fasta/bacteria_104_collection/pasteurella_multocida_subsp_multocida_gca_001027695/dna/Pasteurella_multocida_subsp_multocida_gca_001027695.ASM102769v1.31.dna.genome.fa.gz\n</code></pre> <ul> <li>The file will now end in .fa (which is fasta format, and Snippy can use).</li> </ul>"},{"location":"scrapbook/dna/snps/snippy/#how-it-works","title":"How it works","text":"<ul> <li>Reads are mapped to the reference genome using BWA: this makes a BAM file</li> <li>BAM file and the ref genome sequence sent to Freebayes</li> <li>Freebayes finds differences between the reads and the reference, and calls the variants.</li> </ul>"},{"location":"scrapbook/dna/snps/snippy/#run-snippy","title":"Run Snippy","text":"<ul> <li>cpus: choose number of cpus to use [or it uses a default] - here we will use 16</li> <li>outdir: choose a name for the output directory, where results will go - here we will use \u201cmysnps\u201d</li> <li>ref: the input reference genome filename</li> <li>R1: the input R1 reads filename</li> <li>R2: the input R2 reads filename</li> <li>to run snippy:</li> </ul> <pre><code>snippy --cpus 16 --outdir mysnps --ref [filename.fa] --R1 [R1.fastq.gz] --R2 [R2.fastq.gz]\n</code></pre>"},{"location":"scrapbook/dna/snps/snippy/#output","title":"Output","text":"<ul> <li>17 output files</li> <li>list all the output files (that were put into the \u201cmysnps\u201d folder):</li> </ul> <pre><code>ls mysnps\n</code></pre> <ul> <li>look at the first 10 lines of the snps.tab file</li> </ul> <pre><code>head -10 mysnps/snps.tab\n</code></pre> <ul> <li>look at these columns: chromosome (CHROM), genomic position (POS), variant type (TYPE), nucleotide state in the ref (REF), nucleotide state in the input sample (ALT), and the frequency counts of REF and ALT (EVIDENCE).</li> <li>FIXME: screenshot with arrows</li> <li>FIXME: filter for quality?</li> <li>FIXME: load reference and the tabular vcf file into JBrowse/Artemis/IGV to view the genome and the snps.</li> <li>FIXME: is there anything we are looking for in particular? e.g. number of variants, existing known variants, variants in particular genes, AMR variants?</li> </ul>"},{"location":"scrapbook/dna/snps/snippy/#next","title":"Next","text":""},{"location":"scrapbook/dna/snps/background/background/","title":"Variants: Background","text":"<p>[from LSCC docs]</p>"},{"location":"scrapbook/dna/snps/background/background/#identifying-snps","title":"Identifying SNPs","text":"<p>There are many methods of identifying SNPs, but all rely on the per-base evidence provided by all the reads that have mapped to particular position in the sequence. So, it\u2019s useful to aggregate the evidence from all reads that relate to a particular base in the sequence. One method is to generate a pileup: a summary of sequence information from the entire set of reads across each relevant base in the reference sequence along with quality metrics relating to base quality and the mapping quality for each/all reads.</p> <p>see Pileup file information FIXME: can\u2019t link</p>"},{"location":"scrapbook/how_to/overview/","title":"Overview - Advanced Training","text":"<p>This section contains training modules for microbial genomics analyses. All analyses are performed using the microbial GVL (and occasionally, additional web-based tools), via the Galaxy interface or using the commandline.</p> <ol> <li> <p>Genome assembly: from raw DNA sequence reads to assembled genome.</p> <ul> <li>in Galaxy - using Illumina data</li> <li>on the commandline - using Illumina data</li> <li>in the mGVL SMRTPortal - using PacBio data</li> <li>on the commandline - using both PacBio data and Illumina data</li> </ul> </li> <li> <p>Genome annotation: from assembled genome to annotated genome.</p> <ul> <li>in Galaxy</li> <li>on the commandline</li> </ul> </li> <li> <p>Core and pan genomes: from assembled genomes to lists of shared genes and accessory genes.</p> <ul> <li>on the commandline</li> </ul> </li> <li> <p>Differential gene expression: from raw RNA sequence reads from two conditions to a list of differentially expressed genes.</p> <ul> <li>in Galaxy</li> </ul> </li> </ol> <p>For more information about using the GVL see http://genome.edu.au</p>"},{"location":"scrapbook/how_to/annotation/anno_galaxy/","title":"Annotation - Galaxy","text":""},{"location":"scrapbook/how_to/assembly/assembly_galaxy/","title":"Assembly - Galaxy","text":""},{"location":"scrapbook/how_to/pan/roary/","title":"Roary","text":""},{"location":"scrapbook/met/data/","title":"Metabolomics Data","text":"<p>Even less idea!</p>"},{"location":"scrapbook/met/qc/","title":"Metabolomics QC","text":""},{"location":"scrapbook/pro/data/","title":"Proteomics Data","text":"<p>No idea!</p>"},{"location":"scrapbook/pro/qc/","title":"Proteomics QC","text":"<p>Need a good protein reference FASTA to match against.</p> <p>Quantitative?</p>"},{"location":"scrapbook/protocols/annotation/","title":"Annotation","text":"<p>from raw reads to annotated genome</p>"},{"location":"scrapbook/protocols/annotation/#introduction","title":"Introduction","text":"<p>FIXME</p>"},{"location":"scrapbook/protocols/annotation/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>FIXME</li> <li>FIXME</li> <li>FIXME</li> </ol>"},{"location":"scrapbook/protocols/annotation/#main-tutorial","title":"Main Tutorial","text":"<p>FIXME</p> <p>Note</p> <p>Please take note of this because we care about you.</p> <p>Hint</p> <p>This is a useful tip for you because we like you.</p> <p>Warning</p> <p>Please be careful here, you could really mess things up.</p>"},{"location":"scrapbook/protocols/annotation/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/protocols/assembly/","title":"De novo assembly","text":""},{"location":"scrapbook/protocols/assembly/#introduction","title":"Introduction","text":"<p>FIXME</p>"},{"location":"scrapbook/protocols/assembly/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>FIXME</li> <li>FIXME</li> <li>FIXME</li> </ol>"},{"location":"scrapbook/protocols/assembly/#main-tutorial","title":"Main Tutorial","text":"<p>FIXME</p> <p>Note</p> <p>Please take note of this because we care about you.</p> <p>Hint</p> <p>This is a useful tip for you because we like you.</p> <p>Warning</p> <p>Please be careful here, you could really mess things up.</p>"},{"location":"scrapbook/protocols/assembly/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/protocols/dge/","title":"Differential gene expression","text":"<p>from raw RNA reads to statistical tests and viz of DGE</p>"},{"location":"scrapbook/protocols/dge/#introduction","title":"Introduction","text":"<p>FIXME</p>"},{"location":"scrapbook/protocols/dge/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>FIXME</li> <li>FIXME</li> <li>FIXME</li> </ol>"},{"location":"scrapbook/protocols/dge/#main-tutorial","title":"Main Tutorial","text":"<p>FIXME</p> <p>Note</p> <p>Please take note of this because we care about you.</p> <p>Hint</p> <p>This is a useful tip for you because we like you.</p> <p>Warning</p> <p>Please be careful here, you could really mess things up.</p>"},{"location":"scrapbook/protocols/dge/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/protocols/overview/","title":"Overview","text":"<p>FIXME: ideas - but we can delete this section if we want</p> <ul> <li>Workflows in Galaxy, with flowcharts</li> <li>Command line pipelines, make flowcharts</li> <li>Show various options at each stage (e.g. use tool x or y)</li> </ul> <p>Exemplar pipelines e.g.</p> <ul> <li> <p>DNA reads to genome (llumina)     e.g. FastQC, trimmomatic, Spades, view</p> </li> <li> <p>DNA reads to genome (PacBio)     e.g. PacBio smrt portal</p> </li> <li> <p>DNA reads to annotated genome e.g. FastQC, trimmomatic, Spades, Prokka, view</p> </li> <li> <p>DNA reads to variants     e.g. FastQC, trimmomatic, snippy, view</p> </li> <li> <p>several sets of DNA reads to genomes: core/pan     e.g. FastQC, trimmomatic, Spades, Prokka, Roary, phandango</p> </li> <li> <p>several sets of DNA to compare structural variants     e.g. FastQC, trimmomatic, Spades, Mauve</p> </li> <li> <p>RNA reads to list of DGE     e.g. xxx</p> </li> </ul>"},{"location":"scrapbook/protocols/variants/","title":"Variant finding","text":"<p>from raw reads to snps</p>"},{"location":"scrapbook/protocols/variants/#introduction","title":"Introduction","text":"<p>FIXME</p>"},{"location":"scrapbook/protocols/variants/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>FIXME</li> <li>FIXME</li> <li>FIXME</li> </ol>"},{"location":"scrapbook/protocols/variants/#main-tutorial","title":"Main Tutorial","text":"<p>FIXME</p> <p>Note</p> <p>Please take note of this because we care about you.</p> <p>Hint</p> <p>This is a useful tip for you because we like you.</p> <p>Warning</p> <p>Please be careful here, you could really mess things up.</p>"},{"location":"scrapbook/protocols/variants/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/rna/data/","title":"Transcriptomics Data","text":"<p>RNA-Seq</p> <p>FASTQ</p>"},{"location":"scrapbook/rna/denovo/","title":"De novo transcriptome assembly","text":""},{"location":"scrapbook/rna/denovo/#command-line","title":"Command line","text":"<ul> <li>Oases</li> <li>StringTie</li> <li>Trinity</li> </ul>"},{"location":"scrapbook/rna/denovo/#galaxy","title":"Galaxy","text":"<ul> <li>Trinity</li> </ul>"},{"location":"scrapbook/rna/qc/","title":"Transcriptomics QC","text":"<p>Align to ref? rRNA levels</p>"},{"location":"scrapbook/rna/denovo/oases/","title":"Oases","text":"<p>cmdline might be in galaxy?</p>"},{"location":"scrapbook/rna/denovo/stringtie/","title":"StringTie","text":"<p>cmd line </p>"},{"location":"scrapbook/rna/denovo/trinity/","title":"Trinity","text":"<p>on cmdline</p> <p>In Galaxy too?</p>"},{"location":"scrapbook/rna/dge/DESeq/","title":"DESeq","text":""},{"location":"scrapbook/rna/dge/HTSeq/","title":"HTSeq","text":""},{"location":"scrapbook/rna/dge/degust/","title":"Degust","text":"<p>for viz of DGE results</p> <p>Following the test of differential gene expresssion DGE in Galaxy, we can use the tool Degust to visualize the results.</p> <p>Link to Degust on github</p> <p>FIXME: Degust to be installed on mGVL Galaxy</p>"},{"location":"scrapbook/rna/dge/degust/#run","title":"Run","text":"<p>Input: read counts (htseq output)</p> <p>Configuration: settings</p> <p>Name - for data</p> <p>Info columns - info for each gene - how to choose</p> <p>Add condition ( for all conditions)</p> <p>Set min read count to 10 (&lt; 10 reads = gene omitted)</p> <p>Save, view</p> <p>Execute</p>"},{"location":"scrapbook/rna/dge/degust/#output","title":"Output","text":"<p>Compare the expression of genes between conditions 1 and 2</p>"},{"location":"scrapbook/rna/dge/galaxy/","title":"DGE using Galaxy","text":"<p>No idea - i think there are some workflows but we dont need Cufflinks etc</p> <p>This tutorial demonstrates how to quantify differences in gene expression between two bacterial samples. We will use RNA-seq data from the samples, and then use several tools to test for differential gene expression. We can then examine the results in the program Degust</p>"},{"location":"scrapbook/rna/dge/galaxy/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>your own mGVL instance</li> <li>knowledge: Galaxy</li> <li>knowledge: Differential gene expression</li> </ul>"},{"location":"scrapbook/rna/dge/galaxy/#start","title":"Start","text":"<ul> <li>open your mGVL galaxy instance.</li> </ul>"},{"location":"scrapbook/rna/dge/galaxy/#input-data","title":"Input data","text":"<ul> <li>RNA-seq reads from the samples<ul> <li>Bacterial species E. coli from study SRP027344 from EBI ENA</li> <li>We will use wildtype (called WTA and WTB) vs. condition 23 (called 23A and 23B)</li> <li>[what was this condition? grown in different media?]</li> <li>Illumina, single-end, 51-bp</li> </ul> </li> <li>a reference genome<ul> <li>E coli: NCBI Reference Sequence: NC_000913.3 in fasta format</li> </ul> </li> <li>FIXME: Get data from GenomeSpace/ or saved galaxy history</li> </ul>"},{"location":"scrapbook/rna/dge/galaxy/#map-transcripts","title":"Map transcripts","text":"<ul> <li>We need to map the transcripts to a reference genome.</li> <li>Bacteria don\u2019t need splice-aware mapping (don\u2019t have introns)</li> <li>Galaxy: tools: NGS Analysis: NGS Mapping: Map with BWA-MEM</li> <li>Will you select a reference genome from your history or use a built-in index?: Use a genome from history and build index</li> <li>Use the following dataset as the reference sequence: E_coli_ref_genome</li> <li>Single or Paired-end reads: single </li> <li>Select FASTQ dataset:<ul> <li>click on the multiple files button (image) in centre</li> <li>make sure all 4 FASTQ files are in there  </li> <li>hold down shift to select them all (they turn blue)</li> <li>this will map each set of transcripts to the ref genome, so there will be 4 output files</li> </ul> </li> </ul>"},{"location":"scrapbook/rna/dge/galaxy/#visualize-the-mapped-reads","title":"Visualize the mapped reads","text":"<ul> <li>The mapped reads are now as .bam files which can\u2019t be viewed by just clicking on them.</li> <li>[should we use JBrowse?]</li> <li>on local computer, install/open IGV</li> <li>Genomes-&gt;load genome from file-&gt;../igv/genomes/NC_000913.2 (Ecoli ref)</li> <li>then in galaxy, go to the mapped transcripts and click on IGV local</li> <li>in IGV, zoom in (top right)</li> <li>the bottom pane is the ref sequence / zoom in and out to see the reads.</li> </ul>"},{"location":"scrapbook/rna/dge/galaxy/#count-reads","title":"Count reads","text":"<ul> <li>Generate read counts per gene</li> <li>For each transcriptome, count the number of transcripts per gene/feature E.g. with HTSeq</li> </ul> <p>data:</p> <p>this is part of the Colombus database of bacterial expression http://nar.oxfordjournals.org/content/suppl/2013/10/29/gkt1086.DC1/nar-02461-data-e-2013-File001.pdf</p> <p>wildtype and two mutants (all grown under minimal conditions or just mutants?) hopefully some expression changes bn condition 23 and wt so that can be viewed in the Degust plots</p>"},{"location":"scrapbook/snps/","title":"Variant calling","text":""},{"location":"scrapbook/snps/#background","title":"Background","text":"<p>Variant calling is the process of identifying differences between to genome samples. Usually differences are limited to single nucleotide polymorphisms (SNPs) and small insertions and deletions (indels). Larger structural variation such as inversions, duplications and large deletions are not typically covered by \u201cvariant calling\u201d.</p>"},{"location":"scrapbook/snps/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>Find variants between a reference genome and a set of reads</li> <li>Determine the effect of those variants on genomic features</li> <li>Understand if the SNP is potentially affecting the phenotype</li> </ol>"},{"location":"scrapbook/snps/#experiment","title":"Experiment","text":"<p>FIXME: You are working on a bug and you notice one of them is forming smaller colonies than normal. You want to find out why this msall colony vairant (SCV) is doing at the DNA level.</p>"},{"location":"scrapbook/snps/#prepare-reference","title":"Prepare reference","text":"<p>FIXME: need FASTA or prefer an annotated genome eg. GBK or GFF3 of the original strain you used</p> <p>Note</p> <p>Please make sure your reference genome includes all chromosomes and plasmids</p>"},{"location":"scrapbook/snps/#align-reads","title":"Align reads","text":"<p>FIXME: BWA MEM align the SCV reads</p>"},{"location":"scrapbook/snps/#call-variants","title":"Call variants","text":"<p>FIXME: freebayes?  varscan2 ? FIXME: talk about multimapping reads?</p>"},{"location":"scrapbook/snps/#filter-variants","title":"Filter variants","text":"<p>FIXME:  vcffilter? something else?  mindepth, homozygous?</p>"},{"location":"scrapbook/snps/#annotate-consequencs","title":"Annotate consequencs","text":"<p>FIXME: snpEff - but it is hard to add a genome</p> <p>Hint</p> <p>Just use Snippy and all this will happen magically?</p>"},{"location":"scrapbook/snps/#what-next","title":"What next?","text":"<ul> <li>SNPs can be used to build phylogentic trees.</li> </ul>"},{"location":"scrapbook/trees/","title":"Phylogenomics","text":""},{"location":"scrapbook/trees/#introduction","title":"Introduction","text":"<p>FIXME</p>"},{"location":"scrapbook/trees/#learning-objectives","title":"Learning Objectives","text":"<p>At the end of this tutorial you should be able to:</p> <ol> <li>FIXME</li> <li>FIXME</li> <li>FIXME</li> </ol>"},{"location":"scrapbook/trees/#main-tutorial","title":"Main Tutorial","text":"<p>FIXME</p> <p>Note</p> <p>Please take note of this because we care about you.</p> <p>Hint</p> <p>This is a useful tip for you because we like you.</p> <p>Warning</p> <p>Please be careful here, you could really mess things up.</p>"},{"location":"scrapbook/trees/#what-next","title":"What next?","text":"<p>FIXME</p>"},{"location":"scrapbook/viz/artemis/","title":"Artemis","text":"<p>link to this tutorial/ or vice versa.</p> <p>FIXME: change/make more generic for this section?</p>"},{"location":"scrapbook/viz/bandage/","title":"Bandage","text":"<p>Bandage is a program to visualize a genome assembly. Link to code on github.</p>"},{"location":"scrapbook/viz/bandage/#start","title":"Start","text":"<ul> <li>Open your mGVL dashboard and click on the link to the Lubuntu desktop.</li> <li>A web window should appear called \u201cnoVNC\u201d. This shows the virtual desktop.</li> <li> <p>Open the Terminal in this VNC. type in: <code>/mnt/gvl/apps/bandage/Bandage</code></p> </li> <li> <p>The Bandage window will appear.</p> </li> </ul>"},{"location":"scrapbook/viz/bandage/#input-data","title":"Input data","text":"<ul> <li>Click on File: Load graph. Select a graph to upload.</li> <li>FIXME: put in example bacterial genome graph with a feature that bandage reveals.  E.g. a FASTG output file from Spades.</li> </ul>"},{"location":"scrapbook/viz/bandage/#run-bandage","title":"Run Bandage","text":"<ul> <li>Under Graph drawing, click on Draw graph.</li> <li>A graph of the contigs and their connections will appear.</li> </ul> <p>FIXME: add a series of steps that can be done that will show some important feature. e.g.</p> <ul> <li>Graph display: Colour by read depth</li> <li>Node labels, check box next to Read depth.</li> <li>select some nodes</li> <li>Output: Web BLAST selected nodes etc.</li> </ul>"},{"location":"scrapbook/viz/bandage/#output","title":"Output","text":"<ul> <li>Output: Save entire graph to GFA</li> </ul> <p>(FIXME: where does this save; what can you use it for next).</p>"},{"location":"scrapbook/viz/bandage/#next","title":"Next","text":""},{"location":"scrapbook/viz/bandage/#more-information","title":"More information","text":""},{"location":"scrapbook/viz/phandango/","title":"Phandango","text":"<p>FIXME: current Firefox on mGVL Lubuntu desktop is too old to use Phandango</p> <p>FIXME: ideally: sepsis related: would be good to see clade x has AMR genes? e.g. this example shows a subclade which is ceftriaxone susceptable but azithromycin resistant https://github.com/jameshadfield/phandango/wiki/Panel%20Layout#metadata</p> <p>Phandango is a tool to vizualize genome phylogenies.</p>"},{"location":"scrapbook/viz/phandango/#start","title":"Start","text":"<ul> <li> <p>prepare input files (e.g. from Roary output):</p> <ul> <li>gene_presence_absence.csv: gene name, various information, then a column for each sample - if the gene is present in that sample, it is listed here with an appended gene ID.</li> <li>tree.newick: a phylogenetic tree based on an alignment of core genes. (Note: this is not a default Roary output and must be specified by creating an alignment of core genes, and then building a phylogenetic tree).</li> </ul> </li> <li> <p>navigate to these files in your mGVL (e.g. ssh in terminal) and move them to your public_html folder.</p> </li> <li>open your public_html folder (e.g. http://mgvl_IP/public/username  or similar), and download to your local computer.</li> </ul>"},{"location":"scrapbook/viz/phandango/#run","title":"Run","text":"<ul> <li> <p>open the Phandango webpage.</p> </li> <li> <p>drag and drop these files onto the webpage.</p> </li> <li> <p>now we can see the tree on the left, and the core and accessory genome aligned to each sample.</p> </li> </ul> <p></p> <ul> <li> <p>things to look at:</p> <ul> <li>top tabs: settings - change the displayed labels</li> <li>change panel sizes - drag grey circles at the edges of each panel</li> <li>line graph?</li> </ul> </li> </ul>"},{"location":"scrapbook/viz/phandango/#save-output-image","title":"Save output image","text":"<ul> <li>press p to save the displayed data as a vector SVG file.</li> </ul>"},{"location":"scrapbook/viz/phandango/#what-next","title":"What next","text":""}]}